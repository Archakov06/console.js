{"version":3,"sources":["utils.js","abstract-view.js","enums.js","type-view.js","object/object-view.js","array/array-view.js","function/function-view.js","primitive/primitive-view.js","main.js","index-silent.js"],"names":["getElement","htmlMarkup","div","document","createElement","innerHTML","firstElementChild","AbstractView","this","template","_el","render","bind","Mode","ViewType","TypeView","params","cons","parentView","_parentView","_rootView","viewType","_console","_value","val","_mode","mode","_type","type","_propKey","propKey","_isOpened","_currentDepth","depth","_templateParams","_headEl","el","querySelector","_headContentEl","_infoEl","_contentEl","afterRender","self","bool","toggleInfoShowed","toggleHeadContentShowed","_isOpeningDisabled","togglePointer","_addOrRemoveHeadClickHandler","state","isContentShowed","_isAutoExpandNeeded","toggleArrowBottom","_isContentShowed","toggleContentShowed","childElementCount","appendChild","createContent","value","fragment","isEnable","toggleMiddleware","evt","preventDefault","_additionHeadClickHandler","_bindedHeadClickHandler","_headClickHandler","addEventListener","removeEventListener","key","_state","defineProperties","Object","getOwnPropertyDescriptors","_getStateCommonProxyObject","_getStateProxyObject","seal","_isAutoExpandNeededProxied","expandDepth","rootFieldsMoreThanNeed","keys","length","minFieldsToExpand","exclude","includes","index","valueEl","withoutKey","entryEl","className","classList","toggle","add","remove","ObjectView","OBJECT","_this","stringTag","prototype","toString","call","_stringTagName","substring","_constructorName","constructor","name","_getHeadContent","elOrStr","_getHeadContent2","stateParams","headContentClassName","_headContent","textContent","HTMLElement","DocumentFragment","toggleHeadContentBraced","toggleHeadContentOversized","toggleItalic","toggleError","obj","_getHeadDirContent","_getHeadLogContent","_getHeadPreviewContent","isShowInfo","isBraced","isOpeningDisabled","isOversized","isStringified","getPrototypeOf","Error","stack","Number","createTypedView","parseInt","nextNestingLevel","String","Date","RegExp","source","flags","hasOwnProperty","isHeadContentShowed","str","tagName","toLowerCase","id","Array","join","isPreview","createDocumentFragment","addedKeys","Set","size","maxFieldsInHead","_createObjectEntryEl","err","ownPropertyNamesAndSymbols","getOwnPropertyNames","concat","getOwnPropertySymbols","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","has","view","createEntryEl","ArrayView","ARRAY","withHeadContentlength","_lengthEl","_getStateParams","toggleContentLengthShowed","isShowLength","arr","ownPropertyNamesSet","i","l","_createArrayEntryEl","delete","isKeyNaN","isNaN","FnType","FunctionView","FUNCTION","_fnType","checkFnType","_getHeadPropMarkup","_getHeadDirMarkup","_getHeadLogMarkup","bodyLines","_parseBody","_parseParams","joinedLines","markup","paramsStart","indexOf","paramsEnd","paramsContent","trim","split","map","it","bodyContent","arrowIndex","firstBraceIndex","lines","firstLine","shift","firstWhitespaceIndexes","filter","line","ex","exec","min","Math","apply","toConsumableArray","slice","unshift","fn","tempValue","body","_getBody","_getInfo","firstParenthesisIndex","classIndex","PrimitiveView","PRIMITIVE","unsafe","replace","html","escapeHtml","Infinity","substr","Console","container","arguments","undefined","_views","Map","_container","object","array","function","paramsObject","paramName","isArray","availableTypes","push","every","rest","_len","_key","_getRowEl","onlog","onerror","ondir","_typeof","entries","forEach","consoleObject","log","info","error","warn","dir","errors","collectErr","window","console","messages","collectLogs","dirs","style","jsConsole","extend","rel","href","CSS_URL","head"],"mappings":"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","file":"index-silent.js","sourcesContent":["export const getElement = (htmlMarkup) => {\n  const div = document.createElement(`div`);\n  div.innerHTML = htmlMarkup;\n  return div.firstElementChild;\n};\n","import {getElement} from './utils';\n\nexport default class AbstractView {\n  constructor() {}\n\n  /**\n   * @abstract\n   * @return {string}\n   */\n  get template() {}\n\n  get el() {\n    if (!this._el) {\n      this._el = this.render();\n      this.bind(this._el);\n    }\n    return this._el;\n  }\n\n  render() {\n    return getElement(this.template);\n  }\n\n  bind() {}\n}\n","export const Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  PROP: `prop`,\n  ERROR: `error`\n};\n\nexport const ViewType = {\n  FUNCTION: `function`,\n  OBJECT: `object`,\n  ARRAY: `array`,\n  PRIMITIVE: `primitive`\n};\n\nexport const Class = {\n  CONSOLE_ITEM_HEAD: `item__head`,\n  CONSOLE_ITEM_POINTER: `item_pointer`,\n  CONSOLE_ITEM_HEAD_SHOW: `item__head_show`,\n  ENTRY_CONTAINER_BRACED: `entry-container_braced`,\n  ENTRY_CONTAINER_OVERSIZE: `entry-container_oversize`,\n  CONSOLE_ITEM_HEAD_PARENTHESED: `item__head_parenthesed`,\n  CONSOLE_ITEM_HEAD_INFO: `item__head-info`,\n  CONSOLE_ITEM_HEAD_ELEMENTS: `item__head-elements`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_SHOW: `item__head-elements_show`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER: `item-content-container`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW: `item-content-container_show`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH: `item__head-elements-length`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW: `item__head-elements-length_show`\n};\n","/* eslint guard-for-in: \"off\"*/\nimport AbstractView from './abstract-view';\nimport {getElement} from './utils';\nimport {Mode} from './enums';\n\nexport default class TypeView extends AbstractView {\n  constructor(params, cons) {\n    super();\n    if (params.parentView) {\n      this._parentView = params.parentView;\n      this._rootView = params.parentView._rootView;\n    }\n    this.viewType = null;\n    this._console = cons;\n    this._value = params.val;\n    this._mode = params.mode;\n    this._type = params.type;\n    this._propKey = params.propKey;\n    this._isOpened = false;\n    this._currentDepth = typeof params.depth === `number` ? params.depth : 1;\n    this._templateParams = {};\n  }\n\n  afterRender() {}\n\n  bind() {\n    this._headEl = this.el.querySelector(`.head`);\n    this._headContentEl = this.el.querySelector(`.head__content`);\n    this._infoEl = this.el.querySelector(`.info`);\n    this._contentEl = this.el.querySelector(`.item__content`);\n\n    this.afterRender();\n  }\n\n  set state(params) {\n    if (!this._state) {\n      this._state = {};\n      Object.defineProperties(\n          this._state,\n          Object.getOwnPropertyDescriptors(this._getStateCommonProxyObject())\n      );\n      Object.defineProperties(\n          this._state,\n          Object.getOwnPropertyDescriptors(this._getStateProxyObject())\n      );\n      Object.seal(this._state);\n    }\n    for (let key in params) {\n      this._state[key] = params[key];\n    }\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  /**\n   * @abstract\n   * @return {{}} if not overriden return object without descriptors\n   */\n  _getStateProxyObject() {\n    return {};\n  }\n\n  _getStateCommonProxyObject() {\n    const self = this;\n    return {\n      set isShowInfo(bool) {\n        self.toggleInfoShowed(bool);\n      },\n      set isHeadContentShowed(bool) {\n        self.toggleHeadContentShowed(bool);\n      },\n      set isOpeningDisabled(bool) {\n        if (self._mode === Mode.PREVIEW || self._isOpeningDisabled === bool) {\n          return;\n        }\n        self.togglePointer(!bool);\n        self._addOrRemoveHeadClickHandler(!bool);\n        self.state.isContentShowed = !bool && self._isAutoExpandNeeded;\n        self._isOpeningDisabled = bool;\n      },\n      get isOpeningDisabled() {\n        return self._isOpeningDisabled;\n      },\n      set isContentShowed(bool) {\n        self.toggleArrowBottom(bool);\n        self._isContentShowed = self.toggleContentShowed(bool);\n        if (self._isContentShowed && self._contentEl.childElementCount === 0) {\n          self._contentEl.appendChild(self.createContent(self.value, false).fragment);\n        }\n      },\n      get isContentShowed() {\n        return self._isContentShowed;\n      }\n    };\n  }\n\n  toggleHeadContentBraced(isEnable) {\n    return TypeView.toggleMiddleware(this._headContentEl, `entry-container--braced`, isEnable);\n  }\n\n  toggleHeadContentOversized(isEnable) {\n    return TypeView.toggleMiddleware(this._headContentEl, `entry-container--oversize`, isEnable);\n  }\n\n  toggleInfoShowed(isEnable) {\n    return !TypeView.toggleMiddleware(this._infoEl, `hidden`, !isEnable);\n  }\n\n  toggleHeadContentShowed(isEnable) {\n    return !TypeView.toggleMiddleware(this._headContentEl, `hidden`, !isEnable);\n  }\n\n  toggleContentShowed(isEnable) {\n    return !TypeView.toggleMiddleware(this._contentEl, `hidden`, !isEnable);\n  }\n\n  toggleError(isEnable) {\n    return TypeView.toggleMiddleware(this.el, Mode.ERROR, isEnable);\n  }\n\n  toggleItalic(isEnable) {\n    return TypeView.toggleMiddleware(this._headEl, `italic`, isEnable);\n  }\n\n  togglePointer(isEnable) {\n    return TypeView.toggleMiddleware(this._headEl, `item__head--pointer`, isEnable);\n  }\n\n  toggleArrowBottom(isEnable) {\n    return TypeView.toggleMiddleware(this._headEl, `item__head--arrow-bottom`, isEnable);\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get mode() {\n    return this._mode;\n  }\n\n  get nextNestingLevel() {\n    return this._currentDepth + 1;\n  }\n\n  get _isAutoExpandNeeded() {\n    if (!this._isAutoExpandNeededProxied) {\n      this._isAutoExpandNeededProxied = false;\n\n      if (this.viewType === null ||\n        this._currentDepth > this._console.params[this._rootView.viewType].expandDepth) {\n        return this._isAutoExpandNeededProxied;\n      }\n\n      let rootFieldsMoreThanNeed = false;\n      if (this._parentView && this._parentView._isAutoExpandNeeded) {\n        rootFieldsMoreThanNeed = true;\n      } else if (Object.keys(this.value).length >= // Object.getOwnPropertyNames\n      this._console.params[this._rootView.viewType].minFieldsToExpand) {\n        rootFieldsMoreThanNeed = true;\n      }\n\n      if (rootFieldsMoreThanNeed &&\n      !this._console.params[this._rootView.viewType].exclude.includes(this.viewType)/* &&\n      this._propKey !== `__proto__`*/) {\n        this._isAutoExpandNeededProxied = true;\n      }\n    }\n    return this._isAutoExpandNeededProxied;\n  }\n\n  _additionHeadClickHandler() {}\n\n  _headClickHandler(evt) {\n    evt.preventDefault();\n    this.toggleArrowBottom();\n    this.state.isContentShowed = !this.state.isContentShowed;\n    this._additionHeadClickHandler();\n  }\n\n  _addOrRemoveHeadClickHandler(bool) {\n    if (!this._bindedHeadClickHandler) {\n      this._bindedHeadClickHandler = this._headClickHandler.bind(this);\n    }\n    if (bool) {\n      this._headEl.addEventListener(`click`, this._bindedHeadClickHandler);\n    } else {\n      this._headEl.removeEventListener(`click`, this._bindedHeadClickHandler);\n    }\n  }\n\n  static createEntryEl(index, valueEl, withoutKey) {\n    const entryEl = getElement(`\\\n<span class=\"entry-container__entry\">\\\n  ${withoutKey ? `` : `<span class=\"entry-container__key\">${index}</span>`}<span class=\"entry-container__value-container\"></span>\\\n</span>`);\n    const valueContEl = entryEl.querySelector(`.entry-container__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n\n  static toggleMiddleware(el, className, isEnable) {\n    if (typeof isEnable === `undefined`) {\n      return el.classList.toggle(className);\n    }\n    if (isEnable) {\n      el.classList.add(className);\n      return true;\n    } else {\n      el.classList.remove(className);\n      return false;\n    }\n  }\n}\n","/* eslint guard-for-in: \"off\"*/\n/* eslint no-empty: \"off\"*/\nimport TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nexport default class ObjectView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this.viewType = ViewType.OBJECT;\n    if (!params.parentView) {\n      this._rootView = this;\n    }\n    const stringTag = Object.prototype.toString.call(this.value);\n    this._stringTagName = stringTag.substring(8, stringTag.length - 1);\n    this._constructorName = this.value.constructor.name;\n  }\n\n  get template() {\n    return `\\\n<div class=\"console__item item item--${this.viewType}\">\\\n  <div class=\"head item__head\">\\\n    <span class=\"info head__info hidden\"></span>\\\n    <div class=\"head__content entry-container entry-container--head entry-container--${this.viewType} hidden\"></div>\\\n  </div>\\\n  <div class=\"item__content entry-container entry-container--${this.viewType} hidden\"></div>\\\n</div>`;\n  }\n\n  afterRender() {\n    const {elOrStr, stateParams, headContentClassName} = this._getHeadContent();\n    this._headContent = elOrStr;\n\n    if (headContentClassName) {\n      this._headContentEl.classList.add(headContentClassName);\n    }\n\n    if (this._constructorName === `Object` && this._stringTagName !== `Object`) {\n      this._infoEl.textContent = this._stringTagName;\n    } else {\n      this._infoEl.textContent = this._constructorName;\n    }\n\n    this.state = stateParams;\n  }\n\n  _getStateProxyObject() {\n    const self = this;\n    return {\n      set isShowInfo(bool) {\n        self.toggleInfoShowed(bool);\n      },\n      set isHeadContentShowed(bool) {\n        if (!self._headContentEl.innerHTML) {\n          if (self._headContent instanceof HTMLElement || self._headContent instanceof DocumentFragment) {\n            self._headContentEl.appendChild(self._headContent);\n          } else {\n            self._headContentEl.innerHTML = self._headContent;\n          }\n        }\n        self.toggleHeadContentShowed(bool);\n      },\n      set isBraced(bool) {\n        self.toggleHeadContentBraced(bool);\n      },\n      set isOversized(bool) {\n        self.toggleHeadContentOversized(bool);\n      },\n      set isStringified(bool) {\n        if (!bool && (self._mode === Mode.LOG || self._mode === Mode.ERROR) && !self._parentView) {\n          self.toggleItalic(bool);\n        }\n        if (bool && self._mode === Mode.ERROR) {\n          self.toggleError(bool);\n        }\n      },\n    };\n  }\n\n  _getHeadContent() {\n    let obj;\n    if (this._mode === Mode.DIR) {\n      obj = this._getHeadDirContent();\n    } else if (this._mode === Mode.LOG || this._mode === Mode.PROP || this._mode === Mode.ERROR) {\n      obj = this._getHeadLogContent();\n    } else if (this._mode === Mode.PREVIEW) {\n      obj = this._getHeadPreviewContent();\n    }\n    return obj;\n  }\n\n  _getHeadPreviewContent() {\n    if (this._stringTagName === `Object`) {\n      return {\n        elOrStr: `...`,\n        stateParams: {\n          isShowInfo: false,\n          isHeadContentShowed: true,\n          isBraced: true\n        }\n      };\n    }\n    return this._getHeadDirContent();\n  }\n\n  _getHeadLogContent() {\n    let val;\n    let isShowInfo = false;\n    let isBraced = true;\n    let isOpeningDisabled = false;\n    let isOversized = false;\n    let isStringified = false;\n    let headContentClassName;\n\n    if (this.value instanceof HTMLElement && Object.getPrototypeOf(this.value).constructor !== HTMLElement) {\n      return this._getHeadDirContent();\n    } else if (this.value instanceof Error) {\n      isBraced = false;\n      val = `<pre>${this.value.stack}</pre>`;\n      isOpeningDisabled = true;\n      isStringified = true;\n    } else if (this.value instanceof Number) {\n      const view = this._console.createTypedView(Number.parseInt(this.value, 10), Mode.PREVIEW, this.nextNestingLevel, this);\n      val = view.el;\n      isShowInfo = true;\n    } else if (this.value instanceof String) {\n      const view = this._console.createTypedView(this.value.toString(), Mode.PREVIEW, this.nextNestingLevel, this);\n      val = view.el;\n      isShowInfo = true;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n      isStringified = true;\n      isBraced = false;\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n      headContentClassName = `regexp`;\n      isOpeningDisabled = true;\n      isBraced = false;\n    } else {\n      const obj = this.createContent(this.value, true);\n      val = obj.fragment;\n      isOversized = obj.isOversized;\n      isOpeningDisabled = val.childElementCount === 0;\n      if (this._stringTagName !== `Object` || (\n        this._constructorName !== `Object` && !this.value.hasOwnProperty(`constructor`)\n      ) || this._propKey === `__proto__`) {\n        isShowInfo = true;\n      }\n    }\n    return {\n      elOrStr: val,\n      headContentClassName,\n      stateParams: {\n        isShowInfo,\n        isHeadContentShowed: this._propKey !== `__proto__`,\n        isBraced,\n        isOpeningDisabled,\n        isOversized,\n        isStringified\n      }\n    };\n  }\n\n  _getHeadDirContent() {\n    let val;\n    let isShowInfo = false;\n    let isHeadContentShowed = true;\n    let isBraced = false;\n    if (this.value instanceof HTMLElement) {\n      let str = this.value.tagName.toLowerCase();\n      str += this.value.id;\n      if (this.value.classList.length) {\n        str += `.` + Array.prototype.join.call(this.value.classList, `.`);\n      }\n      val = str;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n    } else if (this.value instanceof Error) {\n      val = this.value.toString();\n    } else {\n      val = this.value;\n      isShowInfo = true;\n      isHeadContentShowed = false;\n    }\n    return {\n      elOrStr: val,\n      stateParams: {\n        isShowInfo,\n        isHeadContentShowed,\n        isBraced,\n        isOpeningDisabled: false\n      }\n    };\n  }\n\n  createContent(obj, isPreview) {\n    const fragment = document.createDocumentFragment();\n    const addedKeys = new Set();\n    // TODO: Добавить счётчик, чтобы больше 5 значений не добавлялось\n    for (let key in obj) {\n      if (isPreview && !obj.hasOwnProperty(key)) { // Перечисляемые свои\n        continue;\n      }\n      if (isPreview && addedKeys.size === this._console.params[this.viewType].maxFieldsInHead) {\n        return {\n          fragment,\n          isOversized: true\n        };\n      }\n      try {\n        const val = obj[key];\n        fragment.appendChild(this._createObjectEntryEl(key, val, isPreview));\n        addedKeys.add(key);\n      } catch (err) {}\n    }\n    const ownPropertyNamesAndSymbols = Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n    // ownPropertyNamesAndSymbols.push(`__proto__`);\n    // вытащить __proto__ из неперечисляемых своих\n    // сделать доп обертку\n    for (let key of ownPropertyNamesAndSymbols) { // Неперечисляемые свои\n      if (addedKeys.has(key) || (isPreview && key === `__proto__`)) {\n        continue;\n      }\n      if (isPreview && addedKeys.size === this._console.params[this.viewType].maxFieldsInHead) {\n        return {\n          fragment,\n          isOversized: true\n        };\n      }\n      try {\n        const val = obj[key];\n        fragment.appendChild(this._createObjectEntryEl(key, val, isPreview));\n        addedKeys.add(key);\n      } catch (err) {}\n    }\n    return {\n      fragment,\n      isOversized: false\n    };\n  }\n\n  _createObjectEntryEl(key, val, isPreview) {\n    const view = this._console.createTypedView(val, isPreview ? Mode.PREVIEW : Mode.PROP, this.nextNestingLevel, this, key);\n    return ObjectView.createEntryEl(key.toString(), view.el);\n  }\n}\n","import TypeView from '../type-view';\nimport {getElement} from '../utils';\nimport {Mode, ViewType} from '../enums';\n\nconst EMPTY = `empty`;\n\nexport default class ArrayView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this.viewType = ViewType.ARRAY;\n    if (!params.parentView) {\n      this._rootView = this;\n    }\n\n    this._templateParams.withHeadContentlength = true;\n  }\n\n  get template() {\n    return `\\\n<div class=\"console__item item item--${this.viewType}\">\\\n  <div class=\"head item__head\">\\\n    <span class=\"info head__info hidden\"></span>\\\n    <span class=\"length head__length hidden\">${this.value.length}</span>\\\n    <div class=\"head__content entry-container entry-container--head entry-container--${this.viewType} hidden\"></div>\\\n  </div>\\\n  <div class=\"item__content entry-container entry-container--${this.viewType} hidden\"></div>\\\n</div>`;\n  }\n\n  afterRender() {\n    this._lengthEl = this.el.querySelector(`.length`);\n    this.toggleHeadContentBraced();\n    this._infoEl.textContent = this.value.constructor.name;\n    this.state = this._getStateParams();\n\n    if ((this._mode === Mode.LOG || this._mode === Mode.ERROR) && !this._parentView) {\n      this.toggleItalic(true);\n    }\n  }\n\n  _getStateProxyObject() {\n    const self = this;\n    return {\n      set isHeadContentShowed(bool) {\n        if (bool && self._headContentEl.childElementCount === 0) {\n          self._headContentEl.appendChild(self.createContent(self.value, true).fragment);\n        }\n        self.toggleHeadContentShowed(bool);\n      },\n      set isShowLength(bool) {\n        self.toggleContentLengthShowed(bool);\n      }\n    };\n  }\n\n  toggleContentLengthShowed(isEnable) {\n    return !TypeView.toggleMiddleware(this._lengthEl, `hidden`, !isEnable);\n  }\n\n  _additionHeadClickHandler() {\n    if (this._mode === Mode.PROP) {\n      this.state.isShowInfo = this._isContentShowed;\n      this.state.isHeadContentShowed = !this._isContentShowed;\n      this.state.isShowLength = this._isContentShowed || this.value.length > 1;\n    }\n  }\n\n  _getStateParams() {\n    let isShowInfo = false;\n    let isHeadContentShowed = true;\n    let isShowLength = this.value.length > 1;\n    if (this._mode === Mode.DIR) {\n      isShowInfo = true;\n      isHeadContentShowed = false;\n      isShowLength = true;\n    } else if (this._mode === Mode.PREVIEW) {\n      isShowInfo = true;\n      isHeadContentShowed = false;\n      isShowLength = true;\n    } else if (this._mode === Mode.PROP) {\n      isShowInfo = false;\n      isHeadContentShowed = true;\n    }\n    return {\n      isShowInfo,\n      isHeadContentShowed,\n      isShowLength,\n      isOpeningDisabled: false\n    };\n  }\n\n  createContent(arr, isPreview) {\n    const ownPropertyNamesSet = new Set(Object.getOwnPropertyNames(arr));\n    const fragment = document.createDocumentFragment();\n    for (let i = 0, l = arr.length; i < l; i++) {\n      const key = i.toString();\n      if (ownPropertyNamesSet.has(key)) {\n        const val = arr[i];\n        fragment.appendChild(this._createArrayEntryEl(i, val, isPreview));\n        ownPropertyNamesSet.delete(key);\n      } else if (isPreview) {\n        const entryEl = ArrayView.createEntryEl(key, getElement(`<span class=\"${EMPTY}\">${EMPTY}</span>`), true);\n        fragment.appendChild(entryEl);\n      }\n    }\n    for (let key of ownPropertyNamesSet) {\n      if (isPreview && key === `length`) {\n        continue;\n      }\n      const val = arr[key];\n      fragment.appendChild(this._createArrayEntryEl(key, val, isPreview));\n    }\n    return {fragment};\n  }\n\n  _createArrayEntryEl(key, val, isPreview) {\n    const isKeyNaN = Number.isNaN(Number.parseInt(key, 10));\n    const view = this._console.createTypedView(val, isPreview ? Mode.PREVIEW : Mode.PROP, this.nextNestingLevel, this, key);\n    return ArrayView.createEntryEl(key.toString(), view.el, isPreview ? !isKeyNaN : isPreview);\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nconst MAX_PREVIEW_FN_BODY_LENGTH = 43;\n\nconst FnType = {\n  PLAIN: `plain`,\n  ARROW: `arrow`,\n  CLASS: `class`\n};\n\n// arguments, caller, length, name, prototype, __proto__, [[FunctionLocation]], [[Scopes]]\n\n// if .caller not accessed — не выводим\n// if prototype undefined — не выводим\n// name — если неименованная — получает имя переменной, в которую записана\n// если именнованная — то имя ф-ии\n\nexport default class FunctionView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this.viewType = ViewType.FUNCTION;\n    if (!params.parentView) {\n      this._rootView = this;\n    }\n    this._fnType = FunctionView.checkFnType(this.value);\n  }\n\n  get template() {\n    const isShowInfo = this._fnType !== FnType.ARROW || this._mode === Mode.PREVIEW;\n    const body = this._getBody();\n    return `\\\n<div class=\"console__item item item--${this.viewType} ${this._mode === Mode.ERROR ? `error` : ``}\">\\\n  <div class=\"head item__head italic\">\\\n    <pre class=\"head__content\"><span class=\"info info--function ${isShowInfo ? `` : `hidden`}\">${this._getInfo()}</span>${isShowInfo && body ? ` ` : ``}${this._getBody()}</pre>\\\n  </div>\\\n  <div class=\"item__content entry-container entry-container--${this.viewType} hidden\"></div>\\\n</div>`;\n  }\n\n  afterRender() {\n    const params = {\n      isOpeningDisabled: this._mode !== Mode.DIR && this._mode !== Mode.PROP\n    };\n\n    this.state = params;\n  }\n\n  _getInfo() {\n    let str = ``;\n    switch (this._fnType) {\n      case FnType.CLASS:\n        str = `class`;\n        break;\n      case FnType.PLAIN:\n      case FnType.ARROW:\n        str = `f`;\n        break;\n    }\n    return str;\n  }\n\n  _getBody() {\n    let str = ``;\n    switch (this._mode) {\n      case Mode.PROP:\n        str = this._getHeadPropMarkup();\n        break;\n      case Mode.DIR:\n        str = this._getHeadDirMarkup();\n        break;\n      case Mode.LOG:\n      case Mode.ERROR:\n        str = this._getHeadLogMarkup();\n        break;\n    }\n    return str;\n  }\n\n  _getHeadPropMarkup() {\n    const bodyLines = this._parseBody();\n    const params = this._parseParams();\n    const joinedLines = bodyLines.join(`\\n`);\n\n    let markup = `\\\n${this.value.name ? this.value.name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}`;\n    if (this._fnType === FnType.ARROW) {\n      markup += `${joinedLines.length <= MAX_PREVIEW_FN_BODY_LENGTH ? joinedLines : `{...}`}`;\n    }\n    return markup;\n  }\n\n  _getHeadDirMarkup() {\n    const params = this._parseParams();\n\n    let markup = `\\\n${this.value.name ? this.value.name : ``}\\\n${this._fnType === FnType.PLAIN ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? `()` : ``}`;\n    return markup;\n  }\n\n  _getHeadLogMarkup() {\n    const bodyLines = this._parseBody();\n    const params = this._parseParams();\n\n    return `\\\n${this.value.name && this._fnType !== FnType.ARROW ? `${this.value.name} ` : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}${bodyLines.join(`\\n`)}`;\n  }\n\n  _parseParams() {\n    const str = this.value.toString();\n    const paramsStart = str.indexOf(`(`);\n    const paramsEnd = str.indexOf(`)`);\n\n    const paramsContent = str.substring(paramsStart + 1, paramsEnd).trim();\n\n    return paramsContent ? paramsContent.split(`,`).map((it) => it.trim()) : [];\n  }\n\n  _parseBody() {\n    let str = this.value.toString().trim();\n\n    let bodyContent = [];\n    if (this._fnType === FnType.ARROW) {\n      const arrowIndex = str.indexOf(`=>`);\n      str = str.substring(arrowIndex + 2);\n    }\n    const firstBraceIndex = str.indexOf(`{`);\n    str = str.substring(firstBraceIndex);\n    const lines = str.split(`\\n`);\n    const firstLine = lines.shift();\n    const firstWhitespaceIndexes = lines\n        .filter((line) => line.length !== 0)\n        .map((line) => {\n          const ex = /^\\s+/.exec(line);\n          if (ex && ex[0].hasOwnProperty(`length`)) {\n            return ex[0].length;\n          }\n          return 0;\n        });\n\n    const min = Math.min(...firstWhitespaceIndexes);\n    bodyContent = lines.map((line) => line.slice(min));\n    bodyContent.unshift(firstLine);\n    return bodyContent;\n  }\n\n  createContent(fn) {\n    const fragment = document.createDocumentFragment();\n    const fnKeys = [`name`, `prototype`, `length`, `__proto__`];\n    const keys = Object.keys(fn).concat(fnKeys);\n    for (let key of keys) {\n      let value;\n      try {\n        const tempValue = fn[key];\n        if (typeof tempValue !== `undefined`) {\n          value = tempValue;\n        } else {\n          continue;\n        }\n      } catch (err) {\n        continue;\n      }\n      const view = this._console.createTypedView(value, Mode.PROP, this.nextNestingLevel, this, key);\n      const entryEl = FunctionView.createEntryEl(key.toString(), view.el);\n      fragment.appendChild(entryEl);\n    }\n    return {fragment};\n  }\n\n  static checkFnType(fn) {\n    const str = fn.toString();\n    const firstParenthesisIndex = str.indexOf(`(`);\n\n    const classIndex = str.indexOf(`class`);\n    const arrowIndex = str.indexOf(`=>`);\n    if (classIndex !== -1 && (firstParenthesisIndex === -1 || classIndex < firstParenthesisIndex)) {\n      return FnType.CLASS;\n    } else if (arrowIndex !== -1 && arrowIndex > firstParenthesisIndex) {\n      return FnType.ARROW;\n    }\n    return FnType.PLAIN;\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nexport default class PrimitiveView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this.viewType = ViewType.PRIMITIVE;\n  }\n\n  get template() {\n    const type = this._type;\n    let value = this.value;\n    let html = ``;\n    if (type === `string` || type === `symbol`) {\n      if (type === `symbol`) {\n        value = value.toString();\n      }\n      value = this.escapeHtml(value);\n    }\n    switch (type) {\n      case `undefined`:\n      case `null`:\n      case `boolean`:\n        html = `<div class=\"console__item item item--primitive ${type}\">${value}</div>`;\n        break;\n\n      case `number`:\n        if (Number.isNaN(value)) {\n          html = `<div class=\"console__item item item--primitive NaN\">NaN</div>`;\n        } else if ((value === Infinity || value === -Infinity)) {\n          html = `<div class=\"console__item item item--primitive number\">${(value === -Infinity ? `-` : ``)}Infinity</div>`;\n        } else {\n          html = `<div class=\"console__item item item--primitive ${type}\">${value}</div>`;\n        }\n        break;\n\n      case `string`:\n        let str;\n        if (this._mode === Mode.PREVIEW && value.length > 100) {\n          str = `${value.substr(0, 50)}...${value.substr(-50)}`;\n        } else {\n          str = value;\n        }\n        html = `<pre class=\"console__item item item--primitive string ${this._mode === Mode.PROP || this._mode === Mode.PREVIEW ? `string--nowrap` : ``} ${this._mode === Mode.PROP ? `pointer` : ``} ${this._mode === Mode.ERROR ? `${this._mode}` : ``}\">${str}</pre>`;\n        break;\n      case `symbol`:\n        html = `<div class=\"console__item item item--primitive symbol\">${value}</div>`;\n        break;\n\n      case `object`:\n        if (value === null) {\n          html = `<div class=\"console__item item item--primitive null\">${value}</div>`;\n          break;\n        }\n    }\n    return html;\n  }\n\n  bind() {\n    if (this._mode === Mode.PROP && this._type === `string`) {\n      this.el.addEventListener(`click`, (evt) => {\n        evt.preventDefault();\n        this.el.classList.toggle(`string--nowrap`);\n      });\n    }\n  }\n\n  escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, `&amp;`)\n        .replace(/</g, `&lt;`)\n        .replace(/>/g, `&gt;`)\n        .replace(/\"/g, `&quot;`)\n        .replace(/'/g, `&#039;`);\n  }\n}\n","import ObjectView from './object/object-view';\nimport ArrayView from './array/array-view';\nimport FunctionView from './function/function-view';\nimport PrimitiveView from './primitive/primitive-view';\nimport {getElement} from './utils';\nimport {Mode, ViewType} from './enums';\n\nconst MAX_HEAD_ELEMENTS_LENGTH = 5;\n\n/**\n * Console\n * @class\n */\nexport default class Console {\n  /**\n   * Initialize console into container\n   * @param {HTMLElement} container — console container\n   * @param {{}} params — parameters\n   * @property {number} params.minFieldsToExpand — min number of fields in obj to expand\n   * @property {number} params.maxFieldsInHead — max number of preview fields inside head\n   * @property {number} params.expandDepth — level of depth to expand\n   **/\n  constructor(container, params = {}) {\n    if (!container) {\n      throw new Error(`Console is not inited!`);\n    }\n    this._views = new Map();\n    this._container = container;\n    this.params = {\n      object: this._parseParams(params.object, `object`),\n      array: this._parseParams(params.array, `array`),\n      function: this._parseParams(params.function, `function`)\n    };\n  }\n\n  _parseParams(paramsObject, paramName) {\n    if (paramsObject) {\n      // Set this._expandDepth and this._minFieldsToExpand only if expandDepth provided and > 0\n      if (typeof paramsObject.expandDepth === `number` &&\n      paramsObject.expandDepth > 0) {\n\n        paramsObject.minFieldsToExpand = (\n          typeof paramsObject.minFieldsToExpand === `number` &&\n          paramsObject.minFieldsToExpand > 0\n        ) ? paramsObject.minFieldsToExpand : 0;\n      }\n\n      paramsObject.maxFieldsInHead = (\n        typeof paramsObject.maxFieldsInHead === `number` &&\n        paramsObject.maxFieldsInHead > 0\n      ) ? paramsObject.maxFieldsInHead : MAX_HEAD_ELEMENTS_LENGTH;\n    } else {\n      paramsObject = {};\n      if (paramName === `object`) {\n        paramsObject.maxFieldsInHead = MAX_HEAD_ELEMENTS_LENGTH;\n      }\n    }\n    if (!Array.isArray(paramsObject.exclude)) {\n      paramsObject.exclude = [];\n    } else {\n      const availableTypes = [];\n      for (let key in ViewType) {\n        if (ViewType.hasOwnProperty(key)) {\n          const type = ViewType[key];\n          availableTypes.push(type);\n        }\n      }\n      if (!paramsObject.exclude.every((type) => availableTypes.includes(type))) {\n        throw new Error(`Provided type to exclude is not in available types`);\n      }\n    }\n    return paramsObject;\n  }\n\n  /**\n   * Subscribe on log event fired\n   * @abstract\n   **/\n  onlog() {}\n\n  /**\n   * Subscribe on dir event fired\n   * @abstract\n   **/\n  ondir() {}\n\n  /**\n   * Subscribe on error event fired\n   * @abstract\n   **/\n  onerror() {}\n\n  /**\n   * Equivalent to console.log\n   * Push rest of arguments into container\n   */\n  log(...rest) {\n    this._container.appendChild(this._getRowEl(rest, Mode.LOG));\n    this.onlog();\n  }\n\n  /**\n   * Equivalent to console.error\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  error(val) {\n    const el = getElement(`<div class=\"console__row console__row--error\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.ERROR).el);\n    this._container.appendChild(el);\n    this.onerror();\n  }\n\n  /**\n   * Equivalent to console.dir\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  dir(val) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.DIR).el);\n    this._container.appendChild(el);\n    this.ondir();\n  }\n\n  /**\n   * Clean container\n   */\n  clean() {\n    this._container.innerHTML = ``;\n  }\n\n  createTypedView(val, mode, depth, parentView, propKey) {\n    const params = {val, mode, depth, parentView, type: typeof val, propKey};\n    let view;\n    switch (params.type) {\n      case `function`:\n        view = new FunctionView(params, this);\n        break;\n      case `object`:\n        if (val !== null) {\n          if (Array.isArray(val)) {\n            view = new ArrayView(params, this);\n          } else {\n            view = new ObjectView(params, this);\n          }\n        } else {\n          view = new PrimitiveView(params, this);\n        }\n        break;\n      default:\n        view = new PrimitiveView(params, this);\n        break;\n    }\n    // this._views.set(view.el, view);\n    return view;\n  }\n\n  _getRowEl(entries, mode) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    entries.forEach((val) => {\n      el.appendChild(this.createTypedView(val, mode).el);\n    });\n    return el;\n  }\n\n  /**\n   * get innerHTML of container\n   */\n  get sourceLog() {\n    return this._container.innerHTML;\n  }\n\n  /**\n   * Extend console\n   * @param {{}} consoleObject\n   * @return {{}} extended console\n   */\n  extend(consoleObject) {\n    consoleObject.log = this.log.bind(this);\n    consoleObject.info = this.log.bind(this);\n\n    consoleObject.error = this.error.bind(this);\n    consoleObject.warn = this.error.bind(this);\n\n    consoleObject.dir = this.dir.bind(this);\n    return consoleObject;\n  }\n}\n","import Console from './main';\n\nconst CSS_URL = `//htmlacademy.github.io/console.js/css/style.min.css`;\n\nconst errors = [];\nconst collectErr = function (evt) {\n  errors.push(evt.error);\n};\nwindow.addEventListener(`error`, collectErr);\nwindow.console.warn = collectErr;\nwindow.console.error = collectErr;\n\nconst messages = [];\nconst collectLogs = function (...rest) {\n  messages.push(...rest);\n};\n\nconst dirs = [];\nconst collectDirs = (val) => {\n  dirs.push(val);\n};\n\nwindow.console.info = collectLogs;\nwindow.console.log = collectLogs;\nwindow.console.dir = collectDirs;\n// window.console.debug = collectMsg;\n\nconst init = function () {\n  const div = window.document.createElement(`div`);\n  div.classList.add(`console`);\n  const jsConsole = new Console(div);\n  window.document.body.appendChild(div);\n\n  jsConsole.extend(window.console);\n\n  errors.forEach(function (err) {\n    jsConsole.error(err);\n  });\n  messages.forEach(function (val) {\n    jsConsole.log(val);\n  });\n  dirs.forEach((val) => {\n    jsConsole.dir(val);\n  });\n  window.addEventListener(`error`, (evt) => {\n    jsConsole.error(evt.error);\n  });\n};\n\nconst loadStyles = function () {\n  const style = window.document.createElement(`link`);\n  style.rel = `stylesheet`;\n  style.href = CSS_URL;\n  window.document.head.appendChild(style);\n};\n\nwindow.addEventListener(`DOMContentLoaded`, function () {\n  init();\n  loadStyles();\n});\n"]}