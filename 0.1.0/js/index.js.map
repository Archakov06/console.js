{"version":3,"sources":["utils.js","abstract-view.js","enums.js","type-view.js","object/object-view.js","array/array-view.js","function/function-view.js","primitive/primitive-view.js","main.js","index.js"],"names":["getElement","htmlMarkup","div","document","createElement","innerHTML","firstElementChild","AbstractView","this","template","_el","render","bind","Mode","ViewType","Env","TypeView","params","cons","parentView","_parentView","_rootView","_console","_value","val","_mode","mode","_type","type","_propKey","propKey","_currentDepth","depth","viewType","Error","_headEl","el","querySelector","_headContentEl","_infoEl","_contentEl","afterRender","self","bool","toggleInfoShowed","toggleHeadContentShowed","_isOpeningDisabled","togglePointer","_addOrRemoveHeadClickHandler","state","isContentShowed","_isAutoExpandNeeded","toggleArrowBottom","_isContentShowed","toggleContentShowed","childElementCount","appendChild","createContent","value","fragment","toggleHeadContentOversized","isEnable","toggleMiddleware","inHead","obj","ownPropertyNamesAndSymbols","Object","getOwnPropertyNames","concat","getOwnPropertySymbols","keys","Set","isShowNotOwn","key","hasOwnProperty","add","descriptors","getOwnPropertyDescriptors","descriptor","get","delete","env","evt","preventDefault","_additionHeadClickHandler","_bindedHeadClickHandler","_headClickHandler","addEventListener","removeEventListener","_ref","withoutKey","keyElClass","getViewEl","entryEl","toString","valueContEl","textContent","classList","insertEl","remove","viewEl","err","stack","_ref2","notCheckDescriptors","_this2","createTypedView","nextNestingLevel","_createEntryEl","_state","defineProperties","_getStateCommonProxyObject","_getStateProxyObject","seal","_headEntriesKeys","_getEntriesKeys","_entriesKeys","_isAutoExpandNeededProxied","typeParams","expandDepth","exclude","includes","excludeProperties","entriesKeysLength","size","maxFieldsToExpand","minFieldsToExpand","className","toggle","ObjectView","OBJECT","_this","stringTag","prototype","call","_stringTagName","substring","length","_constructorName","constructor","name","_getHeadContent","elOrStr","_getHeadContent2","stateParams","headContentClassName","_headContent","HTMLElement","DocumentFragment","toggleHeadContentBraced","toggleItalic","toggleError","_getHeadDirContent","_getHeadLogContent","_getHeadPreviewContent","isShowInfo","isBraced","isOpeningDisabled","isOversized","isStringified","getPrototypeOf","Number","parseInt","String","Date","RegExp","source","flags","isHeadContentShowed","str","tagName","toLowerCase","id","Array","join","createDocumentFragment","entriesKeys","headContentEntriesKeys","contentEntriesKeys","addedKeysCounter","maxFieldsInHead","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","_createTypedEntryEl","has","ArrayView","ARRAY","_lengthEl","_getStateParams","_self$createContent","toggleContentLengthShowed","isShowLength","arr","i","l","FnType","BUILTIN_FIELDS","FunctionView","FUNCTION","_fnType","checkFnType","_getHeadPropMarkup","_getHeadDirMarkup","_getHeadLogMarkup","bodyLines","_parseBody","_parseParams","joinedLines","map","trim","markup","paramsStart","indexOf","paramsEnd","paramsContent","split","it","bodyContent","arrowIndex","firstBraceIndex","lines","firstLine","shift","firstWhitespaceIndexes","filter","line","ex","exec","min","Math","apply","toConsumableArray","slice","unshift","fn","_step2","_iteratorNormalCompletion2","_iterator2","body","_getBody","nowrapOnLog","_getInfo","firstParenthesisIndex","classIndex","PrimitiveView","PRIMITIVE","unsafe","replace","html","escapeHtml","isNaN","Infinity","substr","Console","container","arguments","undefined","TypeError","_views","Map","_container","commonParams","common","assign","object","array","function","paramsObject","POSITIVE_INFINITY","isArray","availableTypes","push","every","rest","_len","_key","_getRowEl","onlog","onerror","ondir","_typeof","view","entries","forEach","consoleObject","log","info","error","warn","dir","window"],"mappings":"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","file":"index.js","sourcesContent":["export const getElement = (htmlMarkup) => {\n  const div = document.createElement(`div`);\n  div.innerHTML = htmlMarkup;\n  return div.firstElementChild;\n};\n","import {getElement} from './utils';\n\nexport default class AbstractView {\n  constructor() {}\n\n  /**\n   * @abstract\n   * @return {string}\n   */\n  get template() {}\n\n  get el() {\n    if (!this._el) {\n      this._el = this.render();\n      this.bind(this._el);\n    }\n    return this._el;\n  }\n\n  render() {\n    return getElement(this.template);\n  }\n\n  bind() {}\n}\n","/**\n * Console modes\n * @enum {string}\n */\nexport const Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  PROP: `prop`,\n  ERROR: `error`\n};\n\n/**\n * Viewtypes\n * @enum {string}\n */\nexport const ViewType = {\n  FUNCTION: `function`,\n  OBJECT: `object`,\n  ARRAY: `array`,\n  PRIMITIVE: `primitive`\n};\n\n/**\n * CSS classes\n * @enum {string}\n */\nexport const Class = {\n  CONSOLE_ITEM_HEAD: `item__head`,\n  CONSOLE_ITEM_POINTER: `item_pointer`,\n  CONSOLE_ITEM_HEAD_SHOW: `item__head_show`,\n  ENTRY_CONTAINER_BRACED: `entry-container_braced`,\n  ENTRY_CONTAINER_OVERSIZE: `entry-container_oversize`,\n  CONSOLE_ITEM_HEAD_PARENTHESED: `item__head_parenthesed`,\n  CONSOLE_ITEM_HEAD_INFO: `item__head-info`,\n  CONSOLE_ITEM_HEAD_ELEMENTS: `item__head-elements`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_SHOW: `item__head-elements_show`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER: `item-content-container`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW: `item-content-container_show`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH: `item__head-elements-length`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW: `item__head-elements-length_show`\n};\n\n/**\n * Console environment\n * @enum {string}\n */\nexport const Env = {\n  TEST: `test`\n};\n","/* eslint guard-for-in: \"off\"*/\n/* eslint no-empty: \"off\"*/\nimport AbstractView from './abstract-view';\nimport {getElement} from './utils';\nimport {Mode, Env} from './enums';\n\nexport default class TypeView extends AbstractView {\n  constructor(params, cons) {\n    super();\n    if (params.parentView) {\n      this._parentView = params.parentView;\n      this._rootView = params.parentView._rootView;\n    }\n    this._console = cons;\n    this._value = params.val;\n    this._mode = params.mode;\n    this._type = params.type;\n    this._propKey = params.propKey;\n    this._currentDepth = typeof params.depth === `number` ? params.depth : 1;\n  }\n\n  afterRender() {}\n\n  bind() {\n    if (!this.viewType) {\n      throw new Error(`this.viewType must be specified`);\n    }\n    if (!this._rootView) {\n      throw new Error(`this._rootView must be specified`);\n    }\n    this._headEl = this.el.querySelector(`.head`);\n    this._headContentEl = this.el.querySelector(`.head__content`);\n    this._infoEl = this.el.querySelector(`.info`);\n    this._contentEl = this.el.querySelector(`.item__content`);\n\n    this.afterRender();\n  }\n\n  /**\n   * Current state\n   * @type {{}}\n   * @param {{}} params — object with values which will be assigned throught setters\n   */\n  set state(params) {\n    if (!this._state) {\n      this._state = {};\n      Object.defineProperties(\n          this._state,\n          Object.getOwnPropertyDescriptors(this._getStateCommonProxyObject())\n      );\n      Object.defineProperties(\n          this._state,\n          Object.getOwnPropertyDescriptors(this._getStateProxyObject())\n      );\n      Object.seal(this._state);\n    }\n    for (let key in params) {\n      this._state[key] = params[key];\n    }\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  /**\n   * @abstract\n   * @return {{}} if not overriden return object without descriptors\n   */\n  _getStateProxyObject() {\n    return {};\n  }\n\n  /**\n   * @return {{}} — object that contains descriptors only\n   */\n  _getStateCommonProxyObject() {\n    const self = this;\n    return {\n      set isShowInfo(bool) {\n        self.toggleInfoShowed(bool);\n      },\n      set isHeadContentShowed(bool) {\n        self.toggleHeadContentShowed(bool);\n      },\n      set isOpeningDisabled(bool) {\n        if (self._mode === Mode.PREVIEW || self._isOpeningDisabled === bool) {\n          return;\n        }\n        self.togglePointer(!bool);\n        self._addOrRemoveHeadClickHandler(!bool);\n        self.state.isContentShowed = !bool && self._isAutoExpandNeeded;\n        self._isOpeningDisabled = bool;\n      },\n      get isOpeningDisabled() {\n        return self._isOpeningDisabled;\n      },\n      set isContentShowed(bool) {\n        self.toggleArrowBottom(bool);\n        self._isContentShowed = self.toggleContentShowed(bool);\n        if (self._isContentShowed && self._contentEl.childElementCount === 0) {\n          self._contentEl.appendChild(self.createContent(self.value, false).fragment);\n        }\n      },\n      get isContentShowed() {\n        return self._isContentShowed;\n      },\n      set isOversized(bool) {\n        self.toggleHeadContentOversized(bool);\n      },\n    };\n  }\n\n  toggleHeadContentBraced(isEnable) {\n    return TypeView.toggleMiddleware(this._headContentEl, `entry-container--braced`, isEnable);\n  }\n\n  toggleHeadContentOversized(isEnable) {\n    return TypeView.toggleMiddleware(this._headContentEl, `entry-container--oversize`, isEnable);\n  }\n\n  toggleInfoShowed(isEnable) {\n    return !TypeView.toggleMiddleware(this._infoEl, `hidden`, !isEnable);\n  }\n\n  toggleHeadContentShowed(isEnable) {\n    return !TypeView.toggleMiddleware(this._headContentEl, `hidden`, !isEnable);\n  }\n\n  toggleContentShowed(isEnable) {\n    return !TypeView.toggleMiddleware(this._contentEl, `hidden`, !isEnable);\n  }\n\n  toggleError(isEnable) {\n    return TypeView.toggleMiddleware(this.el, Mode.ERROR, isEnable);\n  }\n\n  toggleItalic(isEnable) {\n    return TypeView.toggleMiddleware(this._headEl, `italic`, isEnable);\n  }\n\n  togglePointer(isEnable) {\n    return TypeView.toggleMiddleware(this._headEl, `item__head--pointer`, isEnable);\n  }\n\n  toggleArrowBottom(isEnable) {\n    return TypeView.toggleMiddleware(this._headEl, `item__head--arrow-bottom`, isEnable);\n  }\n\n  /**\n   * Value to log\n   */\n  get value() {\n    return this._value;\n  }\n\n  /**\n   * Log mode\n   * @type {Mode}\n   */\n  get mode() {\n    return this._mode;\n  }\n\n  get nextNestingLevel() {\n    return this._currentDepth + 1;\n  }\n\n  /**\n   * @param {boolean} inHead — is head entries\n   * @return {Set}\n   */\n  _getEntriesKeys(inHead) {\n    const obj = this.value;\n\n    const ownPropertyNamesAndSymbols = Object.getOwnPropertyNames(obj)\n        .concat(Object.getOwnPropertySymbols(obj)); // Неперечисляемые свои\n    const keys = new Set(ownPropertyNamesAndSymbols);\n\n    if (this.isShowNotOwn) {\n      for (let key in obj) {\n        if (inHead && !obj.hasOwnProperty(key)) {\n          continue;\n        }\n        keys.add(key);\n      }\n    }\n\n    if (inHead) {\n      const descriptors = Object.getOwnPropertyDescriptors(obj);\n      for (let descriptor in descriptors) {\n        if (typeof Object.getOwnPropertyDescriptors(descriptors[descriptor]).get !== `undefined`) {\n          keys.delete(descriptor);\n        }\n      }\n    }\n\n    if (this._console.params.env === Env.TEST) {\n      keys.delete(`should`);\n    }\n\n    return keys;\n  }\n\n  /**\n   * Head content entries keys\n   * @type {Set}\n   */\n  get headContentEntriesKeys() {\n    if (!this._headEntriesKeys) {\n      this._headEntriesKeys = this._getEntriesKeys(true);\n    }\n    return this._headEntriesKeys;\n  }\n\n  /**\n   * Content entries keys\n   * @type {Set}\n   */\n  get contentEntriesKeys() {\n    if (!this._entriesKeys) {\n      this._entriesKeys = this._getEntriesKeys(false);\n    }\n    return this._entriesKeys;\n  }\n\n  /**\n   * Check if autoexpand needed\n   * @type {boolean}\n   */\n  get _isAutoExpandNeeded() {\n    if (!this._isAutoExpandNeededProxied) {\n      this._isAutoExpandNeededProxied = false;\n\n      const typeParams = this._console.params[this._rootView.viewType];\n\n      if (this._currentDepth > typeParams.expandDepth) {\n        return this._isAutoExpandNeededProxied;\n      }\n\n      if (this._parentView) {\n        if (!typeParams.exclude.includes(this.viewType) &&\n        !typeParams.excludeProperties.includes(this._propKey) &&\n        this._parentView._isAutoExpandNeeded) {\n          this._isAutoExpandNeededProxied = true;\n        }\n      } else {\n        const entriesKeysLength = this._getEntriesKeys(false).size;\n        if (typeParams.maxFieldsToExpand >= entriesKeysLength &&\n          entriesKeysLength >= typeParams.minFieldsToExpand) {\n          this._isAutoExpandNeededProxied = true;\n        }\n      }\n    }\n    return this._isAutoExpandNeededProxied;\n  }\n\n  _additionHeadClickHandler() {}\n\n  _headClickHandler(evt) {\n    evt.preventDefault();\n    this.toggleArrowBottom();\n    this.state.isContentShowed = !this.state.isContentShowed;\n    this._additionHeadClickHandler();\n  }\n\n  _addOrRemoveHeadClickHandler(bool) {\n    if (!this._bindedHeadClickHandler) {\n      this._bindedHeadClickHandler = this._headClickHandler.bind(this);\n    }\n    if (bool) {\n      this._headEl.addEventListener(`click`, this._bindedHeadClickHandler);\n    } else {\n      this._headEl.removeEventListener(`click`, this._bindedHeadClickHandler);\n    }\n  }\n\n  /**\n   * Create entry element\n   * @protected\n   * @param {{}} params\n   * @param {string} params.key — key, index of array or field name\n   * @param {HTMLSpanElement|undefined} params.el — HTML span element to append into container\n   * @param {boolean} [params.withoutKey] — create entry without key element\n   * @param {string} [params.keyElClass] — CSS class for key element\n   * @param {function} [params.getViewEl] — function to get element if so wasn't present while calling this method\n   * @return {HTMLSpanElement}\n   */\n  _createEntryEl({key, el, withoutKey, keyElClass, getViewEl}) {\n    const entryEl = getElement(`\\\n<span class=\"entry-container__entry\">\\\n${withoutKey ? `` : `<span class=\"entry-container__key ${keyElClass ? keyElClass : ``}\">${key.toString()}</span>`}<span class=\"entry-container__value-container\"></span>\\\n</span>`);\n    const valueContEl = entryEl.querySelector(`.entry-container__value-container`);\n\n    if (el) {\n      valueContEl.appendChild(el);\n    } else {\n      valueContEl.textContent = `(...)`;\n      valueContEl.classList.add(`entry-container__value-container--underscore`);\n      const insertEl = () => {\n        valueContEl.textContent = ``;\n        valueContEl.classList.remove(`entry-container__value-container--underscore`);\n        let viewEl;\n        try {\n          viewEl = getViewEl();\n          valueContEl.appendChild(viewEl);\n        } catch (err) {\n          valueContEl.textContent = `[Exception: ${err.stack}]`;\n        }\n        valueContEl.removeEventListener(`click`, insertEl);\n      };\n      valueContEl.addEventListener(`click`, insertEl);\n    }\n\n    return entryEl;\n  }\n\n  /**\n   * Create typed entry element\n   * @protected\n   * @param {{}} params\n   * @param {{}} params.obj — object/array/fn\n   * @param {string} params.key — key, index of array or field name\n   * @param {Mode} params.mode — log mode\n   * @param {boolean} [params.withoutKey] — create entry without key element\n   * @param {string} [params.keyElClass] — CSS class for key element\n   * @return {HTMLSpanElement}\n   */\n  _createTypedEntryEl({obj, key, mode, withoutKey, keyElClass, notCheckDescriptors}) {\n    const getViewEl = () => {\n      const val = obj[key];\n      return this._console.createTypedView(val, mode, this.nextNestingLevel, this, key).el;\n    };\n    let el;\n    try {\n      if (notCheckDescriptors) {\n        el = getViewEl();\n      } else {\n        const descriptors = Object.getOwnPropertyDescriptors(obj);\n        if (!(key in descriptors) || !descriptors[key].get || key === `__proto__`) {\n          el = getViewEl();\n        }\n      }\n    } catch (err) {}\n    return this._createEntryEl({key, el, withoutKey, keyElClass, getViewEl});\n  }\n\n  /**\n   * Toggle CSS class on element\n   * If isEnable not present just toggle, otherwise add or remove\n   * @static\n   * @param {HTMLElement} el — element to toggle CSS class\n   * @param {string} className — CSS class\n   * @param {boolean|undefined} isEnable — add/remove if present, otherwise toggle\n   * @return {boolean} — added — true, removed — false\n   */\n  static toggleMiddleware(el, className, isEnable) {\n    if (typeof isEnable === `undefined`) {\n      return el.classList.toggle(className);\n    }\n    if (isEnable) {\n      el.classList.add(className);\n      return true;\n    } else {\n      el.classList.remove(className);\n      return false;\n    }\n  }\n}\n","/* eslint guard-for-in: \"off\"*/\n/* eslint no-empty: \"off\"*/\nimport TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nexport default class ObjectView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this.viewType = ViewType.OBJECT;\n    if (!params.parentView) {\n      this._rootView = this;\n    }\n    const stringTag = Object.prototype.toString.call(this.value);\n    this._stringTagName = stringTag.substring(8, stringTag.length - 1);\n    this._constructorName = this.value.constructor ? this.value.constructor.name : null;\n  }\n\n  get template() {\n    return `\\\n<div class=\"console__item item item--${this.viewType}\">\\\n  <div class=\"head item__head\">\\\n    <span class=\"info head__info hidden\"></span>\\\n    <div class=\"head__content entry-container entry-container--head entry-container--${this.viewType} hidden\"></div>\\\n  </div>\\\n  <div class=\"item__content entry-container entry-container--${this.viewType} hidden\"></div>\\\n</div>`;\n  }\n\n  afterRender() {\n    const {elOrStr, stateParams, isShowNotOwn, headContentClassName} = this._getHeadContent();\n    this._headContent = elOrStr;\n\n    if (headContentClassName) {\n      this._headContentEl.classList.add(headContentClassName);\n    }\n\n    if (this._constructorName === `Object` && this._stringTagName !== `Object`) {\n      this._infoEl.textContent = this._stringTagName;\n    } else {\n      this._infoEl.textContent = this._constructorName;\n    }\n    this.isShowNotOwn = isShowNotOwn;\n    this.state = stateParams;\n  }\n\n  _getStateProxyObject() {\n    const self = this;\n    return {\n      set isShowInfo(bool) {\n        self.toggleInfoShowed(bool);\n      },\n      set isHeadContentShowed(bool) {\n        if (!self._headContentEl.innerHTML) {\n          if (self._headContent instanceof HTMLElement || self._headContent instanceof DocumentFragment) {\n            self._headContentEl.appendChild(self._headContent);\n          } else {\n            self._headContentEl.innerHTML = self._headContent;\n          }\n        }\n        self.toggleHeadContentShowed(bool);\n      },\n      set isBraced(bool) {\n        self.toggleHeadContentBraced(bool);\n      },\n      set isStringified(bool) {\n        if (!bool && (self._mode === Mode.LOG || self._mode === Mode.ERROR) && !self._parentView) {\n          self.toggleItalic(bool);\n        }\n        if (bool && self._mode === Mode.ERROR) {\n          self.toggleError(bool);\n        }\n      },\n    };\n  }\n\n  _getHeadContent() {\n    let obj;\n    if (this._mode === Mode.DIR) {\n      obj = this._getHeadDirContent();\n    } else if (this._mode === Mode.LOG || this._mode === Mode.PROP || this._mode === Mode.ERROR) {\n      obj = this._getHeadLogContent();\n    } else if (this._mode === Mode.PREVIEW) {\n      obj = this._getHeadPreviewContent();\n    }\n    return obj;\n  }\n\n  _getHeadPreviewContent() {\n    if (this._stringTagName === `Object`) {\n      return {\n        elOrStr: `...`,\n        stateParams: {\n          isShowInfo: false,\n          isHeadContentShowed: true,\n          isBraced: true\n        }\n      };\n    }\n    return this._getHeadDirContent();\n  }\n\n  _getHeadLogContent() {\n    let val;\n    let isShowInfo = false;\n    let isBraced = true;\n    let isOpeningDisabled = false;\n    let isOversized = false;\n    let isStringified = false;\n    let headContentClassName;\n\n    if (this.value instanceof HTMLElement && Object.getPrototypeOf(this.value).constructor !== HTMLElement) {\n      return this._getHeadDirContent();\n    } else if (this.value instanceof Error) {\n      isBraced = false;\n      val = `<pre>${this.value.stack}</pre>`;\n      // isOpeningDisabled = true;\n      isStringified = true;\n    } else if (this.value instanceof Number) {\n      const view = this._console.createTypedView(Number.parseInt(this.value, 10), Mode.PREVIEW, this.nextNestingLevel, this);\n      val = view.el;\n      isShowInfo = true;\n    } else if (this.value instanceof String) {\n      const view = this._console.createTypedView(this.value.toString(), Mode.PREVIEW, this.nextNestingLevel, this);\n      val = view.el;\n      isShowInfo = true;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n      isStringified = true;\n      isBraced = false;\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n      headContentClassName = `regexp`;\n      isOpeningDisabled = true;\n      isBraced = false;\n    } else {\n      const obj = this.createContent(this.value, true);\n      val = obj.fragment;\n      isOversized = obj.isOversized;\n      // isOpeningDisabled = this.contentEntriesKeys.size === 0;\n      if (this._stringTagName !== `Object` || (\n        this._constructorName !== `Object`\n      ) || this._propKey === `__proto__`) {\n        isShowInfo = true;\n      }\n    }\n    return {\n      elOrStr: val,\n      headContentClassName,\n      stateParams: {\n        isShowInfo,\n        isHeadContentShowed: this._propKey !== `__proto__`,\n        isBraced,\n        isOpeningDisabled,\n        isOversized,\n        isStringified\n      }\n    };\n  }\n\n  _getHeadDirContent() {\n    let val;\n    let isShowInfo = false;\n    let isHeadContentShowed = true;\n    let isBraced = false;\n    let isShowNotOwn = false;\n    if (this.value instanceof HTMLElement) {\n      let str = this.value.tagName.toLowerCase();\n      str += this.value.id;\n      if (this.value.classList.length) {\n        str += `.` + Array.prototype.join.call(this.value.classList, `.`);\n      }\n      val = str;\n      isShowNotOwn = true;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n    } else if (this.value instanceof Error) {\n      val = this.value.toString();\n    } else {\n      val = this.value;\n      isShowInfo = true;\n      isHeadContentShowed = false;\n    }\n    return {\n      elOrStr: val,\n      stateParams: {\n        isShowInfo,\n        isHeadContentShowed,\n        isBraced,\n        isOpeningDisabled: false,\n      },\n      isShowNotOwn\n    };\n  }\n\n  createContent(obj, inHead) {\n    const fragment = document.createDocumentFragment();\n    const entriesKeys = inHead ? this.headContentEntriesKeys : this.contentEntriesKeys;\n    let isOversized = false;\n    let addedKeysCounter = 0;\n\n    const maxFieldsInHead = this._console.params[this.viewType].maxFieldsInHead;\n    const mode = inHead ? Mode.PREVIEW : Mode.PROP;\n    for (let key of entriesKeys) {\n      if (inHead && addedKeysCounter === maxFieldsInHead) {\n        isOversized = true;\n        break;\n      }\n      fragment.appendChild(this._createTypedEntryEl({obj, key, mode}));\n      addedKeysCounter++;\n    }\n    if (!inHead && !entriesKeys.has(`__proto__`) && typeof this.value[`__proto__`] !== `undefined`) {\n      fragment.appendChild(this._createTypedEntryEl({obj, key: `__proto__`, mode, keyElClass: `grey`, notCheckDescriptors: true}));\n    }\n    return {fragment, isOversized};\n  }\n}\n","import TypeView from '../type-view';\nimport {getElement} from '../utils';\nimport {Mode, ViewType} from '../enums';\n\nconst EMPTY = `empty`;\n\nexport default class ArrayView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this.viewType = ViewType.ARRAY;\n    if (!params.parentView) {\n      this._rootView = this;\n    }\n  }\n\n  get template() {\n    return `\\\n<div class=\"console__item item item--${this.viewType}\">\\\n  <div class=\"head item__head\">\\\n    <span class=\"info head__info hidden\"></span>\\\n    <span class=\"length head__length hidden\">${this.value.length}</span>\\\n    <div class=\"head__content entry-container entry-container--head entry-container--${this.viewType} hidden\"></div>\\\n  </div>\\\n  <div class=\"item__content entry-container entry-container--${this.viewType} hidden\"></div>\\\n</div>`;\n  }\n\n  afterRender() {\n    this._lengthEl = this.el.querySelector(`.length`);\n    this.toggleHeadContentBraced();\n    this._infoEl.textContent = this.value.constructor.name;\n    this.state = this._getStateParams();\n\n    if ((this._mode === Mode.LOG || this._mode === Mode.ERROR) && !this._parentView) {\n      this.toggleItalic(true);\n    }\n  }\n\n  _getStateProxyObject() {\n    const self = this;\n    return {\n      set isHeadContentShowed(bool) {\n        if (bool && self._headContentEl.childElementCount === 0) {\n          const {fragment, isOversized} = self.createContent(self.value, true);\n          self.state.isOversized = isOversized;\n          self._headContentEl.appendChild(fragment);\n        }\n        self.toggleHeadContentShowed(bool);\n      },\n      set isShowLength(bool) {\n        self.toggleContentLengthShowed(bool);\n      }\n    };\n  }\n\n  toggleContentLengthShowed(isEnable) {\n    return !TypeView.toggleMiddleware(this._lengthEl, `hidden`, !isEnable);\n  }\n\n  _additionHeadClickHandler() {\n    if (this._mode === Mode.PROP && this._propKey !== `__proto__`) {\n      this.state.isShowInfo = this._isContentShowed;\n      this.state.isHeadContentShowed = !this._isContentShowed;\n      this.state.isShowLength = this._isContentShowed || this.value.length > 1;\n    }\n  }\n\n  _getStateParams() {\n    let isShowInfo = false;\n    let isHeadContentShowed = true;\n    let isShowLength = this.value.length > 1;\n    if (this._mode === Mode.DIR) {\n      isShowInfo = true;\n      isHeadContentShowed = false;\n      isShowLength = true;\n    } else if (this._mode === Mode.PREVIEW) {\n      isShowInfo = true;\n      isHeadContentShowed = false;\n      isShowLength = true;\n    } else if (this._mode === Mode.PROP) {\n      isShowInfo = false;\n      isHeadContentShowed = true;\n\n      if (this._propKey === `__proto__`) {\n        isShowInfo = true;\n        isHeadContentShowed = false;\n        isShowLength = true;\n      }\n    }\n    return {\n      isShowInfo,\n      isHeadContentShowed,\n      isShowLength,\n      isOpeningDisabled: false\n    };\n  }\n\n  createContent(arr, inHead) {\n    const entriesKeys = inHead ? this.headContentEntriesKeys : this.contentEntriesKeys;\n    const fragment = document.createDocumentFragment();\n    entriesKeys.delete(`length`);\n    let isOversized = false;\n    let addedKeysCounter = 0;\n\n    const maxFieldsInHead = this._console.params[this.viewType].maxFieldsInHead;\n    const mode = inHead ? Mode.PREVIEW : Mode.PROP;\n\n    for (let i = 0, l = arr.length; i < l; i++) {\n      if (inHead && addedKeysCounter === maxFieldsInHead) {\n        isOversized = true;\n        break;\n      }\n      const key = i.toString();\n      if (entriesKeys.has(key)) {\n        fragment.appendChild(this._createTypedEntryEl({obj: arr, key: i, mode, withoutKey: inHead, notCheckDescriptors: true}));\n        entriesKeys.delete(key);\n        addedKeysCounter++;\n      } else if (inHead) {\n        const entryEl = this._createEntryEl({key: i, el: getElement(`<span>${EMPTY}</span>`), withoutKey: true, keyElClass: `grey`});\n        fragment.appendChild(entryEl);\n        addedKeysCounter++;\n      }\n    }\n    for (let key of entriesKeys) {\n      if (inHead && addedKeysCounter === maxFieldsInHead) {\n        isOversized = true;\n        break;\n      }\n      fragment.appendChild(this._createTypedEntryEl({obj: arr, key, mode, withoutKey: inHead}));\n      addedKeysCounter++;\n    }\n    if (!inHead) {\n      fragment.appendChild(this._createTypedEntryEl({obj: arr, key: `length`, mode, keyElClass: `grey`, notCheckDescriptors: true}));\n      fragment.appendChild(this._createTypedEntryEl({obj: arr, key: `__proto__`, mode, keyElClass: `grey`, notCheckDescriptors: true}));\n    }\n    return {fragment, isOversized};\n  }\n}\n","/* eslint no-empty: \"off\"*/\nimport TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nconst MAX_PREVIEW_FN_BODY_LENGTH = 43;\n\nconst FnType = {\n  PLAIN: `plain`,\n  ARROW: `arrow`,\n  CLASS: `class`\n};\n\nconst BUILTIN_FIELDS = [`arguments`, `caller`, `length`, `name`, `prototype`, `__proto__`];\n\n// if .caller not accessed — не выводим\n// if prototype undefined — не выводим\n// name — если неименованная — получает имя переменной, в которую записана\n// если именнованная — то имя ф-ии\n\nexport default class FunctionView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this.viewType = ViewType.FUNCTION;\n    if (!params.parentView) {\n      this._rootView = this;\n    }\n    this._fnType = FunctionView.checkFnType(this.value);\n  }\n\n  get template() {\n    const isShowInfo = this._fnType !== FnType.ARROW || this._mode === Mode.PREVIEW;\n    const body = this._getBody();\n    const nowrapOnLog = this._console.params[this.viewType].nowrapOnLog;\n\n    return `\\\n<div class=\"console__item item item--${this.viewType} ${this._mode === Mode.ERROR ? `error` : ``}\">\\\n  <div class=\"head item__head italic\">\\\n    <pre class=\"head__content ${nowrapOnLog ? `nowrap` : `` }\"><span class=\"info info--function ${isShowInfo ? `` : `hidden`}\">${this._getInfo()}</span>${isShowInfo && body ? ` ` : ``}${this._getBody()}</pre>\\\n  </div>\\\n  <div class=\"item__content entry-container entry-container--${this.viewType} hidden\"></div>\\\n</div>`;\n  }\n\n  afterRender() {\n    const params = {\n      isOpeningDisabled: this._mode !== Mode.DIR && this._mode !== Mode.PROP\n    };\n\n    this.state = params;\n\n    if (this._mode === Mode.LOG) {\n      this._headContentEl.addEventListener(`click`, () => {\n        this._headContentEl.classList.toggle(`nowrap`);\n      });\n    }\n  }\n\n  _getInfo() {\n    let str = ``;\n    switch (this._fnType) {\n      case FnType.CLASS:\n        str = `class`;\n        break;\n      case FnType.PLAIN:\n      case FnType.ARROW:\n        str = `f`;\n        break;\n    }\n    return str;\n  }\n\n  _getBody() {\n    let str = ``;\n    switch (this._mode) {\n      case Mode.PROP:\n        str = this._getHeadPropMarkup();\n        break;\n      case Mode.DIR:\n        str = this._getHeadDirMarkup();\n        break;\n      case Mode.LOG:\n      case Mode.ERROR:\n        str = this._getHeadLogMarkup();\n        break;\n    }\n    return str;\n  }\n\n  _getHeadPropMarkup() {\n    const bodyLines = this._parseBody();\n    const params = this._parseParams();\n    const joinedLines = bodyLines.map((str) => str.trim()).join(` `);\n\n    let markup = `\\\n${this.value.name ? this.value.name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}`;\n    if (this._fnType === FnType.ARROW) {\n      markup += `${joinedLines.length <= MAX_PREVIEW_FN_BODY_LENGTH ? joinedLines : `{...}`}`;\n    }\n    return markup;\n  }\n\n  _getHeadDirMarkup() {\n    const params = this._parseParams();\n\n    let markup = `\\\n${this.value.name ? this.value.name : ``}\\\n${this._fnType === FnType.PLAIN ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? `()` : ``}`;\n    return markup;\n  }\n\n  _getHeadLogMarkup() {\n    const bodyLines = this._parseBody();\n    const params = this._parseParams();\n\n    return `\\\n${this.value.name && this._fnType !== FnType.ARROW ? `${this.value.name} ` : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}${bodyLines.join(`\\n`)}`;\n  }\n\n  _parseParams() {\n    const str = this.value.toString();\n    const paramsStart = str.indexOf(`(`);\n    const paramsEnd = str.indexOf(`)`);\n\n    const paramsContent = str.substring(paramsStart + 1, paramsEnd).trim();\n\n    return paramsContent ? paramsContent.split(`,`).map((it) => it.trim()) : [];\n  }\n\n  _parseBody() {\n    let str = this.value.toString().trim();\n\n    let bodyContent = [];\n    if (this._fnType === FnType.ARROW) {\n      const arrowIndex = str.indexOf(`=>`);\n      str = str.substring(arrowIndex + 2);\n    }\n    const firstBraceIndex = str.indexOf(`{`);\n    str = str.substring(firstBraceIndex);\n    const lines = str.split(`\\n`);\n    const firstLine = lines.shift();\n    const firstWhitespaceIndexes = lines\n        .filter((line) => line.length !== 0)\n        .map((line) => {\n          const ex = /^\\s+/.exec(line);\n          if (ex && ex[0].hasOwnProperty(`length`)) {\n            return ex[0].length;\n          }\n          return 0;\n        });\n\n    const min = Math.min(...firstWhitespaceIndexes);\n    bodyContent = lines.map((line) => line.slice(min));\n    bodyContent.unshift(firstLine);\n    return bodyContent;\n  }\n\n\n  createContent(fn) {\n    const fragment = document.createDocumentFragment();\n    const entriesKeys = this.contentEntriesKeys;\n    for (let key of BUILTIN_FIELDS) {\n      entriesKeys.add(key);\n    }\n    for (let key of entriesKeys) {\n      fragment.appendChild(this._createTypedEntryEl({obj: fn, key, mode: Mode.PROP, keyElClass: BUILTIN_FIELDS.includes(key) ? `grey` : null}));\n    }\n    return {fragment};\n  }\n\n  static checkFnType(fn) {\n    const str = fn.toString();\n    const firstParenthesisIndex = str.indexOf(`(`);\n\n    const classIndex = str.indexOf(`class`);\n    const arrowIndex = str.indexOf(`=>`);\n    if (classIndex !== -1 && (firstParenthesisIndex === -1 || classIndex < firstParenthesisIndex)) {\n      return FnType.CLASS;\n    } else if (arrowIndex !== -1 && arrowIndex > firstParenthesisIndex) {\n      return FnType.ARROW;\n    }\n    return FnType.PLAIN;\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nexport default class PrimitiveView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this.viewType = ViewType.PRIMITIVE;\n  }\n\n  get template() {\n    const type = this._type;\n    let value = this.value;\n    let html = ``;\n    if (type === `string` || type === `symbol`) {\n      if (type === `symbol`) {\n        value = value.toString();\n      }\n      value = this.escapeHtml(value);\n    }\n    switch (type) {\n      case `undefined`:\n      case `null`:\n      case `boolean`:\n        html = `<div class=\"console__item item item--primitive ${type}\">${value}</div>`;\n        break;\n\n      case `number`:\n        if (Number.isNaN(value)) {\n          html = `<div class=\"console__item item item--primitive NaN\">NaN</div>`;\n        } else if ((value === Infinity || value === -Infinity)) {\n          html = `<div class=\"console__item item item--primitive number\">${(value === -Infinity ? `-` : ``)}Infinity</div>`;\n        } else {\n          html = `<div class=\"console__item item item--primitive ${type}\">${value}</div>`;\n        }\n        break;\n\n      case `string`:\n        let str;\n        if (this._mode === Mode.PREVIEW && value.length > 100) {\n          str = `${value.substr(0, 50)}...${value.substr(-50)}`;\n        } else {\n          str = value;\n        }\n        html = `<pre class=\"console__item item item--primitive string ${this._mode === Mode.PROP || this._mode === Mode.PREVIEW ? `nowrap` : ``} ${this._mode === Mode.PROP ? `pointer` : ``} ${this._mode === Mode.ERROR ? `${this._mode}` : ``}\">${str}</pre>`;\n        break;\n      case `symbol`:\n        html = `<div class=\"console__item item item--primitive symbol\">${value}</div>`;\n        break;\n\n      case `object`:\n        if (value === null) {\n          html = `<div class=\"console__item item item--primitive null\">${value}</div>`;\n          break;\n        }\n    }\n    return html;\n  }\n\n  bind() {\n    if (this._mode === Mode.PROP && this._type === `string`) {\n      this.el.addEventListener(`click`, (evt) => {\n        evt.preventDefault();\n        this.el.classList.toggle(`nowrap`);\n      });\n    }\n  }\n\n  escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, `&amp;`)\n        .replace(/</g, `&lt;`)\n        .replace(/>/g, `&gt;`)\n        .replace(/\"/g, `&quot;`)\n        .replace(/'/g, `&#039;`);\n  }\n}\n","import ObjectView from './object/object-view';\nimport ArrayView from './array/array-view';\nimport FunctionView from './function/function-view';\nimport PrimitiveView from './primitive/primitive-view';\nimport {getElement} from './utils';\nimport {Mode, ViewType} from './enums';\n\n/**\n * Console\n * @class\n */\nexport default class Console {\n  /**\n   * Initialize console into container\n   * @param {HTMLElement} container — console container\n   * @param {{}} params — parameters\n   * @param {number} params.minFieldsToExpand — min number of fields in obj to expand\n   * @param {number} params.maxFieldsInHead — max number of preview fields inside head\n   * @param {number} params.expandDepth — level of depth to expand\n   * @param {Env} params.env — environment\n   **/\n  constructor(container, params = {}) {\n    if (!container) {\n      throw new Error(`Console is not inited!`);\n    } else if (!(container instanceof HTMLElement)) {\n      throw new TypeError(`HTML element must be passed as container`);\n    }\n    this._views = new Map();\n    this._container = container;\n    const commonParams = this._parseParams(params.common);\n    this.params = {\n      object: this._parseParams(Object.assign({}, commonParams, params.object)),\n      array: this._parseParams(Object.assign({}, commonParams, params.array)),\n      function: this._parseParams(Object.assign({}, commonParams, params.function)),\n      env: params.env\n    };\n  }\n\n  _parseParams(paramsObject = {}) {\n    // Set this._expandDepth and this._minFieldsToExpand only if expandDepth provided and > 0\n    if (typeof paramsObject.expandDepth === `number` &&\n    paramsObject.expandDepth > 0) {\n\n      paramsObject.minFieldsToExpand = (\n        typeof paramsObject.minFieldsToExpand === `number` &&\n        paramsObject.minFieldsToExpand > 0\n      ) ? paramsObject.minFieldsToExpand : 0;\n\n      paramsObject.maxFieldsToExpand = (\n        typeof paramsObject.maxFieldsToExpand === `number` &&\n        paramsObject.maxFieldsToExpand > 0\n      ) ? paramsObject.maxFieldsToExpand : Number.POSITIVE_INFINITY;\n    }\n\n    paramsObject.maxFieldsInHead = (\n      typeof paramsObject.maxFieldsInHead === `number` &&\n      paramsObject.maxFieldsInHead > 0\n    ) ? paramsObject.maxFieldsInHead : Number.POSITIVE_INFINITY;\n\n    if (!Array.isArray(paramsObject.excludeProperties)) {\n      paramsObject.excludeProperties = [];\n    }\n    if (!Array.isArray(paramsObject.exclude)) {\n      paramsObject.exclude = [];\n    } else {\n      const availableTypes = [];\n      for (let key in ViewType) {\n        if (ViewType.hasOwnProperty(key)) {\n          const type = ViewType[key];\n          availableTypes.push(type);\n        }\n      }\n      if (!paramsObject.exclude.every((type) => availableTypes.includes(type))) {\n        throw new Error(`Provided type to exclude is not in available types`);\n      }\n    }\n    return paramsObject;\n  }\n\n  /**\n   * Subscribe on log event fired\n   * @abstract\n   **/\n  onlog() {}\n\n  /**\n   * Subscribe on dir event fired\n   * @abstract\n   **/\n  ondir() {}\n\n  /**\n   * Subscribe on error event fired\n   * @abstract\n   **/\n  onerror() {}\n\n  /**\n   * Equivalent to console.log\n   * Push rest of arguments into container\n   */\n  log(...rest) {\n    this._container.appendChild(this._getRowEl(rest, Mode.LOG));\n    this.onlog();\n  }\n\n  /**\n   * Equivalent to console.error\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  error(val) {\n    const el = getElement(`<div class=\"console__row console__row--error\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.ERROR).el);\n    this._container.appendChild(el);\n    this.onerror();\n  }\n\n  /**\n   * Equivalent to console.dir\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  dir(val) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.DIR).el);\n    this._container.appendChild(el);\n    this.ondir();\n  }\n\n  /**\n   * Clean container\n   */\n  clean() {\n    this._container.innerHTML = ``;\n  }\n\n  createTypedView(val, mode, depth, parentView, propKey) {\n    const params = {val, mode, depth, parentView, type: typeof val, propKey};\n    let view;\n    switch (params.type) {\n      case `function`:\n        view = new FunctionView(params, this);\n        break;\n      case `object`:\n        if (val !== null) {\n          if (Array.isArray(val)) {\n            view = new ArrayView(params, this);\n          } else {\n            view = new ObjectView(params, this);\n          }\n        } else {\n          view = new PrimitiveView(params, this);\n        }\n        break;\n      default:\n        view = new PrimitiveView(params, this);\n        break;\n    }\n    // this._views.set(view.el, view);\n    return view;\n  }\n\n  _getRowEl(entries, mode) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    entries.forEach((val) => {\n      el.appendChild(this.createTypedView(val, mode).el);\n    });\n    return el;\n  }\n\n  /**\n   * get innerHTML of container\n   */\n  get sourceLog() {\n    return this._container.innerHTML;\n  }\n\n  /**\n   * Extend console\n   * @param {{}} consoleObject\n   * @return {{}} extended console\n   */\n  extend(consoleObject) {\n    consoleObject.log = this.log.bind(this);\n    consoleObject.info = this.log.bind(this);\n\n    consoleObject.error = this.error.bind(this);\n    consoleObject.warn = this.error.bind(this);\n\n    consoleObject.dir = this.dir.bind(this);\n    return consoleObject;\n  }\n}\n","import Console from './main';\n\nwindow.Console = Console;\n"]}