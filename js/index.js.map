{"version":3,"sources":["js/abstract-view.js","js/enums.js","js/type-view.js","js/object/object-view.js","js/array/array-view.js","js/function/function-view.js","js/primitive/primitive-view.js","js/utils.js","js/main.js","js/index.js"],"names":["AbstractView","getElement","this","template","_el","render","bind","Mode","Class","TypeView","value","type","isPrimitive","_value","_type","_isPrimitive","_isOpened","toString","_proxiedContentEl","appendChild","createContent","fragment","_contentContainerEl","classList","toggle","style","display","headEl","_setCursorPointer","addEventListener","evt","preventDefault","_toggleContent","_additionHeadClickHandler","el","add","index","valueEl","withoutKey","entryEl","querySelector","ObjectView","mode","_mode","_entries","Map","headElementsEl","headInfoEl","_getHeadContent","elOrStr","_getHeadContent2","isShowConstructor","isShowElements","isBraced","isOpeningDisabled","isOversize","isStringified","HTMLElement","DocumentFragment","innerHTML","_setHeadClickHandler","_getHeadDirContent","_getHeadLogContent","_getHeadPreviewContent","Object","prototype","call","val","Error","Number","createTypedView","parseInt","String","Date","RegExp","source","flags","obj","constructor","str","tagName","toLowerCase","id","length","Array","join","isPreview","document","createDocumentFragment","keys","Set","key","size","view","createEntryEl","_step","getOwnPropertyNames","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","has","name","ArrayView","arr","_elements","headElementsLengthEl","isShowLength","_toggleConstructor","_toggleHeadElements","_toggleLength","_getHeadErrorContent","ownPropertyNames","indexInKeys","indexOf","isKeyNaN","isNaN","FnType","FunctionView","fn","_fnType","checkFnType","parseFunction","_parseFunction","params","joinedLines","lines","markup","_parseFunction2","funString","paramsStart","paramsEnd","paramsContent","substring","trim","split","map","it","endingChar","ex","exec","bodyStart","bodyEnd","lastIndexOf","bodyContent","fnOrString","parseParams","parseBody","err","tpl","_getHeadPropMarkup","_getHeadDirMarkup","_getLogMarkup","firstParenthesisIndex","classIndex","arrowIndex","STRING_COLLAPSED","PrimitiveView","unsafe","replace","html","escapeHtml","Infinity","htmlMarkup","div","createElement","firstElementChild","_typeof","isArray","window","jsConsole","cont","logger","log","rest","_len","_key","arguments","entries","forEach","code","onlog","error","errOrSmth","clean","getLogSource","dir","extend","consoleObject","info","warn","jsConsoleInit"],"mappings":"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","file":"index.js","sourcesContent":["import {getElement} from './utils';\n\nexport default class AbstractView {\n  constructor() {}\n\n  /**\n   * @abstract\n   * @return {string}\n   */\n  get template() {}\n\n  get el() {\n    if (!this._el) {\n      this._el = this.render();\n      this.bind(this._el);\n    }\n    return this._el;\n  }\n\n  render() {\n    return getElement(this.template);\n  }\n\n  bind() {}\n}\n","export const Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  PROP: `prop`,\n  ERROR: `error`\n};\n\nexport const Class = {\n  CONSOLE_ITEM_HEAD: `item-head`,\n  CONSOLE_ITEM_POINTER: `item_pointer`,\n  CONSOLE_ITEM_HEAD_SHOW: `item-head_show`,\n  ENTRY_CONTAINER_BRACED: `entry-container_braced`,\n  ENTRY_CONTAINER_OVERSIZE: `entry-container_oversize`,\n  CONSOLE_ITEM_HEAD_PARENTHESED: `item-head_parenthesed`,\n  CONSOLE_ITEM_HEAD_INFO: `item-head-info`,\n  CONSOLE_ITEM_HEAD_ELEMENTS: `item-head-elements`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_SHOW: `item-head-elements_show`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER: `item-content-container`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW: `item-content-container_show`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH: `item-head-elements-length`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW: `item-head-elements-length_show`\n};\n","import AbstractView from './abstract-view';\nimport {getElement} from './utils';\nimport {Class} from './enums';\n\nexport default class TypeView extends AbstractView {\n  constructor(value, type, isPrimitive) {\n    super();\n    this._value = value;\n    this._type = type;\n    this._isPrimitive = isPrimitive;\n    this._isOpened = false;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get isPrimitive() {\n    return this._isPrimitive;\n  }\n\n  _getHeadErrorContent() {\n    return {\n      elOrStr: this._value.toString(),\n      isShowConstructor: false,\n      isShowElements: true\n    };\n  }\n\n  _toggleContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item item-content\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value, false).fragment);\n      this._contentContainerEl.appendChild(this._proxiedContentEl);\n    }\n    this._contentContainerEl.classList.toggle(Class.CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW);\n  }\n\n  _hideContent() {\n    this._proxiedContentEl.style.display = `none`;\n  }\n\n  _additionHeadClickHandler() {}\n\n  _setHeadClickHandler(headEl) {\n    this._setCursorPointer();\n    headEl.addEventListener(`click`, (evt) => {\n      evt.preventDefault();\n      this._toggleContent();\n      this._additionHeadClickHandler();\n    });\n  }\n\n  _setCursorPointer() {\n    this.el.classList.add(Class.CONSOLE_ITEM_POINTER);\n  }\n\n  static createEntryEl(index, valueEl, withoutKey) {\n    const entryEl = getElement(`\\\n<span class=\"entry-container__entry\">\\\n  ${withoutKey ? `` : `<span class=\"entry-container__key\">${index}</span>`}<span class=\"entry-container__value-container\"></span>\\\n</span>`);\n    const valueContEl = entryEl.querySelector(`.entry-container__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","/* eslint guard-for-in: \"off\"*/\nimport TypeView from '../type-view';\nimport {createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nconst MAX_HEAD_ELEMENTS_LENGTH = 5;\n\nexport default class ObjectView extends TypeView {\n  constructor(value, mode) {\n    super(value, `object`, false);\n    this._mode = mode;\n    this._entries = new Map();\n    this._isOpened = false;\n  }\n\n  /**\n   * Шаблон\n   * @override\n   * Чтобы окружить фигурными скобками тело объекта, добавьте к элемену с классом\n   * Class.CONSOLE_ITEM_CONTENT_CONTAINTER\n   * класс\n   * Class.ENTRY_CONTAINER_BRACED\n   *\n   **/\n  get template() {\n    return `\\\n<div class=\"console__item item item_object\">\\\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\">\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">${this.value.constructor.name}</span>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS} entry-container entry-container_head entry-container_type_object\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container entry-container_type_object\"></div>\n</div>`;\n  }\n\n  bind() {\n    const headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    const headElementsEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    const headInfoEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_INFO}`);\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n\n    const {elOrStr, isShowConstructor, isShowElements, isBraced, isOpeningDisabled, isOversize, isStringified} = this._getHeadContent();\n    if (isBraced) {\n      headElementsEl.classList.add(Class.ENTRY_CONTAINER_BRACED);\n    }\n    if (isOversize) {\n      headElementsEl.classList.add(Class.ENTRY_CONTAINER_OVERSIZE);\n    }\n    if (isShowConstructor) {\n      headInfoEl.classList.add(Class.CONSOLE_ITEM_HEAD_SHOW);\n    }\n    if (isShowElements) {\n      if (elOrStr instanceof HTMLElement || elOrStr instanceof DocumentFragment) {\n        headElementsEl.appendChild(elOrStr);\n      } else {\n        headElementsEl.innerHTML = elOrStr;\n      }\n      headElementsEl.classList.add(Class.CONSOLE_ITEM_HEAD_ELEMENTS_SHOW);\n    }\n\n    if (this._mode === Mode.ERROR && isStringified) {\n      this.el.classList.add(this._mode);\n    }\n\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    if (!isOpeningDisabled) {\n      this._setHeadClickHandler(headEl);\n    }\n  }\n\n  _getHeadContent() {\n    if (this._mode === Mode.DIR) {\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.LOG || this._mode === Mode.PROP || this._mode === Mode.ERROR) {\n      return this._getHeadLogContent();\n    } else if (this._mode === Mode.PREVIEW) {\n      return this._getHeadPreviewContent();\n    }\n    return ``;\n  }\n\n  _getHeadPreviewContent() {\n    if (Object.prototype.toString.call(this.value) === `[object Object]`) {\n      return {\n        elOrStr: `...`,\n        isShowConstructor: false,\n        isShowElements: true,\n        isBraced: true\n      };\n    }\n    return this._getHeadDirContent();\n  }\n\n  _getHeadLogContent() {\n    let val;\n    let isShowConstructor = false;\n    let isBraced = true;\n    let isOpeningDisabled = false;\n    let isOversize = false;\n    let isStringified = false;\n\n    if (this.value instanceof HTMLElement) {\n      return this._getHeadDirContent();\n    } else if (this.value instanceof Error) {\n      isBraced = false;\n      val = this.value.toString();\n      isStringified = true;\n    } else if (this.value instanceof Number) {\n      const view = createTypedView(Number.parseInt(this.value, 10), Mode.PREVIEW);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof String) {\n      const view = createTypedView(this.value.toString(), Mode.PREVIEW);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n      isStringified = true;\n      isBraced = false;\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n      isOpeningDisabled = true;\n      isBraced = false;\n    } else {\n      const obj = this.createContent(this.value, true);\n      val = obj.fragment;\n      isOversize = obj.isOversize;\n      if (this.value.constructor !== Object) {\n        isShowConstructor = true;\n      }\n    }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements: true,\n      isBraced,\n      isOpeningDisabled,\n      isOversize,\n      isStringified\n    };\n  }\n\n  _getHeadDirContent() {\n    let val;\n    let isShowConstructor = false;\n    let isShowElements = true;\n    let isBraced = false;\n    if (this.value instanceof HTMLElement) {\n      let str = this.value.tagName.toLowerCase();\n      str += this.value.id;\n      if (this.value.classList.length) {\n        str += `.` + Array.prototype.join.call(this.value.classList, `.`);\n      }\n      val = str;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n    } else if (this.value instanceof Error) {\n      val = this.value.toString();\n    } else {\n      val = this.value;\n      isShowConstructor = true;\n      isShowElements = false;\n    }\n    // else if (this.value.constructor === GeneratorFunction) {\n    //   return this\n    // }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements,\n      isBraced\n    };\n  }\n\n  createContent(obj, isPreview) {\n    const fragment = document.createDocumentFragment();\n    const keys = new Set();\n    // TODO: Добавить счётчик, чтобы больше 5 значений не добавлялось\n    for (let key in obj) {\n      keys.add(key);\n      if (isPreview && keys.size === MAX_HEAD_ELEMENTS_LENGTH) {\n        return {\n          fragment,\n          isOversize: true\n        };\n      }\n      const value = obj[key];\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    for (let key of Object.getOwnPropertyNames(obj)) {\n      if (keys.has(key)) {\n        continue;\n      }\n      keys.add(key);\n      if (isPreview && keys.size === MAX_HEAD_ELEMENTS_LENGTH) {\n        return {\n          fragment,\n          isOversize: true\n        };\n      }\n      const value = obj[key];\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return {\n      fragment,\n      isOversize: false\n    };\n  }\n}\n","import TypeView from '../type-view';\nimport {createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nexport default class ArrayView extends TypeView {\n  constructor(arr, mode) {\n    super(arr, `array`, false);\n    this._mode = mode;\n    this._elements = new Map();\n    this._isOpened = false;\n  }\n\n  /**\n   * Шаблон\n   * @override\n   * Чтобы окружить квадратными скобками тело объекта, добавьте к элемену с классом\n   * Class.CONSOLE_ITEM_CONTENT_CONTAINTER\n   * класс\n   * Class.ENTRY_CONTAINER_BRACED\n   *\n   **/\n  get template() {\n    return `\\\n<div class=\"console__item item item_array\">\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\">\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">${this.value.constructor.name}</span>\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH}\">${this.value.length}</span>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS} entry-container entry-container_head entry-container_braced entry-container_type_array\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container entry-container_type_array\"></div>\n</div>`;\n  }\n\n  bind() {\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    this.headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    this.headInfoEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_INFO}`);\n    this.headElementsEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    this.headElementsLengthEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH}`);\n    const {isShowConstructor, isShowElements, isShowLength} = this._getHeadContent();\n    if (isShowConstructor) {\n      this._toggleConstructor(this.headInfoEl, true);\n    }\n    if (isShowElements) {\n      this.headElementsEl.appendChild(this.createContent(this.value, true).fragment);\n      this._toggleHeadElements(this.headElementsEl, true);\n    }\n    if (isShowLength) {\n      this._toggleLength(this.headElementsLengthEl, true);\n    }\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    this._setHeadClickHandler(this.headEl);\n  }\n\n  _additionHeadClickHandler() {\n    if (this._mode === Mode.PROP) {\n      this._toggleConstructor();\n      this._toggleHeadElements();\n    }\n  }\n\n  _toggleConstructor() {\n    this.headInfoEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_SHOW);\n  }\n\n  _toggleLength() {\n    this.headElementsLengthEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW);\n  }\n\n  _toggleHeadElements() {\n    this.headElementsEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_ELEMENTS_SHOW);\n  }\n\n  _getHeadContent() {\n    let isShowConstructor = false;\n    let isShowElements = true;\n    let isShowLength = this.value.length > 1;\n    if (this._mode === Mode.DIR) {\n      isShowConstructor = true;\n      isShowElements = false;\n    // } else if (this._mode === Mode.PROP) {\n    } else if (this._mode === Mode.PREVIEW) {\n      isShowConstructor = true;\n      isShowElements = false;\n      isShowLength = true;\n    } else if (this._mode === Mode.ERROR) {\n      return this._getHeadErrorContent();\n    }\n    return {\n      isShowConstructor,\n      isShowElements,\n      isShowLength\n    };\n  }\n\n  createContent(arr, isPreview) {\n    const ownPropertyNames = Object.getOwnPropertyNames(arr);\n    const keys = Object.keys(arr);\n    const fragment = document.createDocumentFragment();\n    for (let key of ownPropertyNames) {\n      const value = arr[key];\n      const indexInKeys = keys.indexOf(key);\n      const isKeyNaN = Number.isNaN(Number.parseInt(key, 10));\n      if (isPreview && indexInKeys === -1) {\n        continue;\n      }\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ArrayView.createEntryEl(key, view.el, isPreview ? !isKeyNaN : isPreview);\n      // if (!isPreview) {\n      //   this._elements.set(entryEl, view);\n      // }\n      fragment.appendChild(entryEl);\n    }\n    return {fragment};\n  }\n}\n","import TypeView from '../type-view';\nimport {createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nconst MAX_PREVIEW_FN_BODY_LENGTH = 43;\n\nconst FnType = {\n  PLAIN: `plain`,\n  ARROW: `arrow`,\n  CLASS: `class`\n};\n\n// arguments, caller, length, name, prototype, __proto__, [[FunctionLocation]], [[Scopes]]\n\n// if .caller not accessed — не выводим\n// if prototype undefined — не выводим\n// name — если неименованная — получает имя переменной, в которую записана\n// если именнованная — то имя ф-ии\n\nexport default class FunctionView extends TypeView {\n  constructor(fn, mode) {\n    super(fn, `function`, false);\n    this._mode = mode;\n    this._isOpened = false;\n    this._fnType = FunctionView.checkFnType(fn);\n  }\n\n  get template() {\n    let tpl = `<div class=\"console__item item item_function ${this._mode === Mode.ERROR ? `${this._mode}` : ``}\">`;\n    switch (this._mode) {\n      case Mode.PREVIEW:\n        tpl += `f`;\n        break;\n      case Mode.PROP:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadPropMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>`;\n        break;\n      case Mode.DIR:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadDirMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>`;\n        break;\n      case Mode.LOG:\n      case Mode.ERROR:\n        tpl += this._getLogMarkup();\n        break;\n    }\n    tpl += `</div>`;\n    return tpl;\n  }\n\n  bind() {\n    if (this._mode !== Mode.DIR && this._mode !== Mode.PROP) {\n      return;\n    }\n\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    const headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    // previewEl.appendChild(this.createPreview(this.value, true));\n    this._setHeadClickHandler(headEl);\n  }\n\n  _getHeadPropMarkup() {\n    const {name, params, lines} = this.parseFunction(this.value);\n    const joinedLines = lines.join(`\\n`);\n\n    let markup = `\\\n<span>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}`;\n    if (this._fnType !== FnType.CLASS) {\n      markup += `{${joinedLines.length <= MAX_PREVIEW_FN_BODY_LENGTH ? joinedLines : `...`}}`;\n    }\n    markup += `</span>`;\n    return markup;\n  }\n\n  _getHeadDirMarkup() {\n    const {name, params} = this.parseFunction(this.value);\n\n    let markup = `\\\n  <span>\\\n  ${this._fnType === FnType.CLASS ? `class ` : ``}\\\n  ${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n  ${name ? name : ``}\\\n  ${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}</span>`;\n    return markup;\n  }\n\n  _getLogMarkup() {\n    return `<pre>${this.value.toString()}</pre>`;\n    // const {name, params, lines} = this.parseFunction(this.value);\n    /* return `\\\n<pre>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `function ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}{\n${lines.join(`\\n`)}\n}\n</pre>`;*/\n  }\n\n  static checkFnType(fn) {\n    let str = fn.toString();\n    const firstParenthesisIndex = str.indexOf(`(`);\n\n    const classIndex = str.indexOf(`class`);\n    const arrowIndex = str.indexOf(`=>`);\n    if (classIndex !== -1 && classIndex < firstParenthesisIndex) {\n      return FnType.CLASS;\n    } else if (arrowIndex !== -1 && arrowIndex > firstParenthesisIndex) {\n      return FnType.ARROW;\n    }\n    return FnType.PLAIN;\n  }\n\n  parseParams(funString) {\n    const paramsStart = funString.indexOf(`(`);\n    const paramsEnd = funString.indexOf(`)`);\n\n    const paramsContent = funString.substring(paramsStart + 1, paramsEnd).trim();\n\n    return paramsContent ? paramsContent.split(`,`).map((it) => it.trim()) : [];\n  }\n\n  parseName(funString) {\n    let endingChar;\n    if (this._fnType === FnType.CLASS) {\n      endingChar = `{`;\n    } else if (this._fnType === FnType.PLAIN) {\n      endingChar = `(`;\n    }\n    let name;\n    const re = new RegExp(`(?:class|function)\\\\s+(\\\\w+)\\\\s*(?:\\\\${endingChar})`);\n    const ex = re.exec(funString);\n    if (ex !== null) {\n      name = ex[1];\n    }\n    return name;\n  }\n\n  parseBody(funString) {\n    const bodyStart = funString.indexOf(`{`);\n    const bodyEnd = funString.lastIndexOf(`}`);\n\n    const bodyContent = funString.substring(bodyStart + 1, bodyEnd).trim();\n\n    if (!bodyContent) {\n      return [];\n    }\n\n    return bodyContent.split(`\\n`).map(function (it) {\n      return it.trim();\n    });\n  }\n\n  parseFunction(fnOrString) {\n    let str;\n    if (typeof fnOrString !== `string`) {\n      str = fnOrString.toString();\n    }\n    return {\n      name: fnOrString.name, // this.parseName(str),\n      params: this.parseParams(str),\n      lines: this.parseBody(str)\n    };\n  }\n\n  createContent(fn) {\n    const fragment = document.createDocumentFragment();\n    const keys = [`name`, `prototype`, `caller`, `arguments`, `length`, `__proto__`];\n    for (let key of keys) {\n      let value;\n      try {\n        value = fn[key];\n      } catch (err) {\n        continue;\n      }\n      const view = createTypedView(value, Mode.DIR);\n      const entryEl = FunctionView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return {fragment};\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode} from '../enums';\n\nconst STRING_COLLAPSED = `string_collapsed`;\n\nexport default class PrimitiveView extends TypeView {\n  constructor(value, mode, type) {\n    super(value, type, true);\n    this._mode = mode;\n  }\n\n  get template() {\n    const type = this.type;\n    let value = this.value;\n    let html = ``;\n    if (type === `string` || type === `symbol`) {\n      if (type === `symbol`) {\n        value = value.toString();\n      }\n      value = this.escapeHtml(value);\n    }\n    switch (type) {\n      case `undefined`:\n      case `null`:\n      case `boolean`:\n        html = `<div class=\"console__item item item_primitive ${type}\">${value}</div>`;\n        break;\n\n      case `number`:\n        if (Number.isNaN(value)) {\n          html = `<div class=\"console__item item item_primitive NaN\">NaN</div>`;\n        } else if ((value === Infinity || value === -Infinity)) {\n          html = `<div class=\"console__item item item_primitive number\">${(value === -Infinity ? `-` : ``)}Infinity</div>`;\n        } else {\n          html = `<div class=\"console__item item item_primitive ${type}\">${value}</div>`;\n        }\n        break;\n\n      case `string`:\n        html = `<pre class=\"console__item item item_primitive string ${this._mode === Mode.PROP ? STRING_COLLAPSED : ``} ${this._mode === Mode.ERROR ? `${this._mode}` : ``}\">${value}</pre>`;\n        break;\n      case `symbol`:\n        html = `<div class=\"console__item item item_primitive symbol\">${value}</div>`;\n        break;\n\n      case `object`:\n        if (value === null) {\n          html = `<div class=\"console__item item item_primitive null\">${value}</div>`;\n          break;\n        }\n    }\n    return html;\n  }\n\n  bind() {\n    if (this._mode === Mode.PROP && this.type === `string`) {\n      this._setCursorPointer();\n      this.el.addEventListener(`click`, (evt) => {\n        evt.preventDefault();\n        this.el.classList.toggle(STRING_COLLAPSED);\n      });\n    }\n  }\n\n  escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, `&amp;`)\n        .replace(/</g, `&lt;`)\n        .replace(/>/g, `&gt;`)\n        .replace(/\"/g, `&quot;`)\n        .replace(/'/g, `&#039;`);\n  }\n}\n","import ObjectView from './object/object-view';\nimport ArrayView from './array/array-view';\nimport FunctionView from './function/function-view';\nimport PrimitiveView from './primitive/primitive-view';\n\nexport const getElement = (htmlMarkup) => {\n  const div = document.createElement(`div`);\n  div.innerHTML = htmlMarkup;\n  return div.firstElementChild;\n};\n\nconst primitiveTypeofs = [\n  `undefined`,\n  `number`,\n  `string`,\n  `boolean`,\n  `symbol`,\n  `object`\n];\n\nexport const getPrimitiveType = (val) => {\n  const type = typeof val;\n\n  if (!primitiveTypeofs.includes(type)) {\n    throw new Error(`Unknown primitive type: ` + type);\n  }\n\n  return type;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\nexport const createTypedView = (val, mode) => {\n  let view;\n  const type = typeof val;\n  switch (type) {\n    case `function`:\n      view = new FunctionView(val, mode);\n      break;\n    case `object`:\n      // TODO: check instanceof Date, String, Boolean, Number\n      if (val !== null) {\n        if (Array.isArray(val)) { // TODO: typedarrays, arraybuffer, etc\n          view = new ArrayView(val, mode);\n        } else {\n          view = new ObjectView(val, mode);\n        }\n      } else {\n        view = new PrimitiveView(val, mode, type);\n      }\n      break;\n    default:\n      view = new PrimitiveView(val, mode, type);\n      break;\n  }\n  return view;\n};\n","// import babelPolyfill from 'babel-polyfill';\n// import whatwgFetch from 'whatwg-fetch';\nimport {getElement, createTypedView} from './utils';\n\nconst Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  ERROR: `error`\n};\n\nconst getRowEl = (entries, mode) => {\n  const el = getElement(`<div class=\"console__row\"></div>`);\n  entries.forEach(function (code) {\n    el.appendChild(createTypedView(code, mode).el);\n  });\n  return el;\n};\n\n/**\n * Init Console\n *\n * @param {HTMLElement} cont — console container\n * @return {{log: log}}\n */\nconst jsConsoleInit = (cont) => {\n  if (!cont) {\n    throw Error(`Console is not inited!`);\n  }\n\n  // Public interface\n  const logger = {};\n\n  /**\n   * Show formatted & highlighted code into `cont`\n   */\n  logger.log = function (...rest) {\n    cont.appendChild(getRowEl(rest, Mode.LOG));\n\n    if (typeof logger.onlog === `function`) {\n      logger.onlog(rest);\n    }\n  };\n\n  logger.error = function (errOrSmth) {\n    const el = getElement(`<div class=\"console__row console__row_error\"></div>`);\n    el.appendChild(createTypedView(errOrSmth, Mode.ERROR).el);\n    cont.appendChild(el);\n  };\n\n  logger.clean = function () {\n    cont.innerHTML = ``;\n  };\n\n  logger.getLogSource = function () {\n    return cont.innerHTML;\n  };\n\n  logger.dir = function (val) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    el.appendChild(createTypedView(val, Mode.DIR).el);\n    cont.appendChild(el);\n  };\n\n  logger.extend = function (consoleObject) {\n    consoleObject.log = logger.log;\n    consoleObject.info = logger.log;\n\n    consoleObject.error = logger.error;\n    consoleObject.warn = logger.error;\n\n    consoleObject.dir = logger.dir;\n\n    return consoleObject;\n  };\n\n  return logger;\n};\n\nexport default jsConsoleInit;\n","import jsConsoleInit from './main';\n\nwindow.jsConsole = jsConsoleInit(document.querySelector(`.console`));\n"]}