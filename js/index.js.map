{"version":3,"sources":["js/abstract-view.js","js/type-view.js","js/enums.js","js/object/object-view.js","js/array/array-view.js","js/function/function-view.js","js/primitive/primitive-view.js","js/utils.js","js/main.js","js/index.js"],"names":["AbstractView","getElement","this","template","_el","render","bind","TypeView","value","type","isPrimitive","_value","_type","_isPrimitive","Mode","Class","ObjectView","mode","_mode","_entries","Map","_isOpened","headEl","el","querySelector","_contentContainerEl","elOrStr","_getHeadContent","HTMLElement","DocumentFragment","appendChild","innerHTML","addEventListener","_this2","_hideContent","_showContent","_proxiedContentEl","createContent","_displayVal","style","display","Object","prototype","toString","call","_getHeadDirContent","_getHeadErrorContent","stack","str","tagName","toLowerCase","classList","length","Array","join","Error","constructor","name","obj","isPreview","fragment","document","createDocumentFragment","keys","Set","key","add","view","createTypedView","entryEl","createEntryEl","_step","getOwnPropertyNames","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","has","slice","valueEl","ArrayView","arr","_arr","_elements","previewEl","ownPropertyNames","indexInKeys","indexOf","isKeyNaN","Number","isNaN","parseInt","index","withKey","FnType","FunctionView","fn","_fnType","checkFnType","_parseFunction","_parseFunction2","params","joinedLines","lines","markup","_parseFunction3","funString","paramsStart","paramsEnd","paramsContent","substring","trim","split","map","it","endingChar","ex","RegExp","exec","bodyStart","bodyEnd","lastIndexOf","bodyContent","fnOrString","_parseParams","_parseBody","err","tpl","_getHeadPropMarkup","_getHeadDirMarkup","_getLogMarkup","firstParenthesisIndex","classIndex","arrowIndex","PrimitiveView","evt","preventDefault","toggle","unsafe","replace","html","escapeHtml","Infinity","htmlMarkup","div","createElement","firstElementChild","val","_typeof","isArray","getRowEl","entries","forEach","code","window","jsConsole","cont","logger","rest","_len","_key","arguments","onlog","errOrSmth","_len2","_key2","consoleObject","log","info","error","warn","dir","jsConsoleInit"],"mappings":"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","file":"index.js","sourcesContent":["import {getElement} from './utils';\n\nexport default class AbstractView {\n  constructor() {}\n\n  /**\n   * @abstract\n   * @return {string}\n   */\n  get template() {}\n\n  get el() {\n    if (!this._el) {\n      this._el = this.render();\n      this.bind(this._el);\n    }\n    return this._el;\n  }\n\n  render() {\n    return getElement(this.template);\n  }\n\n  bind() {}\n}\n","import AbstractView from './abstract-view';\n\nexport default class TypeView extends AbstractView {\n  constructor(value, type, isPrimitive) {\n    super();\n    this._value = value;\n    this._type = type;\n    this._isPrimitive = isPrimitive;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get isPrimitive() {\n    return this._isPrimitive;\n  }\n}\n","export const Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  PROP: `prop`,\n  ERROR: `error`\n};\n\nexport const Class = {\n  CONSOLE_ITEM_HEAD: `console__item-head`,\n  CONSOLE_ITEM_HEAD_SIZE: `console__item-head_size`,\n  CONSOLE_ITEM_HEAD_ELEMENTS: `console__item-head_elements`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER: `console__item-content-container`\n};\n","/* eslint guard-for-in: \"off\"*/\nimport TypeView from '../type-view';\nimport {getElement, createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nexport default class ObjectView extends TypeView {\n  constructor(value, mode) {\n    super(value, `object`, false);\n    this._mode = mode;\n    this._entries = new Map();\n    this._isOpened = false;\n  }\n\n  get template() {\n    const className = Object.prototype.toString.call(this.value).slice(8, -1);\n    return `\n<div class=\"console__item object ${className} ${this._mode === Mode.ERROR ? `${this._mode}` : ``}\">\\\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\"></div>\\\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}\"></div>\\\n</div>`;\n\n//${className !== `Object` ? className : ``} Добавить в хед, возможно добавить внутрь див для имени.\n  }\n\n  bind() {\n    const headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    // headEl.appendChild(this.createContent(this.value, true));\n\n    const elOrStr = this._getHeadContent();\n    if (elOrStr instanceof HTMLElement || elOrStr instanceof DocumentFragment) {\n      headEl.appendChild(elOrStr);\n    } else {\n      headEl.innerHTML = elOrStr;\n    }\n    if (this._mode === Mode.PREVIEW || this._mode === Mode.ERROR) {\n      return;\n    }\n\n    headEl.addEventListener(`click`, () => {\n      if (this._isOpened) {\n        this._hideContent();\n      } else {\n        this._showContent();\n      }\n      this._isOpened = !this._isOpened;\n    });\n  }\n\n  _showContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item-content\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value, false));\n      this._contentContainerEl.appendChild(this._proxiedContentEl);\n      this._displayVal = this._proxiedContentEl.style.display;\n    }\n\n    this._proxiedContentEl.style.display = this._displayVal;\n  }\n\n  _hideContent() {\n    this._proxiedContentEl.style.display = `none`;\n  }\n\n  _getHeadContent() {\n    if (Object.prototype.toString.call(this.value) === `[object Object]`) {\n      if (this._mode !== Mode.PREVIEW) {\n        return this.createContent(this.value, true);\n      }\n      return `...`;\n    }\n    if (this._mode === Mode.DIR) {\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.LOG) { // Временно выводим для .log .error и preview то же, что и для .dir\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.PREVIEW) {\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.ERROR) {\n      return this._getHeadErrorContent();\n    }\n    return ``;\n  }\n\n  _getHeadPreviewContent() {}\n  _getHeadLogContent() {}\n  _getHeadErrorContent() {\n    return `<pre>${this.value.stack}</pre>`;\n  }\n  _getHeadDirContent() {\n    if (this.value instanceof HTMLElement) {\n      let str = this.value.tagName.toLowerCase();\n      if (this.value.classList.length) {\n        str += `.` + Array.prototype.join.call(this.value.classList, `.`);\n      }\n      return str;\n    } else if (this.value instanceof Error) {\n      return this.value.stack;\n    }\n    // else if (this.value.constructor === GeneratorFunction) {\n    //   return this\n    // }\n    return this.value.constructor.name;\n  }\n\n  createContent(obj, isPreview) {\n    const fragment = document.createDocumentFragment();\n    const keys = new Set();\n    for (let key in obj) {\n      keys.add(key);\n      const value = obj[key];\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    for (let key of Object.getOwnPropertyNames(obj)) {\n      if (keys.has(key)) {\n        continue;\n      }\n      const value = obj[key];\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return fragment;\n  }\n\n  static createEntryEl(key, valueEl) {\n    const entryEl = getElement(`\\\n<span class=\"object__entry object-entry\">\n  <span class=\"object-entry__key\">${key}</span><span class=\"object-entry__value-container\"></span>\n</span>`);\n    const valueContEl = entryEl.querySelector(`.object-entry__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","import TypeView from '../type-view';\nimport {getElement, createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nexport default class ArrayView extends TypeView {\n  constructor(arr, mode) {\n    super(arr, `array`, false);\n    this._arr = arr;\n    this._mode = mode;\n    this._elements = new Map();\n    this._isOpened = false;\n  }\n\n  get template() {\n    return `\\\n<div class=\"console__item array\">\n  <div class=\"${Class.CONSOLE_ITEM_HEAD} \\\n${this._mode === Mode.PREVIEW ? Class.CONSOLE_ITEM_HEAD_SIZE : Class.CONSOLE_ITEM_HEAD_ELEMENTS}\">\\\n${this._mode === Mode.PREVIEW ? `Array(${this._arr.length})` : ``}</div>\\\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}\"></div>\n</div>`;\n  }\n\n  bind() {\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    const previewEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    previewEl.appendChild(this.createContent(this.value, true));\n\n    previewEl.addEventListener(`click`, () => {\n      if (this._isOpened) {\n        this._hideContent();\n      } else {\n        this._showContent();\n      }\n      this._isOpened = !this._isOpened;\n    });\n  }\n\n  _showContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item-content\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value, false));\n      this._contentContainerEl.appendChild(this._proxiedContentEl);\n      this._displayVal = this._proxiedContentEl.style.display;\n    }\n    this._proxiedContentEl.style.display = this._displayVal;\n  }\n\n  _hideContent() {\n    this._proxiedContentEl.style.display = `none`;\n  }\n\n  createContent(arr, isPreview) {\n    const ownPropertyNames = Object.getOwnPropertyNames(arr);\n    const keys = Object.keys(arr);\n    const fragment = document.createDocumentFragment();\n    for (let key of ownPropertyNames) {\n      const value = arr[key];\n      const indexInKeys = keys.indexOf(key);\n      const isKeyNaN = Number.isNaN(Number.parseInt(key, 10));\n      if (isPreview && indexInKeys === -1) {\n        continue;\n      }\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.DIR);\n      const entryEl = ArrayView.createEntryEl(key, view.el, isPreview ? !isKeyNaN : isPreview);\n      // if (!isPreview) {\n      //   this._elements.set(entryEl, view);\n      // }\n      fragment.appendChild(entryEl);\n    }\n    return fragment;\n  }\n\n  static createEntryEl(index, valueEl, withKey) {\n    const entryEl = getElement(`\\\n<span class=\"array__entry array-entry\">\\\n  ${withKey ? `` : `<span class=\"array-entry__key\">${index}</span>`}<span class=\"array-entry__value-container\"></span>\\\n</span>`);\n    const valueContEl = entryEl.querySelector(`.array-entry__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","import TypeView from '../type-view';\nimport {getElement, createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nconst MAX_PREVIEW_FN_BODY_LENGTH = 43;\n\nconst FnType = {\n  PLAIN: `plain`,\n  ARROW: `arrow`,\n  CLASS: `class`\n};\n\n// arguments, caller, length, name, prototype, __proto__, [[FunctionLocation]], [[Scopes]]\n\n// if .caller not accessed — не выводим\n// if prototype undefined — не выводим\n// name — если неименованная — получает имя переменной, в которую записана\n// если именнованная — то имя ф-ии\n\nexport default class FunctionView extends TypeView {\n  constructor(fn, mode) {\n    super(fn, `function`, false);\n    this._mode = mode;\n    this._isOpened = false;\n    this._fnType = FunctionView.checkFnType(fn);\n  }\n\n  get template() {\n    let tpl = `<div class=\"console__item function\">`;\n    switch (this._mode) {\n      case Mode.PREVIEW:\n        tpl += `f`;\n        break;\n      case Mode.PROP:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadPropMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}\"></div>`;\n        break;\n      case Mode.DIR:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadDirMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}\"></div>`;\n        break;\n      case Mode.LOG:\n        tpl += this._getLogMarkup();\n        break;\n    }\n    tpl += `</div>`;\n    return tpl;\n  }\n\n  bind() {\n    if (this._mode !== Mode.DIR) {\n      return;\n    }\n\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    const previewEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    // previewEl.appendChild(this.createPreview(this.value, true));\n\n    previewEl.addEventListener(`click`, () => {\n      if (this._isOpened) {\n        this._hideContent();\n      } else {\n        this._showContent();\n      }\n      this._isOpened = !this._isOpened;\n    });\n  }\n\n  _showContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item-content\"></div>`);\n      this._contentContainerEl.appendChild(this._proxiedContentEl);\n      this._displayVal = this._proxiedContentEl.style.display;\n    }\n\n    this._proxiedContentEl.style.display = this._displayVal;\n  }\n\n  _hideContent() {\n    this._proxiedContentEl.style.display = `none`;\n  }\n\n  _getHeadPropMarkup() {\n    const {name, params, lines} = this._parseFunction(this.value);\n    const joinedLines = lines.join(`\\n`);\n\n    let markup = `\\\n<span>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}`;\n    if (this._fnType !== FnType.CLASS) {\n      markup += `{\\\n  ${joinedLines.length <= MAX_PREVIEW_FN_BODY_LENGTH ? joinedLines : `...`}\\\n}`;\n    }\n    markup += `</span>`;\n    return markup;\n  }\n\n  _getHeadDirMarkup() {\n    const {name, params} = this._parseFunction(this.value);\n\n    let markup = `\\\n  <span>\\\n  ${this._fnType === FnType.CLASS ? `class ` : ``}\\\n  ${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n  ${name ? name : ``}\\\n  ${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}</span>`;\n    return markup;\n  }\n\n  _getLogMarkup() {\n    return `<pre>${this.value.toString()}</pre>`;\n    // const {name, params, lines} = this._parseFunction(this.value);\n    /* return `\\\n<pre>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `function ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}{\n${lines.join(`\\n`)}\n}\n</pre>`;*/\n  }\n\n  static checkFnType(fn) {\n    let str = fn.toString();\n    const firstParenthesisIndex = str.indexOf(`(`);\n\n    const classIndex = str.indexOf(`class`);\n    const arrowIndex = str.indexOf(`=>`);\n    if (classIndex !== -1 && classIndex < firstParenthesisIndex) {\n      return FnType.CLASS;\n    } else if (arrowIndex !== -1 && arrowIndex > firstParenthesisIndex) {\n      return FnType.ARROW;\n    }\n    return FnType.PLAIN;\n  }\n\n  _parseParams(funString) {\n    const paramsStart = funString.indexOf(`(`);\n    const paramsEnd = funString.indexOf(`)`);\n\n    const paramsContent = funString.substring(paramsStart + 1, paramsEnd).trim();\n\n    return paramsContent ? paramsContent.split(`,`).map((it) => it.trim()) : [];\n  }\n\n  _parseName(funString) {\n    let endingChar;\n    if (this._fnType === FnType.CLASS) {\n      endingChar = `{`;\n    } else if (this._fnType === FnType.PLAIN) {\n      endingChar = `(`;\n    }\n    let name;\n    const re = new RegExp(`(?:class|function)\\\\s+(\\\\w+)\\\\s*(?:\\\\${endingChar})`);\n    const ex = re.exec(funString);\n    if (ex !== null) {\n      name = ex[1];\n    }\n    return name;\n  }\n\n  _parseBody(funString) {\n    const bodyStart = funString.indexOf(`{`);\n    const bodyEnd = funString.lastIndexOf(`}`);\n\n    const bodyContent = funString.substring(bodyStart + 1, bodyEnd).trim();\n\n    if (!bodyContent) {\n      return [];\n    }\n\n    return bodyContent.split(`\\n`).map(function (it) {\n      return it.trim();\n    });\n  }\n\n  _parseFunction(fnOrString) {\n    let str;\n    if (typeof fnOrString !== `string`) {\n      str = fnOrString.toString();\n    }\n    return {\n      name: fnOrString.name, // this._parseName(str),\n      params: this._parseParams(str),\n      lines: this._parseBody(str)\n    };\n  }\n\n  createContent(fn) {\n    const fragment = document.createDocumentFragment();\n    const keys = [`name`, `prototype`, `caller`, `arguments`, `length`, `__proto__`];\n    for (let key of keys) {\n      let value;\n      try {\n        value = fn[key];\n      } catch (err) {\n        continue;\n      }\n      const view = createTypedView(value, Mode.DIR);\n      const entryEl = FunctionView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return fragment;\n  }\n\n  static createEntryEl(key, valueEl) {\n    const entryEl = getElement(`\\\n<span class=\"object__entry object-entry\">\n  <span class=\"object-entry__key\">${key}</span><span class=\"object-entry__value-container\"></span>\n</span>`);\n    const valueContEl = entryEl.querySelector(`.object-entry__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode} from '../enums';\n\nconst Class = {\n  STRING_COLLAPSED: `string_collapsed`\n};\n\nexport default class PrimitiveView extends TypeView {\n  constructor(value, mode, type) {\n    super(value, type, true);\n    this._mode = mode;\n  }\n\n  get template() {\n    const type = this.type;\n    let value = this.value;\n    let html = ``;\n    if (type === `string` || type === `symbol`) {\n      if (type === `symbol`) {\n        value = value.toString();\n      }\n      value = this.escapeHtml(value);\n    }\n    switch (type) {\n      case `undefined`:\n      case `null`:\n      case `boolean`:\n        html = `<div class=\"console__item console__item_primitive ` + type + `\">` + value + `</div>`;\n        break;\n\n      case `number`:\n        if (isNaN(value)) {\n          html = `<div class=\"console__item console__item_primitive NaN\">NaN</div>`;\n        } else if ((value === Infinity || value === -Infinity)) {\n          html = `<div class=\"console__item console__item_primitive number\">` + (value === -Infinity ? `-` : ``) + `Infinity</div>`;\n        } else {\n          html = `<div class=\"console__item console__item_primitive ` + type + `\">` + value + `</div>`;\n        }\n        break;\n\n      case `string`:\n        html = `<pre class=\"console__item console__item_primitive string ${this._mode === Mode.PROP ? Class.STRING_COLLAPSED : ``}\">${value}</pre>`;\n        break;\n      case `symbol`:\n        html = `<div class=\"console__item console__item_primitive ` + type + `\">` + value + `</div>`;\n        break;\n\n      case `object`:\n        if (value === null) {\n          html = `<div class=\"console__item console__item_primitive null\">` + value + `</div>`;\n          break;\n        }\n    }\n    return html;\n  }\n\n  bind() {\n    if (this._mode === Mode.PROP && this.type === `string`) {\n      this.el.addEventListener(`click`, (evt) => {\n        evt.preventDefault();\n        this.el.classList.toggle(Class.STRING_COLLAPSED);\n      });\n    }\n  }\n\n  escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, `&amp;`)\n        .replace(/</g, `&lt;`)\n        .replace(/>/g, `&gt;`)\n        .replace(/\"/g, `&quot;`)\n        .replace(/'/g, `&#039;`);\n  }\n}\n","import ObjectView from './object/object-view';\nimport ArrayView from './array/array-view';\nimport FunctionView from './function/function-view';\nimport PrimitiveView from './primitive/primitive-view';\n\nexport const getElement = (htmlMarkup) => {\n  const div = document.createElement(`div`);\n  div.innerHTML = htmlMarkup;\n  return div.firstElementChild;\n};\n\nconst primitiveTypeofs = [\n  `undefined`,\n  `number`,\n  `string`,\n  `boolean`,\n  `symbol`,\n  `object`\n];\n\nexport const getPrimitiveType = (val) => {\n  const type = typeof val;\n\n  if (!primitiveTypeofs.includes(type)) {\n    throw new Error(`Unknown primitive type: ` + type);\n  }\n\n  return type;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\nexport const createTypedView = (val, mode) => {\n  let view;\n  const type = typeof val;\n  switch (type) {\n    case `function`:\n      view = new FunctionView(val, mode);\n      break;\n    case `object`:\n      // TODO: check instanceof Date, String, Boolean, Number\n      if (val !== null) {\n        if (Array.isArray(val)) {\n          view = new ArrayView(val, mode);\n        } else {\n          view = new ObjectView(val, mode);\n        }\n      } else {\n        view = new PrimitiveView(val, mode, type);\n      }\n      break;\n    default:\n      view = new PrimitiveView(val, mode, type);\n      break;\n  }\n  return view;\n};\n","// import babelPolyfill from 'babel-polyfill';\n// import whatwgFetch from 'whatwg-fetch';\nimport {getElement, createTypedView} from './utils';\n\nconst Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  ERROR: `error`\n};\n\nconst getRowEl = (entries, mode) => {\n  const el = getElement(`<div class=\"console__row\"></div>`);\n  entries.forEach(function (code) {\n    el.appendChild(createTypedView(code, mode).el);\n  });\n  return el;\n};\n\n/**\n * Init Console\n *\n * @param {HTMLElement} cont — console container\n * @return {{log: log}}\n */\nconst jsConsoleInit = (cont) => {\n  if (!cont) {\n    throw Error(`Console is not inited!`);\n  }\n\n  // Public interface\n  const logger = {};\n\n  /**\n   * Show formatted & highlighted code into `cont`\n   */\n  logger.log = function (...rest) {\n    cont.appendChild(getRowEl(rest, Mode.LOG));\n\n    if (typeof logger.onlog === `function`) {\n      logger.onlog(rest);\n    }\n  };\n\n  logger.error = function (errOrSmth) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    if (errOrSmth instanceof Error) {\n      el.appendChild(createTypedView(errOrSmth, Mode.ERROR).el);\n    } else {\n      el.appendChild(createTypedView(new Error(errOrSmth), Mode.ERROR).el);\n    }\n    cont.appendChild(el);\n  };\n\n  logger.clean = function () {\n    cont.innerHTML = ``;\n  };\n\n  logger.getLogSource = function () {\n    return cont.innerHTML;\n  };\n\n  logger.dir = function (...rest) {\n    cont.appendChild(getRowEl(rest, Mode.DIR));\n\n    if (typeof logger.onlog === `function`) {\n      logger.onlog(rest);\n    }\n  };\n\n  logger.extend = function (consoleObject) {\n    consoleObject.log = logger.log;\n    consoleObject.info = logger.log;\n\n    consoleObject.error = logger.error;\n    consoleObject.warn = logger.error;\n\n    consoleObject.dir = logger.dir;\n\n    return consoleObject;\n  };\n\n  return logger;\n};\n\n// window.jsConsoleInit = jsConsoleInit;\nexport default jsConsoleInit;\n","import jsConsoleInit from './main';\n\nwindow.jsConsole = jsConsoleInit(document.querySelector(`.console`));\n"]}