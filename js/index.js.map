{"version":3,"sources":["utils.js","abstract-view.js","enums.js","type-view.js","object/object-view.js","array/array-view.js","function/function-view.js","primitive/primitive-view.js","main.js","index.js"],"names":["getElement","htmlMarkup","div","document","createElement","innerHTML","firstElementChild","AbstractView","this","template","_el","render","bind","Mode","ViewType","toggleMiddleware","el","className","isEnable","classList","toggle","add","remove","TypeView","params","cons","parentView","_parentView","_rootViewType","_viewType","_console","_value","val","_mode","mode","_type","type","_isOpened","_currentDepth","depth","_templateParams","onlyWrapper","_headEl","querySelector","_headContentEl","_headInfoEl","withHeadContentlength","_headContentLengthEl","_contentEl","afterRender","self","bool","toggleInfoShowed","toggleContentLengthShowed","toggleHeadContentShowed","_isOpeningDisabled","state","isContentShowed","_addOrRemoveHeadClickHandler","_isAutoExpandNeeded","_isContentShowed","toggleContentShowed","childElementCount","appendChild","createContent","value","fragment","evt","preventDefault","_additionHeadClickHandler","_toggleCursorPointer","_bindedHeadClickHandler","_headClickHandler","addEventListener","removeEventListener","length","key","_state","defineProperties","Object","getOwnPropertyDescriptors","_getStateCommonProxyObject","_getStateProxyObject","seal","_isAutoExpandNeededProxied","expandDepth","rootFieldsMoreThanNeed","keys","minFieldsToExpand","exclude","includes","index","valueEl","withoutKey","entryEl","ObjectView","OBJECT","_this","stringTag","prototype","toString","call","_stringTagName","substring","_constructorName","constructor","name","_getHeadContent","elOrStr","_getHeadContent2","stateParams","headContentClassName","_headContent","textContent","consoleViews","set","HTMLElement","DocumentFragment","toggleHeadContentBraced","toggleHeadContentOversized","toggleItalic","toggleError","obj","_getHeadDirContent","_getHeadLogContent","_getHeadPreviewContent","isShowInfo","isBraced","isOpeningDisabled","isOversized","isStringified","getPrototypeOf","Error","Number","createTypedView","parseInt","nextNestingLevel","String","Date","RegExp","source","flags","isHeadContentShowed","str","tagName","toLowerCase","id","Array","join","isPreview","createDocumentFragment","addedKeys","Set","hasOwnProperty","size","maxFieldsInHead","_createObjectEntryEl","err","ownPropertyNamesAndSymbols","getOwnPropertyNames","concat","getOwnPropertySymbols","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","has","view","createEntryEl","ArrayView","ARRAY","_getStateParams","isShowLength","arr","_createArrayEntryEl","_step2","_iteratorNormalCompletion2","_iterator2","indexOf","isKeyNaN","isNaN","FnType","FunctionView","FUNCTION","_fnType","checkFnType","_getHeadPropMarkup","_getHeadDirMarkup","_getHeadLogMarkup","parseFunction","_parseFunction","joinedLines","lines","markup","_parseFunction2","_parseFunction3","funString","paramsStart","paramsEnd","paramsContent","trim","split","map","it","endingChar","ex","exec","bodyStart","bodyEnd","lastIndexOf","bodyContent","fnOrString","parseParams","parseBody","fn","tempValue","firstParenthesisIndex","classIndex","arrowIndex","PrimitiveView","PRIMITIVE","unsafe","replace","html","escapeHtml","Infinity","substr","Console","container","arguments","undefined","Map","_container","_parseParams","object","array","function","paramsObject","paramName","isArray","availableTypes","push","every","rest","_len","_key","_getRowEl","onlog","onerror","ondir","_typeof","entries","forEach","consoleObject","log","info","error","warn","dir","window"],"mappings":"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","file":"index.js","sourcesContent":["export const getElement = (htmlMarkup) => {\n  const div = document.createElement(`div`);\n  div.innerHTML = htmlMarkup;\n  return div.firstElementChild;\n};\n","import {getElement} from './utils';\n\nexport default class AbstractView {\n  constructor() {}\n\n  /**\n   * @abstract\n   * @return {string}\n   */\n  get template() {}\n\n  get el() {\n    if (!this._el) {\n      this._el = this.render();\n      this.bind(this._el);\n    }\n    return this._el;\n  }\n\n  render() {\n    return getElement(this.template);\n  }\n\n  bind() {}\n}\n","export const Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  PROP: `prop`,\n  ERROR: `error`\n};\n\nexport const ViewType = {\n  FUNCTION: `function`,\n  OBJECT: `object`,\n  ARRAY: `array`,\n  PRIMITIVE: `primitive`\n};\n\nexport const Class = {\n  CONSOLE_ITEM_HEAD: `item__head`,\n  CONSOLE_ITEM_POINTER: `item_pointer`,\n  CONSOLE_ITEM_HEAD_SHOW: `item__head_show`,\n  ENTRY_CONTAINER_BRACED: `entry-container_braced`,\n  ENTRY_CONTAINER_OVERSIZE: `entry-container_oversize`,\n  CONSOLE_ITEM_HEAD_PARENTHESED: `item__head_parenthesed`,\n  CONSOLE_ITEM_HEAD_INFO: `item__head-info`,\n  CONSOLE_ITEM_HEAD_ELEMENTS: `item__head-elements`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_SHOW: `item__head-elements_show`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER: `item-content-container`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW: `item-content-container_show`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH: `item__head-elements-length`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW: `item__head-elements-length_show`\n};\n","/* eslint guard-for-in: \"off\"*/\nimport AbstractView from './abstract-view';\nimport {getElement} from './utils';\nimport {Mode} from './enums';\n\nconst toggleMiddleware = (el, className, isEnable) => {\n  if (typeof isEnable === `undefined`) {\n    return el.classList.toggle(className);\n  }\n  if (isEnable) {\n    el.classList.add(className);\n    return true;\n  } else {\n    el.classList.remove(className);\n    return false;\n  }\n};\n\nexport default class TypeView extends AbstractView {\n  constructor(params, cons) {\n    super();\n    if (params.parentView) {\n      this._parentView = params.parentView;\n      this._rootViewType = params.parentView._rootViewType;\n    }\n    this._viewType = null;\n    this._console = cons;\n    this._value = params.val;\n    this._mode = params.mode;\n    this._type = params.type;\n    this._isOpened = false;\n    this._currentDepth = typeof params.depth === `number` ? params.depth : 1;\n    this._templateParams = {};\n  }\n\n  get template() {\n    return `\\\n<div class=\"console__item item item--${this._viewType}\">\\\n  <div class=\"item__head\">\\\n    <span class=\"item__head-info\"></span>\\\n    ${this._templateParams.withHeadContentlength ? `<span class=\"item__head-content-length\">${this.value.length}</span>` : ``}\\\n    <div class=\"item__head-content entry-container entry-container--head entry-container--${this._viewType}\"></div>\\\n  </div>\\\n  <div class=\"item__content entry-container entry-container--${this._viewType}\"></div>\\\n</div>`;\n  }\n\n  afterRender() {}\n\n  bind() {\n    if (!this._templateParams.onlyWrapper) {\n      this._headEl = this.el.querySelector(`.item__head`);\n      this._headContentEl = this._headEl.querySelector(`.item__head-content`);\n      this._headInfoEl = this._headEl.querySelector(`.item__head-info`);\n      if (this._templateParams.withHeadContentlength) {\n        this._headContentLengthEl = this._headEl.querySelector(`.item__head-content-length`);\n      }\n\n      this._contentEl = this.el.querySelector(`.item__content`);\n    }\n    this.afterRender();\n  }\n\n  set state(params) {\n    if (!this._state) {\n      this._state = {};\n      Object.defineProperties(\n          this._state,\n          Object.getOwnPropertyDescriptors(this._getStateCommonProxyObject())\n      );\n      Object.defineProperties(\n          this._state,\n          Object.getOwnPropertyDescriptors(this._getStateProxyObject())\n      );\n      Object.seal(this._state);\n    }\n    for (let key in params) {\n      this._state[key] = params[key];\n    }\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  /**\n   * @abstract\n   * @return {{}} if not overriden return object without descriptors\n   */\n  _getStateProxyObject() {\n    return {};\n  }\n\n  _getStateCommonProxyObject() {\n    const self = this;\n    return {\n      set isShowInfo(bool) {\n        self.toggleInfoShowed(bool);\n      },\n      set isShowLength(bool) {\n        self.toggleContentLengthShowed(bool);\n      },\n      set isHeadContentShowed(bool) {\n        self.toggleHeadContentShowed(bool);\n      },\n      set isOpeningDisabled(bool) {\n        if (self._mode === Mode.PREVIEW || self._isOpeningDisabled === bool) {\n          return;\n        }\n        if (bool) {\n          self.state.isContentShowed = false;\n          self._addOrRemoveHeadClickHandler(false);\n        } else {\n          if (self._isAutoExpandNeeded) {\n            self.state.isContentShowed = true;\n          }\n          self._addOrRemoveHeadClickHandler(true);\n        }\n        self._isOpeningDisabled = bool;\n      },\n      get isOpeningDisabled() {\n        return self._isOpeningDisabled;\n      },\n      set isContentShowed(bool) {\n        self._isContentShowed = self.toggleContentShowed(bool);\n        if (self._isContentShowed && self._contentEl.childElementCount === 0) {\n          self._contentEl.appendChild(self.createContent(self.value, false).fragment);\n        }\n      },\n      get isContentShowed() {\n        return self._isContentShowed;\n      }\n    };\n  }\n\n  toggleHeadContentBraced(isEnable) {\n    return toggleMiddleware(this._headContentEl, `entry-container--braced`, isEnable);\n  }\n\n  toggleHeadContentOversized(isEnable) {\n    return toggleMiddleware(this._headContentEl, `entry-container--oversize`, isEnable);\n  }\n\n  toggleInfoShowed(isEnable) {\n    return toggleMiddleware(this._headInfoEl, `item__head-info--show`, isEnable);\n  }\n\n  toggleContentLengthShowed(isEnable) {\n    return toggleMiddleware(this._headContentLengthEl, `item__head-content-length--show`, isEnable);\n  }\n\n  toggleHeadContentShowed(isEnable) {\n    return toggleMiddleware(this._headContentEl, `item__head-content--show`, isEnable);\n  }\n\n  toggleContentShowed(isEnable) {\n    return toggleMiddleware(this.el, `item--show-content`, isEnable);\n  }\n\n  toggleError(isEnable) {\n    return toggleMiddleware(this.el, Mode.ERROR, isEnable);\n  }\n\n  toggleItalic(isEnable) {\n    return toggleMiddleware(this._headEl, `item__head--italic`, isEnable);\n  }\n\n  _toggleCursorPointer(isEnable) {\n    return toggleMiddleware(this._headEl, `item__head--pointer`, isEnable);\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get mode() {\n    return this._mode;\n  }\n\n  get nextNestingLevel() {\n    return this._currentDepth + 1;\n  }\n\n  get _isAutoExpandNeeded() {\n    if (!this._isAutoExpandNeededProxied) {\n      this._isAutoExpandNeededProxied = false;\n\n      if (this._viewType === null ||\n        this._currentDepth > this._console.params[this._rootViewType].expandDepth) {\n        return this._isAutoExpandNeededProxied;\n      }\n\n      let rootFieldsMoreThanNeed = false;\n      if (this._parentView && this._parentView._isAutoExpandNeeded) {\n        rootFieldsMoreThanNeed = true;\n      } else if (Object.keys(this.value).length >= // Object.getOwnPropertyNames\n      this._console.params[this._rootViewType].minFieldsToExpand) {\n        rootFieldsMoreThanNeed = true;\n      }\n\n      if (rootFieldsMoreThanNeed &&\n      !this._console.params[this._rootViewType].exclude.includes(this._viewType)) {\n        this._isAutoExpandNeededProxied = true;\n      }\n    }\n    return this._isAutoExpandNeededProxied;\n  }\n\n  _additionHeadClickHandler() {}\n\n  _headClickHandler(evt) {\n    evt.preventDefault();\n    this.state.isContentShowed = !this.state.isContentShowed;\n    this._additionHeadClickHandler();\n  }\n\n  _addOrRemoveHeadClickHandler(bool) {\n    this._toggleCursorPointer(bool);\n    if (!this._bindedHeadClickHandler) {\n      this._bindedHeadClickHandler = this._headClickHandler.bind(this);\n    }\n    if (bool) {\n      this._headEl.addEventListener(`click`, this._bindedHeadClickHandler);\n    } else {\n      this._headEl.removeEventListener(`click`, this._bindedHeadClickHandler);\n    }\n  }\n\n  static createEntryEl(index, valueEl, withoutKey) {\n    const entryEl = getElement(`\\\n<span class=\"entry-container__entry\">\\\n  ${withoutKey ? `` : `<span class=\"entry-container__key\">${index}</span>`}<span class=\"entry-container__value-container\"></span>\\\n</span>`);\n    const valueContEl = entryEl.querySelector(`.entry-container__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","/* eslint guard-for-in: \"off\"*/\n/* eslint no-empty: \"off\"*/\nimport TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nexport default class ObjectView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this._viewType = ViewType.OBJECT;\n    if (!params.parentView) {\n      this._rootViewType = this._viewType;\n    }\n    const stringTag = Object.prototype.toString.call(this.value);\n    this._stringTagName = stringTag.substring(8, stringTag.length - 1);\n    this._constructorName = this.value.constructor.name;\n  }\n\n  afterRender() {\n    const {elOrStr, stateParams, headContentClassName} = this._getHeadContent();\n    this._headContent = elOrStr;\n\n    if (headContentClassName) {\n      this._headContentEl.classList.add(headContentClassName);\n    }\n\n    if (this._constructorName === `Object` && this._stringTagName !== `Object`) {\n      this._headInfoEl.textContent = this._stringTagName;\n    } else {\n      this._headInfoEl.textContent = this._constructorName;\n    }\n\n    this.state = stateParams;\n    window.consoleViews.set(this.el, this);\n  }\n\n  _getStateProxyObject() {\n    const self = this;\n    return {\n      set isShowInfo(bool) {\n        self.toggleInfoShowed(bool);\n      },\n      set isHeadContentShowed(bool) {\n        if (!self._headContentEl.innerHTML) {\n          if (self._headContent instanceof HTMLElement || self._headContent instanceof DocumentFragment) {\n            self._headContentEl.appendChild(self._headContent);\n          } else {\n            self._headContentEl.innerHTML = self._headContent;\n          }\n        }\n        self.toggleHeadContentShowed(bool);\n      },\n      set isBraced(bool) {\n        self.toggleHeadContentBraced(bool);\n      },\n      set isOversized(bool) {\n        self.toggleHeadContentOversized(bool);\n      },\n      set isStringified(bool) {\n        if (!bool && (self._mode === Mode.LOG || self._mode === Mode.ERROR) && !self._parentView) {\n          self.toggleItalic(bool);\n        }\n        if (bool && self._mode === Mode.ERROR) {\n          self.toggleError(bool);\n        }\n      },\n    };\n  }\n\n  _getHeadContent() {\n    let obj;\n    if (this._mode === Mode.DIR) {\n      obj = this._getHeadDirContent();\n    } else if (this._mode === Mode.LOG || this._mode === Mode.PROP || this._mode === Mode.ERROR) {\n      obj = this._getHeadLogContent();\n    } else if (this._mode === Mode.PREVIEW) {\n      obj = this._getHeadPreviewContent();\n    }\n    return obj;\n  }\n\n  _getHeadPreviewContent() {\n    if (this._stringTagName === `Object`) {\n      return {\n        elOrStr: `...`,\n        stateParams: {\n          isShowInfo: false,\n          isHeadContentShowed: true,\n          isBraced: true\n        }\n      };\n    }\n    return this._getHeadDirContent();\n  }\n\n  _getHeadLogContent() {\n    let val;\n    let isShowInfo = false;\n    let isBraced = true;\n    let isOpeningDisabled = false;\n    let isOversized = false;\n    let isStringified = false;\n    let headContentClassName;\n\n    if (this.value instanceof HTMLElement && Object.getPrototypeOf(this.value).constructor !== HTMLElement) {\n      return this._getHeadDirContent();\n    } else if (this.value instanceof Error) {\n      isBraced = false;\n      val = this.value.toString();\n      isStringified = true;\n    } else if (this.value instanceof Number) {\n      const view = this._console.createTypedView(Number.parseInt(this.value, 10), Mode.PREVIEW, this.nextNestingLevel, this);\n      val = view.el;\n      isShowInfo = true;\n    } else if (this.value instanceof String) {\n      const view = this._console.createTypedView(this.value.toString(), Mode.PREVIEW, this.nextNestingLevel, this);\n      val = view.el;\n      isShowInfo = true;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n      isStringified = true;\n      isBraced = false;\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n      headContentClassName = `regexp`;\n      isOpeningDisabled = true;\n      isBraced = false;\n    } else {\n      const obj = this.createContent(this.value, true);\n      val = obj.fragment;\n      isOversized = obj.isOversized;\n      if (this._stringTagName !== `Object` || this._constructorName !== `Object`) {\n        isShowInfo = true;\n      }\n    }\n    return {\n      elOrStr: val,\n      headContentClassName,\n      stateParams: {\n        isShowInfo,\n        isHeadContentShowed: true,\n        isBraced,\n        isOpeningDisabled,\n        isOversized,\n        isStringified\n      }\n    };\n  }\n\n  _getHeadDirContent() {\n    let val;\n    let isShowInfo = false;\n    let isHeadContentShowed = true;\n    let isBraced = false;\n    if (this.value instanceof HTMLElement) {\n      let str = this.value.tagName.toLowerCase();\n      str += this.value.id;\n      if (this.value.classList.length) {\n        str += `.` + Array.prototype.join.call(this.value.classList, `.`);\n      }\n      val = str;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n    } else if (this.value instanceof Error) {\n      val = this.value.toString();\n    } else {\n      val = this.value;\n      isShowInfo = true;\n      isHeadContentShowed = false;\n    }\n    return {\n      elOrStr: val,\n      stateParams: {\n        isShowInfo,\n        isHeadContentShowed,\n        isBraced,\n        isOpeningDisabled: false\n      }\n    };\n  }\n\n  createContent(obj, isPreview) {\n    const fragment = document.createDocumentFragment();\n    const addedKeys = new Set();\n    // TODO: Добавить счётчик, чтобы больше 5 значений не добавлялось\n    for (let key in obj) {\n      if (isPreview && !obj.hasOwnProperty(key)) { // Перечисляемые свои\n        continue;\n      }\n      if (isPreview && addedKeys.size === this._console.params[this._viewType].maxFieldsInHead) {\n        return {\n          fragment,\n          isOversized: true\n        };\n      }\n      try {\n        const val = obj[key];\n        fragment.appendChild(this._createObjectEntryEl(key, val, isPreview));\n        addedKeys.add(key);\n      } catch (err) {}\n    }\n    const ownPropertyNamesAndSymbols = Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n    for (let key of ownPropertyNamesAndSymbols) { // Неперечисляемые свои\n      if (addedKeys.has(key)) {\n        continue;\n      }\n      if (isPreview && addedKeys.size === this._console.params[this._viewType].maxFieldsInHead) {\n        return {\n          fragment,\n          isOversized: true\n        };\n      }\n      try {\n        const val = obj[key];\n        fragment.appendChild(this._createObjectEntryEl(key, val, isPreview));\n        addedKeys.add(key);\n      } catch (err) {}\n    }\n    return {\n      fragment,\n      isOversized: false\n    };\n  }\n\n  _createObjectEntryEl(key, val, isPreview) {\n    const view = this._console.createTypedView(val, isPreview ? Mode.PREVIEW : Mode.PROP, this.nextNestingLevel, this);\n    return ObjectView.createEntryEl(key.toString(), view.el);\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nexport default class ArrayView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this._viewType = ViewType.ARRAY;\n    if (!params.parentView) {\n      this._rootViewType = this._viewType;\n    }\n\n    this._templateParams.withHeadContentlength = true;\n  }\n\n  afterRender() {\n    this.toggleHeadContentBraced();\n    this._headInfoEl.textContent = this.value.constructor.name;\n    this.state = this._getStateParams();\n\n    if ((this._mode === Mode.LOG || this._mode === Mode.ERROR) && !this._parentView) {\n      this.toggleItalic(true);\n    }\n  }\n\n  _getStateProxyObject() {\n    const self = this;\n    return {\n      set isHeadContentShowed(bool) {\n        if (bool && self._headContentEl.childElementCount === 0) {\n          self._headContentEl.appendChild(self.createContent(self.value, true).fragment);\n        }\n        self.toggleHeadContentShowed(bool);\n      },\n      set isContentShowed(bool) {\n        self._isContentShowed = self.toggleContentShowed(bool);\n        if (self._mode === Mode.PROP) {\n          self.state.isShowInfo = bool;\n          self.state.isHeadContentShowed = !bool;\n          self.state.isShowLength = bool || self.value.length > 1;\n        }\n        if (self._isContentShowed && self._contentEl.childElementCount === 0) {\n          self._contentEl.appendChild(self.createContent(self.value, false).fragment);\n        }\n      },\n      get isContentShowed() {\n        return self._isContentShowed;\n      }\n    };\n  }\n\n  _getStateParams() {\n    let isShowInfo = false;\n    let isHeadContentShowed = true;\n    let isShowLength = this.value.length > 1;\n    if (this._mode === Mode.DIR) {\n      isShowInfo = true;\n      isHeadContentShowed = false;\n      isShowLength = true;\n    } else if (this._mode === Mode.PREVIEW) {\n      isShowInfo = true;\n      isHeadContentShowed = false;\n      isShowLength = true;\n    } else if (this._mode === Mode.PROP) {\n      isShowInfo = false;\n      isHeadContentShowed = true;\n    }\n    return {\n      isShowInfo,\n      isHeadContentShowed,\n      isShowLength,\n      isOpeningDisabled: false\n    };\n  }\n\n  createContent(arr, isPreview) {\n    const keys = Object.keys(arr);\n    const addedKeys = new Set();\n    const fragment = document.createDocumentFragment();\n    for (let key of keys) {\n      addedKeys.add(key);\n      const val = arr[key];\n      fragment.appendChild(this._createArrayEntryEl(key, val, isPreview));\n    }\n    for (let key of Object.getOwnPropertyNames(arr)) {\n      if (addedKeys.has(key)) {\n        continue;\n      }\n      if (isPreview && keys.indexOf(key) === -1) {\n        continue;\n      }\n      const val = arr[key];\n      fragment.appendChild(this._createArrayEntryEl(key, val, isPreview));\n    }\n    return {fragment};\n  }\n\n  _createArrayEntryEl(key, val, isPreview) {\n    const isKeyNaN = Number.isNaN(Number.parseInt(key, 10));\n    const view = this._console.createTypedView(val, isPreview ? Mode.PREVIEW : Mode.PROP, this.nextNestingLevel, this);\n    return ArrayView.createEntryEl(key.toString(), view.el, isPreview ? !isKeyNaN : isPreview);\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nconst MAX_PREVIEW_FN_BODY_LENGTH = 43;\n\nconst FnType = {\n  PLAIN: `plain`,\n  ARROW: `arrow`,\n  CLASS: `class`\n};\n\n// arguments, caller, length, name, prototype, __proto__, [[FunctionLocation]], [[Scopes]]\n\n// if .caller not accessed — не выводим\n// if prototype undefined — не выводим\n// name — если неименованная — получает имя переменной, в которую записана\n// если именнованная — то имя ф-ии\n\nexport default class FunctionView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this._viewType = ViewType.FUNCTION;\n    if (!params.parentView) {\n      this._rootViewType = this._viewType;\n    }\n    this._fnType = FunctionView.checkFnType(this.value);\n  }\n\n  afterRender() {\n    this._headEl.classList.add(`item__head--italic`);\n    this._headInfoEl.classList.add(`item__head-info--function`);\n    switch (this._fnType) {\n      case FnType.CLASS:\n        this._headInfoEl.textContent = `class`;\n        break;\n      case FnType.PLAIN:\n      case FnType.ARROW:\n        this._headInfoEl.textContent = `f`;\n        break;\n    }\n    let isShowInfo = false;\n    if (this._fnType !== FnType.ARROW) {\n      isShowInfo = true;\n    }\n    switch (this._mode) {\n      case Mode.PROP:\n        this._headContentEl.innerHTML = this._getHeadPropMarkup();\n        break;\n      case Mode.DIR:\n        this._headContentEl.innerHTML = this._getHeadDirMarkup();\n        break;\n      case Mode.LOG:\n      case Mode.ERROR:\n        this._headContentEl.innerHTML = this._getHeadLogMarkup();\n        break;\n      case Mode.PREVIEW:\n        isShowInfo = true;\n        break;\n    }\n    const params = {\n      isOpeningDisabled: false,\n      isShowInfo,\n      isHeadContentShowed: this._mode !== Mode.PREVIEW\n    };\n    if (this._mode !== Mode.DIR && this._mode !== Mode.PROP) {\n      params.isOpeningDisabled = true;\n    }\n    this.state = params;\n  }\n\n  _getHeadPropMarkup() {\n    const {name, params, lines} = this.parseFunction(this.value);\n    const joinedLines = lines.join(`\\n`);\n\n    let markup = `\\\n<span>\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}`;\n    if (this._fnType !== FnType.CLASS) {\n      markup += `${joinedLines.length <= MAX_PREVIEW_FN_BODY_LENGTH ? joinedLines : `{...}`}`;\n    }\n    markup += `</span>`;\n    return markup;\n  }\n\n  _getHeadDirMarkup() {\n    const {name, params} = this.parseFunction(this.value);\n\n    let markup = `\\\n${name ? name : ``}\\\n${this._fnType === FnType.PLAIN ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? `()` : ``}`;\n    return markup;\n  }\n\n  _getHeadLogMarkup() {\n    const {name, params, lines} = this.parseFunction(this.value);\n    return `\\\n<pre>\\\n${name && this._fnType !== FnType.ARROW ? `${name} ` : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}${lines.join(`\\n`)}\\\n</pre>`;\n  }\n\n  parseParams(funString) {\n    const paramsStart = funString.indexOf(`(`);\n    const paramsEnd = funString.indexOf(`)`);\n\n    const paramsContent = funString.substring(paramsStart + 1, paramsEnd).trim();\n\n    return paramsContent ? paramsContent.split(`,`).map((it) => it.trim()) : [];\n  }\n\n  parseName(funString) {\n    let endingChar;\n    if (this._fnType === FnType.CLASS) {\n      endingChar = `{`;\n    } else if (this._fnType === FnType.PLAIN) {\n      endingChar = `(`;\n    }\n    let name;\n    const re = new RegExp(`(?:class|function)\\\\s+(\\\\w+)\\\\s*(?:\\\\${endingChar})`);\n    const ex = re.exec(funString);\n    if (ex !== null) {\n      name = ex[1];\n    }\n    return name;\n  }\n\n  parseBody(funString) {\n    const bodyStart = funString.indexOf(`{`);\n    const bodyEnd = funString.lastIndexOf(`}`);\n\n    const bodyContent = funString.substring(bodyStart, bodyEnd + 1).trim();\n\n    if (!bodyContent) {\n      return [];\n    }\n\n    return bodyContent.split(`\\n`);\n  }\n\n  parseFunction(fnOrString) {\n    let str;\n    if (typeof fnOrString !== `string`) {\n      str = fnOrString.toString();\n    }\n    return {\n      name: fnOrString.name, // this.parseName(str),\n      params: this.parseParams(str),\n      lines: this.parseBody(str)\n    };\n  }\n\n  createContent(fn) {\n    const fragment = document.createDocumentFragment();\n    const fnKeys = [`name`, `prototype`, `length`, `__proto__`];\n    const keys = Object.keys(fn).concat(fnKeys);\n    for (let key of keys) {\n      let value;\n      try {\n        const tempValue = fn[key];\n        if (typeof tempValue !== `undefined`) {\n          value = tempValue;\n        } else {\n          continue;\n        }\n      } catch (err) {\n        continue;\n      }\n      const view = this._console.createTypedView(value, Mode.PROP, this.nextNestingLevel, this);\n      const entryEl = FunctionView.createEntryEl(key.toString(), view.el);\n      fragment.appendChild(entryEl);\n    }\n    return {fragment};\n  }\n\n  static checkFnType(fn) {\n    let str = fn.toString();\n    const firstParenthesisIndex = str.indexOf(`(`);\n\n    const classIndex = str.indexOf(`class`);\n    const arrowIndex = str.indexOf(`=>`);\n    if (classIndex !== -1 && classIndex < firstParenthesisIndex) {\n      return FnType.CLASS;\n    } else if (arrowIndex !== -1 && arrowIndex > firstParenthesisIndex) {\n      return FnType.ARROW;\n    }\n    return FnType.PLAIN;\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nexport default class PrimitiveView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this._viewType = ViewType.PRIMITIVE;\n  }\n\n  get template() {\n    const type = this._type;\n    let value = this.value;\n    let html = ``;\n    if (type === `string` || type === `symbol`) {\n      if (type === `symbol`) {\n        value = value.toString();\n      }\n      value = this.escapeHtml(value);\n    }\n    switch (type) {\n      case `undefined`:\n      case `null`:\n      case `boolean`:\n        html = `<div class=\"console__item item item--primitive ${type}\">${value}</div>`;\n        break;\n\n      case `number`:\n        if (Number.isNaN(value)) {\n          html = `<div class=\"console__item item item--primitive NaN\">NaN</div>`;\n        } else if ((value === Infinity || value === -Infinity)) {\n          html = `<div class=\"console__item item item--primitive number\">${(value === -Infinity ? `-` : ``)}Infinity</div>`;\n        } else {\n          html = `<div class=\"console__item item item--primitive ${type}\">${value}</div>`;\n        }\n        break;\n\n      case `string`:\n        let str;\n        if (this._mode === Mode.PREVIEW && value.length > 100) {\n          str = `${value.substr(0, 50)}...${value.substr(-50)}`;\n        } else {\n          str = value;\n        }\n        html = `<pre class=\"console__item item item--primitive string ${this._mode === Mode.PROP || this._mode === Mode.PREVIEW ? `string--nowrap` : ``} ${this._mode === Mode.PROP ? `pointer` : ``} ${this._mode === Mode.ERROR ? `${this._mode}` : ``}\">${str}</pre>`;\n        break;\n      case `symbol`:\n        html = `<div class=\"console__item item item--primitive symbol\">${value}</div>`;\n        break;\n\n      case `object`:\n        if (value === null) {\n          html = `<div class=\"console__item item item--primitive null\">${value}</div>`;\n          break;\n        }\n    }\n    return html;\n  }\n\n  bind() {\n    if (this._mode === Mode.PROP && this._type === `string`) {\n      this.el.addEventListener(`click`, (evt) => {\n        evt.preventDefault();\n        this.el.classList.toggle(`string--nowrap`);\n      });\n    }\n  }\n\n  escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, `&amp;`)\n        .replace(/</g, `&lt;`)\n        .replace(/>/g, `&gt;`)\n        .replace(/\"/g, `&quot;`)\n        .replace(/'/g, `&#039;`);\n  }\n}\n","import ObjectView from './object/object-view';\nimport ArrayView from './array/array-view';\nimport FunctionView from './function/function-view';\nimport PrimitiveView from './primitive/primitive-view';\nimport {getElement} from './utils';\nimport {Mode, ViewType} from './enums';\n\nconst MAX_HEAD_ELEMENTS_LENGTH = 5;\n\n/**\n * Console\n * @class\n */\nexport default class Console {\n  /**\n   * Initialize console into container\n   * @param {HTMLElement} container — console container\n   * @param {{}} params — parameters\n   * @property {number} params.minFieldsToExpand — min number of fields in obj to expand\n   * @property {number} params.maxFieldsInHead — max number of preview fields inside head\n   * @property {number} params.expandDepth — level of depth to expand\n   **/\n  constructor(container, params = {}) {\n    if (!container) {\n      throw new Error(`Console is not inited!`);\n    }\n    window.consoleViews = new Map();\n    this._container = container;\n    this.params = {\n      object: this._parseParams(params.object, `object`),\n      array: this._parseParams(params.array, `array`),\n      function: this._parseParams(params.function, `function`)\n    };\n  }\n\n  _parseParams(paramsObject, paramName) {\n    if (paramsObject) {\n      // Set this._expandDepth and this._minFieldsToExpand only if expandDepth provided and > 0\n      if (typeof paramsObject.expandDepth === `number` &&\n      paramsObject.expandDepth > 0) {\n\n        paramsObject.minFieldsToExpand = (\n          typeof paramsObject.minFieldsToExpand === `number` &&\n          paramsObject.minFieldsToExpand > 0\n        ) ? paramsObject.minFieldsToExpand : 0;\n      }\n\n      paramsObject.maxFieldsInHead = (\n        typeof paramsObject.maxFieldsInHead === `number` &&\n        paramsObject.maxFieldsInHead > 0\n      ) ? paramsObject.maxFieldsInHead : MAX_HEAD_ELEMENTS_LENGTH;\n    } else {\n      paramsObject = {};\n      if (paramName === `object`) {\n        paramsObject.maxFieldsInHead = MAX_HEAD_ELEMENTS_LENGTH;\n      }\n    }\n    if (!Array.isArray(paramsObject.exclude)) {\n      paramsObject.exclude = [];\n    } else {\n      const availableTypes = [];\n      for (let key in ViewType) {\n        if (ViewType.hasOwnProperty(key)) {\n          const type = ViewType[key];\n          availableTypes.push(type);\n        }\n      }\n      if (!paramsObject.exclude.every((type) => availableTypes.includes(type))) {\n        throw new Error(`Provided type to exclude is not in available types`);\n      }\n    }\n    return paramsObject;\n  }\n\n  /**\n   * Subscribe on log event fired\n   * @abstract\n   **/\n  onlog() {}\n\n  /**\n   * Subscribe on dir event fired\n   * @abstract\n   **/\n  ondir() {}\n\n  /**\n   * Subscribe on error event fired\n   * @abstract\n   **/\n  onerror() {}\n\n  /**\n   * Equivalent to console.log\n   * Push rest of arguments into container\n   */\n  log(...rest) {\n    this._container.appendChild(this._getRowEl(rest, Mode.LOG));\n    this.onlog();\n  }\n\n  /**\n   * Equivalent to console.error\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  error(val) {\n    const el = getElement(`<div class=\"console__row console__row--error\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.ERROR).el);\n    this._container.appendChild(el);\n    this.onerror();\n  }\n\n  /**\n   * Equivalent to console.dir\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  dir(val) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.DIR).el);\n    this._container.appendChild(el);\n    this.ondir();\n  }\n\n  /**\n   * Clean container\n   */\n  clean() {\n    this._container.innerHTML = ``;\n  }\n\n  createTypedView(val, mode, depth, parentView) {\n    const params = {val, mode, depth, parentView, type: typeof val};\n    let view;\n    switch (params.type) {\n      case `function`:\n        view = new FunctionView(params, this);\n        break;\n      case `object`:\n        if (val !== null) {\n          if (Array.isArray(val)) {\n            view = new ArrayView(params, this);\n          } else {\n            view = new ObjectView(params, this);\n          }\n        } else {\n          view = new PrimitiveView(params, this);\n        }\n        break;\n      default:\n        view = new PrimitiveView(params, this);\n        break;\n    }\n    return view;\n  }\n\n  _getRowEl(entries, mode) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    entries.forEach((val) => {\n      el.appendChild(this.createTypedView(val, mode).el);\n    });\n    return el;\n  }\n\n  /**\n   * get innerHTML of container\n   */\n  get sourceLog() {\n    return this._container.innerHTML;\n  }\n\n  /**\n   * Extend console\n   * @param {{}} consoleObject\n   * @return {{}} extended console\n   */\n  extend(consoleObject) {\n    consoleObject.log = this.log.bind(this);\n    consoleObject.info = this.log.bind(this);\n\n    consoleObject.error = this.error.bind(this);\n    consoleObject.warn = this.error.bind(this);\n\n    consoleObject.dir = this.dir.bind(this);\n    return consoleObject;\n  }\n}\n","import Console from './main';\n\nwindow.Console = Console;\n"]}