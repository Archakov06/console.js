{"version":3,"sources":["js/utils.js","js/abstract-view.js","js/enums.js","js/type-view.js","js/object/object-view.js","js/array/array-view.js","js/function/function-view.js","js/primitive/primitive-view.js","js/main.js","js/index.js"],"names":["getElement","htmlMarkup","div","document","createElement","innerHTML","firstElementChild","AbstractView","this","template","_el","render","bind","Mode","Class","TypeView","consoleExemplar","val","_ref","mode","_value","_mode","_consoleExemplar","_isOpened","toString","_proxiedContentEl","appendChild","createContent","value","fragment","_contentContainerEl","classList","toggle","style","display","headEl","_setCursorPointer","addEventListener","evt","preventDefault","_toggleContent","_additionHeadClickHandler","el","add","index","valueEl","withoutKey","entryEl","querySelector","ObjectView","_entries","Map","headElementsEl","headInfoEl","_getHeadContent","elOrStr","_getHeadContent2","isShowConstructor","isShowElements","isBraced","isOpeningDisabled","isOversize","isStringified","HTMLElement","DocumentFragment","_setHeadClickHandler","_getHeadDirContent","_getHeadLogContent","_getHeadPreviewContent","Object","prototype","call","Error","Number","createTypedView","parseInt","String","Date","RegExp","source","flags","obj","constructor","str","tagName","toLowerCase","id","length","Array","join","isPreview","createDocumentFragment","keys","Set","key","size","view","createEntryEl","_step","getOwnPropertyNames","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","has","name","ArrayView","_elements","headElementsLengthEl","isShowLength","_toggleConstructor","_toggleHeadElements","_toggleLength","_getHeadErrorContent","arr","ownPropertyNames","indexInKeys","indexOf","isKeyNaN","isNaN","FnType","FunctionView","_fnType","checkFnType","parseFunction","_parseFunction","params","joinedLines","lines","markup","_parseFunction2","funString","paramsStart","paramsEnd","paramsContent","substring","trim","split","map","it","endingChar","ex","exec","bodyStart","bodyEnd","lastIndexOf","bodyContent","fnOrString","parseParams","parseBody","fn","err","tpl","_getHeadPropMarkup","_getHeadDirMarkup","_getLogMarkup","firstParenthesisIndex","classIndex","arrowIndex","STRING_COLLAPSED","PrimitiveView","type","_type","unsafe","replace","html","escapeHtml","Infinity","Console","container","_container","expandFields","expandDepth","_expandFields","_expandDepth","rest","_len","_key","arguments","_getRowEl","onlog","onerror","ondir","_typeof","isArray","entries","forEach","_this","consoleObject","log","info","error","warn","dir","window","jsConsole"],"mappings":"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","file":"index.js","sourcesContent":["export const getElement = (htmlMarkup) => {\n  const div = document.createElement(`div`);\n  div.innerHTML = htmlMarkup;\n  return div.firstElementChild;\n};\n","import {getElement} from './utils';\n\nexport default class AbstractView {\n  constructor() {}\n\n  /**\n   * @abstract\n   * @return {string}\n   */\n  get template() {}\n\n  get el() {\n    if (!this._el) {\n      this._el = this.render();\n      this.bind(this._el);\n    }\n    return this._el;\n  }\n\n  render() {\n    return getElement(this.template);\n  }\n\n  bind() {}\n}\n","export const Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  PROP: `prop`,\n  ERROR: `error`\n};\n\nexport const Class = {\n  CONSOLE_ITEM_HEAD: `item-head`,\n  CONSOLE_ITEM_POINTER: `item_pointer`,\n  CONSOLE_ITEM_HEAD_SHOW: `item-head_show`,\n  ENTRY_CONTAINER_BRACED: `entry-container_braced`,\n  ENTRY_CONTAINER_OVERSIZE: `entry-container_oversize`,\n  CONSOLE_ITEM_HEAD_PARENTHESED: `item-head_parenthesed`,\n  CONSOLE_ITEM_HEAD_INFO: `item-head-info`,\n  CONSOLE_ITEM_HEAD_ELEMENTS: `item-head-elements`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_SHOW: `item-head-elements_show`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER: `item-content-container`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW: `item-content-container_show`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH: `item-head-elements-length`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW: `item-head-elements-length_show`\n};\n","import AbstractView from './abstract-view';\nimport {getElement} from './utils';\nimport {Class} from './enums';\n\nexport default class TypeView extends AbstractView {\n  constructor({val, mode}, consoleExemplar) {\n    super();\n    this._value = val;\n    this._mode = mode;\n    this._consoleExemplar = consoleExemplar;\n    this._isOpened = false;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get mode() {\n    return this._mode;\n  }\n\n  _getHeadErrorContent() {\n    return {\n      elOrStr: this._value.toString(),\n      isShowConstructor: false,\n      isShowElements: true\n    };\n  }\n\n  _toggleContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item item-content\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value, false).fragment);\n      this._contentContainerEl.appendChild(this._proxiedContentEl);\n    }\n    this._contentContainerEl.classList.toggle(Class.CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW);\n  }\n\n  _hideContent() {\n    this._proxiedContentEl.style.display = `none`;\n  }\n\n  _additionHeadClickHandler() {}\n\n  _setHeadClickHandler(headEl) {\n    this._setCursorPointer();\n    headEl.addEventListener(`click`, (evt) => {\n      evt.preventDefault();\n      this._toggleContent();\n      this._additionHeadClickHandler();\n    });\n  }\n\n  _setCursorPointer() {\n    this.el.classList.add(Class.CONSOLE_ITEM_POINTER);\n  }\n\n  static createEntryEl(index, valueEl, withoutKey) {\n    const entryEl = getElement(`\\\n<span class=\"entry-container__entry\">\\\n  ${withoutKey ? `` : `<span class=\"entry-container__key\">${index}</span>`}<span class=\"entry-container__value-container\"></span>\\\n</span>`);\n    const valueContEl = entryEl.querySelector(`.entry-container__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","/* eslint guard-for-in: \"off\"*/\nimport TypeView from '../type-view';\n// import {createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nconst MAX_HEAD_ELEMENTS_LENGTH = 5;\n\nexport default class ObjectView extends TypeView {\n  constructor({val, mode}, consoleExemplar) {\n    super({val, mode}, consoleExemplar);\n    this._entries = new Map();\n    this._isOpened = false;\n  }\n\n  /**\n   * Шаблон\n   * @override\n   * Чтобы окружить фигурными скобками тело объекта, добавьте к элемену с классом\n   * Class.CONSOLE_ITEM_CONTENT_CONTAINTER\n   * класс\n   * Class.ENTRY_CONTAINER_BRACED\n   *\n   **/\n  get template() {\n    return `\\\n<div class=\"console__item item item_object\">\\\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\">\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">${this.value.constructor.name}</span>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS} entry-container entry-container_head entry-container_type_object\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container entry-container_type_object\"></div>\n</div>`;\n  }\n\n  bind() {\n    const headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    const headElementsEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    const headInfoEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_INFO}`);\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n\n    const {elOrStr, isShowConstructor, isShowElements, isBraced, isOpeningDisabled, isOversize, isStringified} = this._getHeadContent();\n    if (isBraced) {\n      headElementsEl.classList.add(Class.ENTRY_CONTAINER_BRACED);\n    }\n    if (isOversize) {\n      headElementsEl.classList.add(Class.ENTRY_CONTAINER_OVERSIZE);\n    }\n    if (isShowConstructor) {\n      headInfoEl.classList.add(Class.CONSOLE_ITEM_HEAD_SHOW);\n    }\n    if (isShowElements) {\n      if (elOrStr instanceof HTMLElement || elOrStr instanceof DocumentFragment) {\n        headElementsEl.appendChild(elOrStr);\n      } else {\n        headElementsEl.innerHTML = elOrStr;\n      }\n      headElementsEl.classList.add(Class.CONSOLE_ITEM_HEAD_ELEMENTS_SHOW);\n    }\n\n    if (this._mode === Mode.ERROR && isStringified) {\n      this.el.classList.add(this._mode);\n    }\n\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    if (!isOpeningDisabled) {\n      this._setHeadClickHandler(headEl);\n    }\n  }\n\n  _getHeadContent() {\n    if (this._mode === Mode.DIR) {\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.LOG || this._mode === Mode.PROP || this._mode === Mode.ERROR) {\n      return this._getHeadLogContent();\n    } else if (this._mode === Mode.PREVIEW) {\n      return this._getHeadPreviewContent();\n    }\n    return ``;\n  }\n\n  _getHeadPreviewContent() {\n    if (Object.prototype.toString.call(this.value) === `[object Object]`) {\n      return {\n        elOrStr: `...`,\n        isShowConstructor: false,\n        isShowElements: true,\n        isBraced: true\n      };\n    }\n    return this._getHeadDirContent();\n  }\n\n  _getHeadLogContent() {\n    let val;\n    let isShowConstructor = false;\n    let isBraced = true;\n    let isOpeningDisabled = false;\n    let isOversize = false;\n    let isStringified = false;\n\n    if (this.value instanceof HTMLElement) {\n      return this._getHeadDirContent();\n    } else if (this.value instanceof Error) {\n      isBraced = false;\n      val = this.value.toString();\n      isStringified = true;\n    } else if (this.value instanceof Number) {\n      const view = this._consoleExemplar.createTypedView(Number.parseInt(this.value, 10), Mode.PREVIEW);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof String) {\n      const view = this._consoleExemplar.createTypedView(this.value.toString(), Mode.PREVIEW);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n      isStringified = true;\n      isBraced = false;\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n      isOpeningDisabled = true;\n      isBraced = false;\n    } else {\n      const obj = this.createContent(this.value, true);\n      val = obj.fragment;\n      isOversize = obj.isOversize;\n      if (this.value.constructor !== Object) {\n        isShowConstructor = true;\n      }\n    }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements: true,\n      isBraced,\n      isOpeningDisabled,\n      isOversize,\n      isStringified\n    };\n  }\n\n  _getHeadDirContent() {\n    let val;\n    let isShowConstructor = false;\n    let isShowElements = true;\n    let isBraced = false;\n    if (this.value instanceof HTMLElement) {\n      let str = this.value.tagName.toLowerCase();\n      str += this.value.id;\n      if (this.value.classList.length) {\n        str += `.` + Array.prototype.join.call(this.value.classList, `.`);\n      }\n      val = str;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n    } else if (this.value instanceof Error) {\n      val = this.value.toString();\n    } else {\n      val = this.value;\n      isShowConstructor = true;\n      isShowElements = false;\n    }\n    // else if (this.value.constructor === GeneratorFunction) {\n    //   return this\n    // }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements,\n      isBraced\n    };\n  }\n\n  createContent(obj, isPreview) {\n    const fragment = document.createDocumentFragment();\n    const keys = new Set();\n    // TODO: Добавить счётчик, чтобы больше 5 значений не добавлялось\n    for (let key in obj) {\n      keys.add(key);\n      if (isPreview && keys.size === MAX_HEAD_ELEMENTS_LENGTH) {\n        return {\n          fragment,\n          isOversize: true\n        };\n      }\n      const value = obj[key];\n      const view = this._consoleExemplar.createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    for (let key of Object.getOwnPropertyNames(obj)) {\n      if (keys.has(key)) {\n        continue;\n      }\n      keys.add(key);\n      if (isPreview && keys.size === MAX_HEAD_ELEMENTS_LENGTH) {\n        return {\n          fragment,\n          isOversize: true\n        };\n      }\n      const value = obj[key];\n      const view = this._consoleExemplar.createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return {\n      fragment,\n      isOversize: false\n    };\n  }\n}\n","import TypeView from '../type-view';\n// import {createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nexport default class ArrayView extends TypeView {\n  constructor({val, mode}, consoleExemplar) {\n    super({val, mode}, consoleExemplar);\n    this._elements = new Map();\n    this._isOpened = false;\n  }\n\n  /**\n   * Шаблон\n   * @override\n   * Чтобы окружить квадратными скобками тело объекта, добавьте к элемену с классом\n   * Class.CONSOLE_ITEM_CONTENT_CONTAINTER\n   * класс\n   * Class.ENTRY_CONTAINER_BRACED\n   *\n   **/\n  get template() {\n    return `\\\n<div class=\"console__item item item_array\">\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\">\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">${this.value.constructor.name}</span>\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH}\">${this.value.length}</span>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS} entry-container entry-container_head entry-container_braced entry-container_type_array\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container entry-container_type_array\"></div>\n</div>`;\n  }\n\n  bind() {\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    this.headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    this.headInfoEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_INFO}`);\n    this.headElementsEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    this.headElementsLengthEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH}`);\n    const {isShowConstructor, isShowElements, isShowLength} = this._getHeadContent();\n    if (isShowConstructor) {\n      this._toggleConstructor(this.headInfoEl, true);\n    }\n    if (isShowElements) {\n      this.headElementsEl.appendChild(this.createContent(this.value, true).fragment);\n      this._toggleHeadElements(this.headElementsEl, true);\n    }\n    if (isShowLength) {\n      this._toggleLength(this.headElementsLengthEl, true);\n    }\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    this._setHeadClickHandler(this.headEl);\n  }\n\n  _additionHeadClickHandler() {\n    if (this._mode === Mode.PROP) {\n      this._toggleConstructor();\n      this._toggleHeadElements();\n    }\n  }\n\n  _toggleConstructor() {\n    this.headInfoEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_SHOW);\n  }\n\n  _toggleLength() {\n    this.headElementsLengthEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW);\n  }\n\n  _toggleHeadElements() {\n    this.headElementsEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_ELEMENTS_SHOW);\n  }\n\n  _getHeadContent() {\n    let isShowConstructor = false;\n    let isShowElements = true;\n    let isShowLength = this.value.length > 1;\n    if (this._mode === Mode.DIR) {\n      isShowConstructor = true;\n      isShowElements = false;\n    // } else if (this._mode === Mode.PROP) {\n    } else if (this._mode === Mode.PREVIEW) {\n      isShowConstructor = true;\n      isShowElements = false;\n      isShowLength = true;\n    } else if (this._mode === Mode.ERROR) {\n      return this._getHeadErrorContent();\n    }\n    return {\n      isShowConstructor,\n      isShowElements,\n      isShowLength\n    };\n  }\n\n  createContent(arr, isPreview) {\n    const ownPropertyNames = Object.getOwnPropertyNames(arr);\n    const keys = Object.keys(arr);\n    const fragment = document.createDocumentFragment();\n    for (let key of ownPropertyNames) {\n      const value = arr[key];\n      const indexInKeys = keys.indexOf(key);\n      const isKeyNaN = Number.isNaN(Number.parseInt(key, 10));\n      if (isPreview && indexInKeys === -1) {\n        continue;\n      }\n      const view = this._consoleExemplar.createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ArrayView.createEntryEl(key, view.el, isPreview ? !isKeyNaN : isPreview);\n      // if (!isPreview) {\n      //   this._elements.set(entryEl, view);\n      // }\n      fragment.appendChild(entryEl);\n    }\n    return {fragment};\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, Class} from '../enums';\n\nconst MAX_PREVIEW_FN_BODY_LENGTH = 43;\n\nconst FnType = {\n  PLAIN: `plain`,\n  ARROW: `arrow`,\n  CLASS: `class`\n};\n\n// arguments, caller, length, name, prototype, __proto__, [[FunctionLocation]], [[Scopes]]\n\n// if .caller not accessed — не выводим\n// if prototype undefined — не выводим\n// name — если неименованная — получает имя переменной, в которую записана\n// если именнованная — то имя ф-ии\n\nexport default class FunctionView extends TypeView {\n  constructor({val, mode}, consoleExemplar) {\n    super({val, mode}, consoleExemplar);\n    this._mode = mode;\n    this._isOpened = false;\n    this._fnType = FunctionView.checkFnType(val);\n  }\n\n  get template() {\n    let tpl = `<div class=\"console__item item item_function ${this._mode === Mode.ERROR ? `${this._mode}` : ``}\">`;\n    switch (this._mode) {\n      case Mode.PREVIEW:\n        tpl += `f`;\n        break;\n      case Mode.PROP:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadPropMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>`;\n        break;\n      case Mode.DIR:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadDirMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>`;\n        break;\n      case Mode.LOG:\n      case Mode.ERROR:\n        tpl += this._getLogMarkup();\n        break;\n    }\n    tpl += `</div>`;\n    return tpl;\n  }\n\n  bind() {\n    if (this._mode !== Mode.DIR && this._mode !== Mode.PROP) {\n      return;\n    }\n\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    const headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    // previewEl.appendChild(this.createPreview(this.value, true));\n    this._setHeadClickHandler(headEl);\n  }\n\n  _getHeadPropMarkup() {\n    const {name, params, lines} = this.parseFunction(this.value);\n    const joinedLines = lines.join(`\\n`);\n\n    let markup = `\\\n<span>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}`;\n    if (this._fnType !== FnType.CLASS) {\n      markup += `{${joinedLines.length <= MAX_PREVIEW_FN_BODY_LENGTH ? joinedLines : `...`}}`;\n    }\n    markup += `</span>`;\n    return markup;\n  }\n\n  _getHeadDirMarkup() {\n    const {name, params} = this.parseFunction(this.value);\n\n    let markup = `\\\n  <span>\\\n  ${this._fnType === FnType.CLASS ? `class ` : ``}\\\n  ${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n  ${name ? name : ``}\\\n  ${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}</span>`;\n    return markup;\n  }\n\n  _getLogMarkup() {\n    return `<pre>${this.value.toString()}</pre>`;\n    // const {name, params, lines} = this.parseFunction(this.value);\n    /* return `\\\n<pre>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `function ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}{\n${lines.join(`\\n`)}\n}\n</pre>`;*/\n  }\n\n  static checkFnType(fn) {\n    let str = fn.toString();\n    const firstParenthesisIndex = str.indexOf(`(`);\n\n    const classIndex = str.indexOf(`class`);\n    const arrowIndex = str.indexOf(`=>`);\n    if (classIndex !== -1 && classIndex < firstParenthesisIndex) {\n      return FnType.CLASS;\n    } else if (arrowIndex !== -1 && arrowIndex > firstParenthesisIndex) {\n      return FnType.ARROW;\n    }\n    return FnType.PLAIN;\n  }\n\n  parseParams(funString) {\n    const paramsStart = funString.indexOf(`(`);\n    const paramsEnd = funString.indexOf(`)`);\n\n    const paramsContent = funString.substring(paramsStart + 1, paramsEnd).trim();\n\n    return paramsContent ? paramsContent.split(`,`).map((it) => it.trim()) : [];\n  }\n\n  parseName(funString) {\n    let endingChar;\n    if (this._fnType === FnType.CLASS) {\n      endingChar = `{`;\n    } else if (this._fnType === FnType.PLAIN) {\n      endingChar = `(`;\n    }\n    let name;\n    const re = new RegExp(`(?:class|function)\\\\s+(\\\\w+)\\\\s*(?:\\\\${endingChar})`);\n    const ex = re.exec(funString);\n    if (ex !== null) {\n      name = ex[1];\n    }\n    return name;\n  }\n\n  parseBody(funString) {\n    const bodyStart = funString.indexOf(`{`);\n    const bodyEnd = funString.lastIndexOf(`}`);\n\n    const bodyContent = funString.substring(bodyStart + 1, bodyEnd).trim();\n\n    if (!bodyContent) {\n      return [];\n    }\n\n    return bodyContent.split(`\\n`).map(function (it) {\n      return it.trim();\n    });\n  }\n\n  parseFunction(fnOrString) {\n    let str;\n    if (typeof fnOrString !== `string`) {\n      str = fnOrString.toString();\n    }\n    return {\n      name: fnOrString.name, // this.parseName(str),\n      params: this.parseParams(str),\n      lines: this.parseBody(str)\n    };\n  }\n\n  createContent(fn) {\n    const fragment = document.createDocumentFragment();\n    const keys = [`name`, `prototype`, `caller`, `arguments`, `length`, `__proto__`];\n    for (let key of keys) {\n      let value;\n      try {\n        value = fn[key];\n      } catch (err) {\n        continue;\n      }\n      const view = this._consoleExemplar.createTypedView(value, Mode.DIR);\n      const entryEl = FunctionView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return {fragment};\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode} from '../enums';\n\nconst STRING_COLLAPSED = `string_collapsed`;\n\nexport default class PrimitiveView extends TypeView {\n  constructor({val, mode, type}, consoleExemplar) {\n    super({val, mode}, consoleExemplar);\n    this._type = type;\n  }\n\n  get template() {\n    const type = this._type;\n    let value = this.value;\n    let html = ``;\n    if (type === `string` || type === `symbol`) {\n      if (type === `symbol`) {\n        value = value.toString();\n      }\n      value = this.escapeHtml(value);\n    }\n    switch (type) {\n      case `undefined`:\n      case `null`:\n      case `boolean`:\n        html = `<div class=\"console__item item item_primitive ${type}\">${value}</div>`;\n        break;\n\n      case `number`:\n        if (Number.isNaN(value)) {\n          html = `<div class=\"console__item item item_primitive NaN\">NaN</div>`;\n        } else if ((value === Infinity || value === -Infinity)) {\n          html = `<div class=\"console__item item item_primitive number\">${(value === -Infinity ? `-` : ``)}Infinity</div>`;\n        } else {\n          html = `<div class=\"console__item item item_primitive ${type}\">${value}</div>`;\n        }\n        break;\n\n      case `string`:\n        html = `<pre class=\"console__item item item_primitive string ${this.mode === Mode.PROP ? STRING_COLLAPSED : ``} ${this.mode === Mode.ERROR ? `${this.mode}` : ``}\">${value}</pre>`;\n        break;\n      case `symbol`:\n        html = `<div class=\"console__item item item_primitive symbol\">${value}</div>`;\n        break;\n\n      case `object`:\n        if (value === null) {\n          html = `<div class=\"console__item item item_primitive null\">${value}</div>`;\n          break;\n        }\n    }\n    return html;\n  }\n\n  bind() {\n    if (this.mode === Mode.PROP && this.type === `string`) {\n      this._setCursorPointer();\n      this.el.addEventListener(`click`, (evt) => {\n        evt.preventDefault();\n        this.el.classList.toggle(STRING_COLLAPSED);\n      });\n    }\n  }\n\n  escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, `&amp;`)\n        .replace(/</g, `&lt;`)\n        .replace(/>/g, `&gt;`)\n        .replace(/\"/g, `&quot;`)\n        .replace(/'/g, `&#039;`);\n  }\n}\n","import ObjectView from './object/object-view';\nimport ArrayView from './array/array-view';\nimport FunctionView from './function/function-view';\nimport PrimitiveView from './primitive/primitive-view';\nimport {getElement} from './utils';\nimport {Mode} from './enums';\n\n/**\n * Console\n * @class\n */\nexport default class Console {\n  /**\n   * Initialize console into container\n   * @param {HTMLElement} container — console container\n   * @param {{}} params — parameters\n   * @property {number} params.expandFields — min number of fields in obj to expand\n   * @property {number} params.expandDepth — level of depth to expand\n   **/\n  constructor(container, params) {\n    if (!container) {\n      throw new Error(`Console is not inited!`);\n    }\n    this._container = container;\n    if (params &&\n    typeof params.expandFields === `number` &&\n    typeof params.expandDepth === `number`) {\n      this._expandFields = params.expandFields;\n      this._expandDepth = params.expandDepth;\n    }\n  }\n\n  /**\n   * Subscribe on log event fired\n   * @abstract\n   **/\n  onlog() {}\n\n  /**\n   * Subscribe on dir event fired\n   * @abstract\n   **/\n  ondir() {}\n\n  /**\n   * Subscribe on error event fired\n   * @abstract\n   **/\n  onerror() {}\n\n  /**\n   * Equivalent to console.log\n   * Push rest of arguments into container\n   */\n  log(...rest) {\n    this._container.appendChild(this._getRowEl(rest, Mode.LOG));\n    this.onlog();\n  }\n\n  /**\n   * Equivalent to console.error\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  error(val) {\n    const el = getElement(`<div class=\"console__row console__row_error\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.ERROR).el);\n    this._container.appendChild(el);\n    this.onerror();\n  }\n\n  /**\n   * Equivalent to console.dir\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  dir(val) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.DIR).el);\n    this._container.appendChild(el);\n    this.ondir();\n  }\n\n  /**\n   * Clean container\n   */\n  clean() {\n    this._container.innerHTML = ``;\n  }\n\n  createTypedView(val, mode) {\n    const params = {val, mode, type: typeof val};\n    let view;\n    switch (params.type) {\n      case `function`:\n        view = new FunctionView(params, this);\n        break;\n      case `object`:\n        if (val !== null) {\n          if (Array.isArray(val)) {\n            view = new ArrayView(params, this);\n          } else {\n            view = new ObjectView(params, this);\n          }\n        } else {\n          view = new PrimitiveView(params, this);\n        }\n        break;\n      default:\n        view = new PrimitiveView(params, this);\n        break;\n    }\n    return view;\n  }\n\n  _getRowEl(entries, mode) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    entries.forEach((val) => {\n      el.appendChild(this.createTypedView(val, mode).el);\n    });\n    return el;\n  }\n\n  /**\n   * get innerHTML of container\n   */\n  get sourceLog() {\n    return this._container.innerHTML;\n  }\n\n  /**\n   * Extend console\n   * @static\n   * @param {{}} consoleObject\n   * @return {{}} extended console\n   */\n  static extend(consoleObject) {\n    consoleObject.log = this.log;\n    consoleObject.info = this.log;\n\n    consoleObject.error = this.error;\n    consoleObject.warn = this.error;\n\n    consoleObject.dir = this.dir;\n\n    return consoleObject;\n  }\n}\n","import Console from './main';\n\nwindow.jsConsole = new Console(document.querySelector(`.console`));\n"]}