{"version":3,"sources":["js/utils.js","js/abstract-view.js","js/enums.js","js/type-view.js","js/object/object-view.js","js/array/array-view.js","js/function/function-view.js","js/primitive/primitive-view.js","js/main.js"],"names":["getElement","htmlMarkup","div","document","createElement","innerHTML","firstElementChild","AbstractView","this","template","_el","render","bind","Mode","ViewType","Class","TypeView","params","cons","parentView","_parentView","_rootViewType","_viewType","_console","_value","val","_mode","mode","_type","type","_isOpened","_currentDepth","depth","toString","_proxiedContentEl","appendChild","createContent","value","fragment","_contentContainerEl","classList","toggle","style","display","headEl","_setCursorPointer","addEventListener","evt","preventDefault","_toggleContent","_additionHeadClickHandler","el","add","_isAutoExpandNeededProxied","rootFieldsMoreThanNeed","_isAutoExpandNeeded","Object","keys","length","minFieldsToExpand","expandDepth","exclude","includes","index","valueEl","withoutKey","entryEl","querySelector","ObjectView","OBJECT","_entries","Map","headElementsEl","headInfoEl","_getHeadContent","elOrStr","_getHeadContent2","isShowConstructor","isShowElements","isBraced","isOpeningDisabled","isOversize","isStringified","HTMLElement","DocumentFragment","_setHeadClickHandler","_getHeadDirContent","_getHeadLogContent","_getHeadPreviewContent","prototype","call","Error","Number","createTypedView","parseInt","nextNestingLevel","String","Date","RegExp","source","flags","obj","constructor","str","tagName","toLowerCase","id","Array","join","isPreview","createDocumentFragment","addedKeys","Set","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","key","size","maxFieldsInHead","_createObjectEntryEl","err","_step2","getOwnPropertyNames","_iteratorNormalCompletion2","_iterator2","has","view","createEntryEl","name","ArrayView","ARRAY","_elements","headElementsLengthEl","isShowLength","_toggleConstructor","_toggleHeadElements","_toggleLength","_getHeadErrorContent","arr","_createArrayEntryEl","indexOf","isKeyNaN","isNaN","FnType","FunctionView","FUNCTION","_fnType","checkFnType","_this","parseFunction","_parseFunction","joinedLines","lines","markup","_parseFunction2","funString","paramsStart","paramsEnd","paramsContent","substring","trim","split","map","it","endingChar","ex","exec","bodyStart","bodyEnd","lastIndexOf","bodyContent","fnOrString","parseParams","parseBody","fn","concat","tempValue","tpl","_getHeadPropMarkup","_getHeadDirMarkup","_getLogMarkup","firstParenthesisIndex","classIndex","arrowIndex","STRING_COLLAPSED","PrimitiveView","PRIMITIVE","unsafe","replace","html","escapeHtml","Infinity","Console","container","arguments","undefined","_container","_parseParams","object","array","function","paramsObject","paramName","isArray","availableTypes","hasOwnProperty","push","every","rest","_len","_key","_getRowEl","onlog","onerror","ondir","_typeof","entries","forEach","consoleObject","log","info","error","warn","dir","window"],"mappings":"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","file":"index.js","sourcesContent":["export const getElement = (htmlMarkup) => {\n  const div = document.createElement(`div`);\n  div.innerHTML = htmlMarkup;\n  return div.firstElementChild;\n};\n","import {getElement} from './utils';\n\nexport default class AbstractView {\n  constructor() {}\n\n  /**\n   * @abstract\n   * @return {string}\n   */\n  get template() {}\n\n  get el() {\n    if (!this._el) {\n      this._el = this.render();\n      this.bind(this._el);\n    }\n    return this._el;\n  }\n\n  render() {\n    return getElement(this.template);\n  }\n\n  bind() {}\n}\n","export const Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  PROP: `prop`,\n  ERROR: `error`\n};\n\nexport const ViewType = {\n  FUNCTION: `function`,\n  OBJECT: `object`,\n  ARRAY: `array`,\n  PRIMITIVE: `primitive`\n};\n\nexport const Class = {\n  ITEM_HEAD: `item-head`,\n  ITEM_POINTER: `item_pointer`,\n  ITEM_HEAD_SHOW: `item-head_show`,\n  ENTRY_CONTAINER_BRACED: `entry-container_braced`,\n  ENTRY_CONTAINER_OVERSIZE: `entry-container_oversize`,\n  CONSOLE_ITEM_HEAD_PARENTHESED: `item-head_parenthesed`,\n  CONSOLE_ITEM_HEAD_INFO: `item-head-info`,\n  CONSOLE_ITEM_HEAD_ELEMENTS: `item-head-elements`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_SHOW: `item-head-elements_show`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER: `item-content-container`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW: `item-content-container_show`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH: `item-head-elements-length`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW: `item-head-elements-length_show`\n};\n","import AbstractView from './abstract-view';\nimport {getElement} from './utils';\nimport {Class} from './enums';\n\nexport default class TypeView extends AbstractView {\n  constructor(params, cons) {\n    super();\n    if (params.parentView) {\n      this._parentView = params.parentView;\n      this._rootViewType = params.parentView._rootViewType;\n    }\n    this._viewType = null;\n    this._console = cons;\n    this._value = params.val;\n    this._mode = params.mode;\n    this._type = params.type;\n    this._isOpened = false;\n\n    this._currentDepth = typeof params.depth === `number` ? params.depth : 1;\n\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get mode() {\n    return this._mode;\n  }\n\n  get nextNestingLevel() {\n    return this._currentDepth + 1;\n  }\n\n  get _isAutoExpandNeeded() {\n    if (!this._isAutoExpandNeededProxied) {\n      let rootFieldsMoreThanNeed = false;\n      if (this._parentView && this._parentView._isAutoExpandNeeded) {\n        rootFieldsMoreThanNeed = true;\n      } else if (Object.keys(this.value).length >= // Object.getOwnPropertyNames\n      this._console.params[this._rootViewType].minFieldsToExpand) {\n        rootFieldsMoreThanNeed = true;\n      }\n      if (this._viewType !== null &&\n      this._currentDepth <= this._console.params[this._rootViewType].expandDepth &&\n      rootFieldsMoreThanNeed &&\n      !this._console.params[this._rootViewType].exclude.includes(this._viewType)) {\n        this._isAutoExpandNeededProxied = true;\n      }\n    }\n    return this._isAutoExpandNeededProxied;\n  }\n\n  _getHeadErrorContent() {\n    return {\n      elOrStr: this._value.toString(),\n      isShowConstructor: false,\n      isShowElements: true\n    };\n  }\n\n  _toggleContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"item-content entry-container entry-container_type_${this._viewType}\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value, false).fragment);\n      this._contentContainerEl.appendChild(this._proxiedContentEl);\n    }\n    this._contentContainerEl.classList.toggle(Class.CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW);\n  }\n\n  _hideContent() {\n    this._proxiedContentEl.style.display = `none`;\n  }\n\n  _additionHeadClickHandler() {}\n\n  _setHeadClickHandler(headEl) {\n    this._setCursorPointer();\n    headEl.addEventListener(`click`, (evt) => {\n      evt.preventDefault();\n      this._toggleContent();\n      this._additionHeadClickHandler();\n    });\n  }\n\n  _setCursorPointer() {\n    this.el.classList.add(Class.ITEM_POINTER);\n  }\n\n  static createEntryEl(index, valueEl, withoutKey) {\n    const entryEl = getElement(`\\\n<span class=\"entry-container__entry\">\\\n  ${withoutKey ? `` : `<span class=\"entry-container__key\">${index}</span>`}<span class=\"entry-container__value-container\"></span>\\\n</span>`);\n    const valueContEl = entryEl.querySelector(`.entry-container__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","/* eslint guard-for-in: \"off\"*/\n/* eslint no-empty: \"off\"*/\nimport TypeView from '../type-view';\n// import {createTypedView} from '../utils';\nimport {Mode, Class, ViewType} from '../enums';\n\nexport default class ObjectView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    if (!params.parentView) {\n      this._rootViewType = ViewType.OBJECT;\n    }\n    this._viewType = ViewType.OBJECT;\n    this._entries = new Map();\n    this._isOpened = false;\n  }\n\n  /**\n   * Шаблон\n   * @override\n   * Чтобы окружить фигурными скобками тело объекта, добавьте к элемену с классом\n   * Class.CONSOLE_ITEM_CONTENT_CONTAINTER\n   * класс\n   * Class.ENTRY_CONTAINER_BRACED\n   *\n   **/\n  get template() {\n    return `\\\n<div class=\"console__item item item_object\">\\\n  <div class=\"${Class.ITEM_HEAD}\">\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">${this.value.constructor.name}</span>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS} entry-container entry-container_head entry-container_type_object\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}\"></div>\n</div>`;\n  }\n\n  bind() {\n    const headEl = this.el.querySelector(`.${Class.ITEM_HEAD}`);\n    const headElementsEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    const headInfoEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_INFO}`);\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n\n    const {elOrStr, isShowConstructor, isShowElements, isBraced, isOpeningDisabled, isOversize, isStringified} = this._getHeadContent();\n    if (isBraced) {\n      headElementsEl.classList.add(Class.ENTRY_CONTAINER_BRACED);\n    }\n    if (isOversize) {\n      headElementsEl.classList.add(Class.ENTRY_CONTAINER_OVERSIZE);\n    }\n    if (isShowConstructor) {\n      headInfoEl.classList.add(Class.ITEM_HEAD_SHOW);\n    }\n    if (isShowElements) {\n      if (elOrStr instanceof HTMLElement || elOrStr instanceof DocumentFragment) {\n        headElementsEl.appendChild(elOrStr);\n      } else {\n        headElementsEl.innerHTML = elOrStr;\n      }\n      headElementsEl.classList.add(Class.CONSOLE_ITEM_HEAD_ELEMENTS_SHOW);\n    }\n\n    if (this._mode === Mode.ERROR && isStringified) {\n      this.el.classList.add(this._mode);\n    }\n\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    if (!isOpeningDisabled) {\n      if (this._isAutoExpandNeeded) {\n        this._toggleContent();\n      }\n      this._setHeadClickHandler(headEl);\n    }\n  }\n\n  _getHeadContent() {\n    if (this._mode === Mode.DIR) {\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.LOG || this._mode === Mode.PROP || this._mode === Mode.ERROR) {\n      return this._getHeadLogContent();\n    } else if (this._mode === Mode.PREVIEW) {\n      return this._getHeadPreviewContent();\n    }\n    return ``;\n  }\n\n  _getHeadPreviewContent() {\n    if (Object.prototype.toString.call(this.value) === `[object Object]`) {\n      return {\n        elOrStr: `...`,\n        isShowConstructor: false,\n        isShowElements: true,\n        isBraced: true\n      };\n    }\n    return this._getHeadDirContent();\n  }\n\n  _getHeadLogContent() {\n    let val;\n    let isShowConstructor = false;\n    let isBraced = true;\n    let isOpeningDisabled = false;\n    let isOversize = false;\n    let isStringified = false;\n\n    if (this.value instanceof HTMLElement) {\n      return this._getHeadDirContent();\n    } else if (this.value instanceof Error) {\n      isBraced = false;\n      val = this.value.toString();\n      isStringified = true;\n    } else if (this.value instanceof Number) {\n      const view = this._console.createTypedView(Number.parseInt(this.value, 10), Mode.PREVIEW, this.nextNestingLevel, this);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof String) {\n      const view = this._console.createTypedView(this.value.toString(), Mode.PREVIEW, this.nextNestingLevel, this);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n      isStringified = true;\n      isBraced = false;\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n      isOpeningDisabled = true;\n      isBraced = false;\n    } else {\n      const obj = this.createContent(this.value, true);\n      val = obj.fragment;\n      isOversize = obj.isOversize;\n      if (this.value.constructor !== Object) {\n        isShowConstructor = true;\n      }\n    }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements: true,\n      isBraced,\n      isOpeningDisabled,\n      isOversize,\n      isStringified\n    };\n  }\n\n  _getHeadDirContent() {\n    let val;\n    let isShowConstructor = false;\n    let isShowElements = true;\n    let isBraced = false;\n    if (this.value instanceof HTMLElement) {\n      let str = this.value.tagName.toLowerCase();\n      str += this.value.id;\n      if (this.value.classList.length) {\n        str += `.` + Array.prototype.join.call(this.value.classList, `.`);\n      }\n      val = str;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n    } else if (this.value instanceof Error) {\n      val = this.value.toString();\n    } else {\n      val = this.value;\n      isShowConstructor = true;\n      isShowElements = false;\n    }\n    // else if (this.value.constructor === GeneratorFunction) {\n    //   return this\n    // }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements,\n      isBraced\n    };\n  }\n\n  createContent(obj, isPreview) {\n    const fragment = document.createDocumentFragment();\n    const keys = Object.keys(obj);\n    const addedKeys = new Set();\n    // TODO: Добавить счётчик, чтобы больше 5 значений не добавлялось\n    for (let key of keys) {\n      if (isPreview && addedKeys.size === this._console.params[this._viewType].maxFieldsInHead) {\n        return {\n          fragment,\n          isOversize: true\n        };\n      }\n      addedKeys.add(key);\n      const val = obj[key];\n      try {\n        fragment.appendChild(this._createObjectEntryEl(key, val, isPreview));\n      } catch (err) {}\n    }\n    for (let key of Object.getOwnPropertyNames(obj)) {\n      if (addedKeys.has(key)) {\n        continue;\n      }\n      if (isPreview && addedKeys.size === this._console.params[this._viewType].maxFieldsInHead) {\n        return {\n          fragment,\n          isOversize: true\n        };\n      }\n      addedKeys.add(key);\n      const val = obj[key];\n      try {\n        fragment.appendChild(this._createObjectEntryEl(key, val, isPreview));\n      } catch (err) {}\n    }\n    return {\n      fragment,\n      isOversize: false\n    };\n  }\n\n  _createObjectEntryEl(key, val, isPreview) {\n    const view = this._console.createTypedView(val, isPreview ? Mode.PREVIEW : Mode.PROP, this.nextNestingLevel, this);\n    return ObjectView.createEntryEl(key, view.el);\n  }\n}\n","import TypeView from '../type-view';\n// import {createTypedView} from '../utils';\nimport {Mode, Class, ViewType} from '../enums';\n\nexport default class ArrayView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    if (!params.parentView) {\n      this._rootViewType = ViewType.ARRAY;\n    }\n    this._viewType = ViewType.ARRAY;\n    this._elements = new Map();\n    this._isOpened = false;\n  }\n\n  /**\n   * Шаблон\n   * @override\n   * Чтобы окружить квадратными скобками тело объекта, добавьте к элемену с классом\n   * Class.CONSOLE_ITEM_CONTENT_CONTAINTER\n   * класс\n   * Class.ENTRY_CONTAINER_BRACED\n   *\n   **/\n  get template() {\n    return `\\\n<div class=\"console__item item item_array\">\n  <div class=\"${Class.ITEM_HEAD}\">\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">${this.value.constructor.name}</span>\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH}\">${this.value.length}</span>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS} entry-container entry-container_head entry-container_braced entry-container_type_array\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}\"></div>\n</div>`;\n  }\n\n  bind() {\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    this.headEl = this.el.querySelector(`.${Class.ITEM_HEAD}`);\n    this.headInfoEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_INFO}`);\n    this.headElementsEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    this.headElementsLengthEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH}`);\n    const {isShowConstructor, isShowElements, isShowLength} = this._getHeadContent();\n    if (isShowConstructor) {\n      this._toggleConstructor(this.headInfoEl, true);\n    }\n    if (isShowElements) {\n      this.headElementsEl.appendChild(this.createContent(this.value, true).fragment);\n      this._toggleHeadElements(this.headElementsEl, true);\n    }\n    if (isShowLength) {\n      this._toggleLength(this.headElementsLengthEl, true);\n    }\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    if (this._isAutoExpandNeeded) {\n      this._toggleContent();\n    }\n    this._setHeadClickHandler(this.headEl);\n  }\n\n  _additionHeadClickHandler() {\n    if (this._mode === Mode.PROP) {\n      this._toggleConstructor();\n      this._toggleHeadElements();\n    }\n  }\n\n  _toggleConstructor() {\n    this.headInfoEl.classList.toggle(Class.ITEM_HEAD_SHOW);\n  }\n\n  _toggleLength() {\n    this.headElementsLengthEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW);\n  }\n\n  _toggleHeadElements() {\n    this.headElementsEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_ELEMENTS_SHOW);\n  }\n\n  _getHeadContent() {\n    let isShowConstructor = false;\n    let isShowElements = true;\n    let isShowLength = this.value.length > 1;\n    if (this._mode === Mode.DIR) {\n      isShowConstructor = true;\n      isShowElements = false;\n    // } else if (this._mode === Mode.PROP) {\n    } else if (this._mode === Mode.PREVIEW) {\n      isShowConstructor = true;\n      isShowElements = false;\n      isShowLength = true;\n    } else if (this._mode === Mode.ERROR) {\n      return this._getHeadErrorContent();\n    }\n    return {\n      isShowConstructor,\n      isShowElements,\n      isShowLength\n    };\n  }\n\n  createContent(arr, isPreview) {\n    const keys = Object.keys(arr);\n    const addedKeys = new Set();\n    const fragment = document.createDocumentFragment();\n    for (let key of keys) {\n      addedKeys.add(key);\n      const val = arr[key];\n      fragment.appendChild(this._createArrayEntryEl(key, val, isPreview));\n    }\n    for (let key of Object.getOwnPropertyNames(arr)) {\n      if (addedKeys.has(key)) {\n        continue;\n      }\n      if (isPreview && keys.indexOf(key) === -1) {\n        continue;\n      }\n      const val = arr[key];\n      fragment.appendChild(this._createArrayEntryEl(key, val, isPreview));\n    }\n    return {fragment};\n  }\n\n  _createArrayEntryEl(key, val, isPreview) {\n    const isKeyNaN = Number.isNaN(Number.parseInt(key, 10));\n    const view = this._console.createTypedView(val, isPreview ? Mode.PREVIEW : Mode.PROP, this.nextNestingLevel, this);\n    return ArrayView.createEntryEl(key, view.el, isPreview ? !isKeyNaN : isPreview);\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, Class, ViewType} from '../enums';\n\nconst MAX_PREVIEW_FN_BODY_LENGTH = 43;\n\nconst FnType = {\n  PLAIN: `plain`,\n  ARROW: `arrow`,\n  CLASS: `class`\n};\n\n// arguments, caller, length, name, prototype, __proto__, [[FunctionLocation]], [[Scopes]]\n\n// if .caller not accessed — не выводим\n// if prototype undefined — не выводим\n// name — если неименованная — получает имя переменной, в которую записана\n// если именнованная — то имя ф-ии\n\nexport default class FunctionView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    if (!params.parentView) {\n      this._rootViewType = ViewType.FUNCTION;\n    }\n    this._viewType = ViewType.FUNCTION;\n    this._isOpened = false;\n    this._fnType = FunctionView.checkFnType(this.value);\n  }\n\n  get template() {\n    let tpl = `<div class=\"console__item item item_function ${this._mode === Mode.ERROR ? `${this._mode}` : ``}\">`;\n    switch (this._mode) {\n      case Mode.PREVIEW:\n        tpl += `f`;\n        break;\n      case Mode.PROP:\n        tpl += `\\\n<div class=\"${Class.ITEM_HEAD}\">${this._getHeadPropMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>`;\n        break;\n      case Mode.DIR:\n        tpl += `\\\n<div class=\"${Class.ITEM_HEAD}\">${this._getHeadDirMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>`;\n        break;\n      case Mode.LOG:\n      case Mode.ERROR:\n        tpl += this._getLogMarkup();\n        break;\n    }\n    tpl += `</div>`;\n    return tpl;\n  }\n\n  bind() {\n    if (this._mode !== Mode.DIR && this._mode !== Mode.PROP) {\n      return;\n    }\n\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    const headEl = this.el.querySelector(`.${Class.ITEM_HEAD}`);\n    // previewEl.appendChild(this.createPreview(this.value, true));\n    if (this._isAutoExpandNeeded) {\n      this._toggleContent();\n    }\n    this._setHeadClickHandler(headEl);\n  }\n\n  _getHeadPropMarkup() {\n    const {name, params, lines} = this.parseFunction(this.value);\n    const joinedLines = lines.join(`\\n`);\n\n    let markup = `\\\n<span>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}`;\n    if (this._fnType !== FnType.CLASS) {\n      markup += `{${joinedLines.length <= MAX_PREVIEW_FN_BODY_LENGTH ? joinedLines : `...`}}`;\n    }\n    markup += `</span>`;\n    return markup;\n  }\n\n  _getHeadDirMarkup() {\n    const {name, params} = this.parseFunction(this.value);\n\n    let markup = `\\\n  <span>\\\n  ${this._fnType === FnType.CLASS ? `class ` : ``}\\\n  ${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n  ${name ? name : ``}\\\n  ${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}</span>`;\n    return markup;\n  }\n\n  _getLogMarkup() {\n    return `<pre>${this.value.toString()}</pre>`;\n    // const {name, params, lines} = this.parseFunction(this.value);\n    /* return `\\\n<pre>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `function ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}{\n${lines.join(`\\n`)}\n}\n</pre>`;*/\n  }\n\n  static checkFnType(fn) {\n    let str = fn.toString();\n    const firstParenthesisIndex = str.indexOf(`(`);\n\n    const classIndex = str.indexOf(`class`);\n    const arrowIndex = str.indexOf(`=>`);\n    if (classIndex !== -1 && classIndex < firstParenthesisIndex) {\n      return FnType.CLASS;\n    } else if (arrowIndex !== -1 && arrowIndex > firstParenthesisIndex) {\n      return FnType.ARROW;\n    }\n    return FnType.PLAIN;\n  }\n\n  parseParams(funString) {\n    const paramsStart = funString.indexOf(`(`);\n    const paramsEnd = funString.indexOf(`)`);\n\n    const paramsContent = funString.substring(paramsStart + 1, paramsEnd).trim();\n\n    return paramsContent ? paramsContent.split(`,`).map((it) => it.trim()) : [];\n  }\n\n  parseName(funString) {\n    let endingChar;\n    if (this._fnType === FnType.CLASS) {\n      endingChar = `{`;\n    } else if (this._fnType === FnType.PLAIN) {\n      endingChar = `(`;\n    }\n    let name;\n    const re = new RegExp(`(?:class|function)\\\\s+(\\\\w+)\\\\s*(?:\\\\${endingChar})`);\n    const ex = re.exec(funString);\n    if (ex !== null) {\n      name = ex[1];\n    }\n    return name;\n  }\n\n  parseBody(funString) {\n    const bodyStart = funString.indexOf(`{`);\n    const bodyEnd = funString.lastIndexOf(`}`);\n\n    const bodyContent = funString.substring(bodyStart + 1, bodyEnd).trim();\n\n    if (!bodyContent) {\n      return [];\n    }\n\n    return bodyContent.split(`\\n`).map(function (it) {\n      return it.trim();\n    });\n  }\n\n  parseFunction(fnOrString) {\n    let str;\n    if (typeof fnOrString !== `string`) {\n      str = fnOrString.toString();\n    }\n    return {\n      name: fnOrString.name, // this.parseName(str),\n      params: this.parseParams(str),\n      lines: this.parseBody(str)\n    };\n  }\n\n  createContent(fn) {\n    const fragment = document.createDocumentFragment();\n    const fnKeys = [`name`, `prototype`, `caller`, `arguments`, `length`, `__proto__`];\n    const keys = Object.keys(fn).concat(fnKeys);\n    for (let key of keys) {\n      let value;\n      try {\n        const tempValue = fn[key];\n        if (typeof tempValue !== `undefined`) {\n          value = tempValue;\n        } else {\n          continue;\n        }\n      } catch (err) {\n        continue;\n      }\n      const view = this._console.createTypedView(value, Mode.PROP, this.nextNestingLevel, this);\n      const entryEl = FunctionView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return {fragment};\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nconst STRING_COLLAPSED = `string_collapsed`;\n\nexport default class PrimitiveView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this._viewType = ViewType.PRIMITIVE;\n  }\n\n  get template() {\n    const type = this._type;\n    let value = this.value;\n    let html = ``;\n    if (type === `string` || type === `symbol`) {\n      if (type === `symbol`) {\n        value = value.toString();\n      }\n      value = this.escapeHtml(value);\n    }\n    switch (type) {\n      case `undefined`:\n      case `null`:\n      case `boolean`:\n        html = `<div class=\"console__item item item_primitive ${type}\">${value}</div>`;\n        break;\n\n      case `number`:\n        if (Number.isNaN(value)) {\n          html = `<div class=\"console__item item item_primitive NaN\">NaN</div>`;\n        } else if ((value === Infinity || value === -Infinity)) {\n          html = `<div class=\"console__item item item_primitive number\">${(value === -Infinity ? `-` : ``)}Infinity</div>`;\n        } else {\n          html = `<div class=\"console__item item item_primitive ${type}\">${value}</div>`;\n        }\n        break;\n\n      case `string`:\n        html = `<pre class=\"console__item item item_primitive string ${this.mode === Mode.PROP ? STRING_COLLAPSED : ``} ${this.mode === Mode.ERROR ? `${this.mode}` : ``}\">${value}</pre>`;\n        break;\n      case `symbol`:\n        html = `<div class=\"console__item item item_primitive symbol\">${value}</div>`;\n        break;\n\n      case `object`:\n        if (value === null) {\n          html = `<div class=\"console__item item item_primitive null\">${value}</div>`;\n          break;\n        }\n    }\n    return html;\n  }\n\n  bind() {\n    if (this.mode === Mode.PROP && this.type === `string`) {\n      this._setCursorPointer();\n      this.el.addEventListener(`click`, (evt) => {\n        evt.preventDefault();\n        this.el.classList.toggle(STRING_COLLAPSED);\n      });\n    }\n  }\n\n  escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, `&amp;`)\n        .replace(/</g, `&lt;`)\n        .replace(/>/g, `&gt;`)\n        .replace(/\"/g, `&quot;`)\n        .replace(/'/g, `&#039;`);\n  }\n}\n","import ObjectView from './object/object-view';\nimport ArrayView from './array/array-view';\nimport FunctionView from './function/function-view';\nimport PrimitiveView from './primitive/primitive-view';\nimport {getElement} from './utils';\nimport {Mode, ViewType} from './enums';\n\nconst MAX_HEAD_ELEMENTS_LENGTH = 5;\n\n/**\n * Console\n * @class\n */\nexport default class Console {\n  /**\n   * Initialize console into container\n   * @param {HTMLElement} container — console container\n   * @param {{}} params — parameters\n   * @property {number} params.minFieldsToExpand — min number of fields in obj to expand\n   * @property {number} params.maxFieldsInHead — max number of preview fields inside head\n   * @property {number} params.expandDepth — level of depth to expand\n   **/\n  constructor(container, params = {}) {\n    if (!container) {\n      throw new Error(`Console is not inited!`);\n    }\n    this._container = container;\n    this.params = {\n      object: this._parseParams(params.object, `object`),\n      array: this._parseParams(params.array, `array`),\n      function: this._parseParams(params.function, `function`)\n    };\n  }\n\n  _parseParams(paramsObject, paramName) {\n    if (paramsObject) {\n      // Set this._expandDepth and this._minFieldsToExpand only if expandDepth provided and > 0\n      if (typeof paramsObject.expandDepth === `number` &&\n      paramsObject.expandDepth > 0) {\n\n        paramsObject.minFieldsToExpand = (\n          typeof paramsObject.minFieldsToExpand === `number` &&\n          paramsObject.minFieldsToExpand > 0\n        ) ? paramsObject.minFieldsToExpand : 0;\n      }\n\n      paramsObject.maxFieldsInHead = (\n        typeof paramsObject.maxFieldsInHead === `number` &&\n        paramsObject.maxFieldsInHead > 0\n      ) ? paramsObject.maxFieldsInHead : MAX_HEAD_ELEMENTS_LENGTH;\n    } else {\n      paramsObject = {};\n      if (paramName === `object`) {\n        paramsObject.maxFieldsInHead = MAX_HEAD_ELEMENTS_LENGTH;\n      }\n    }\n    if (!Array.isArray(paramsObject.exclude)) {\n      paramsObject.exclude = [];\n    } else {\n      const availableTypes = [];\n      for (let key in ViewType) {\n        if (ViewType.hasOwnProperty(key)) {\n          const type = ViewType[key];\n          availableTypes.push(type);\n        }\n      }\n      if (!paramsObject.exclude.every((type) => availableTypes.includes(type))) {\n        throw new Error(`Provided type to exclude is not in available types`);\n      }\n    }\n    return paramsObject;\n  }\n\n  /**\n   * Subscribe on log event fired\n   * @abstract\n   **/\n  onlog() {}\n\n  /**\n   * Subscribe on dir event fired\n   * @abstract\n   **/\n  ondir() {}\n\n  /**\n   * Subscribe on error event fired\n   * @abstract\n   **/\n  onerror() {}\n\n  /**\n   * Equivalent to console.log\n   * Push rest of arguments into container\n   */\n  log(...rest) {\n    this._container.appendChild(this._getRowEl(rest, Mode.LOG));\n    this.onlog();\n  }\n\n  /**\n   * Equivalent to console.error\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  error(val) {\n    const el = getElement(`<div class=\"console__row console__row_error\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.ERROR).el);\n    this._container.appendChild(el);\n    this.onerror();\n  }\n\n  /**\n   * Equivalent to console.dir\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  dir(val) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.DIR).el);\n    this._container.appendChild(el);\n    this.ondir();\n  }\n\n  /**\n   * Clean container\n   */\n  clean() {\n    this._container.innerHTML = ``;\n  }\n\n  createTypedView(val, mode, depth, parentView) {\n    const params = {val, mode, depth, parentView, type: typeof val};\n    let view;\n    switch (params.type) {\n      case `function`:\n        view = new FunctionView(params, this);\n        break;\n      case `object`:\n        if (val !== null) {\n          if (Array.isArray(val)) {\n            view = new ArrayView(params, this);\n          } else {\n            view = new ObjectView(params, this);\n          }\n        } else {\n          view = new PrimitiveView(params, this);\n        }\n        break;\n      default:\n        view = new PrimitiveView(params, this);\n        break;\n    }\n    return view;\n  }\n\n  _getRowEl(entries, mode) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    entries.forEach((val) => {\n      el.appendChild(this.createTypedView(val, mode).el);\n    });\n    return el;\n  }\n\n  /**\n   * get innerHTML of container\n   */\n  get sourceLog() {\n    return this._container.innerHTML;\n  }\n\n  /**\n   * Extend console\n   * @static\n   * @param {{}} consoleObject\n   * @return {{}} extended console\n   */\n  extend(consoleObject) {\n    consoleObject.log = this.log.bind(this);\n    consoleObject.info = this.log.bind(this);\n\n    consoleObject.error = this.error.bind(this);\n    consoleObject.warn = this.error.bind(this);\n\n    consoleObject.dir = this.dir.bind(this);\n    return consoleObject;\n  }\n}\n"]}