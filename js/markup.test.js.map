{"version":3,"sources":["js/utils.js","js/abstract-view.js","js/enums.js","js/type-view.js","js/object/object-view.js","js/array/array-view.js","js/function/function-view.js","js/primitive/primitive-view.js","js/tests/markup.test.js","js/main.js"],"names":["getElement","htmlMarkup","div","document","createElement","innerHTML","firstElementChild","AbstractView","this","template","_el","render","bind","Mode","ViewType","Class","TypeView","params","cons","parentView","_parentView","_rootViewType","_viewType","_console","_value","val","_mode","mode","_type","type","_isOpened","_currentDepth","depth","toString","_proxiedContentEl","appendChild","createContent","value","fragment","_contentContainerEl","classList","toggle","style","display","headEl","_setCursorPointer","addEventListener","evt","preventDefault","_toggleContent","_additionHeadClickHandler","el","add","rootFieldsMoreThanNeed","_isAutoExpandNeeded","Object","keys","length","minFieldsToExpand","expandDepth","exclude","includes","index","valueEl","withoutKey","entryEl","querySelector","ObjectView","OBJECT","_entries","Map","headElementsEl","headInfoEl","_getHeadContent","elOrStr","_getHeadContent2","isShowConstructor","isShowElements","isBraced","isOpeningDisabled","isOversize","isStringified","HTMLElement","DocumentFragment","_setHeadClickHandler","_getHeadDirContent","_getHeadLogContent","_getHeadPreviewContent","prototype","call","Error","Number","createTypedView","parseInt","nextNestingLevel","String","Date","RegExp","source","flags","obj","constructor","str","tagName","toLowerCase","id","Array","join","isPreview","createDocumentFragment","addedKeys","Set","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","key","size","maxFieldsInHead","_createObjectEntryEl","_step2","getOwnPropertyNames","_iteratorNormalCompletion2","_iterator2","has","view","createEntryEl","name","ArrayView","ARRAY","_elements","headElementsLengthEl","isShowLength","_toggleConstructor","_toggleHeadElements","_toggleLength","_getHeadErrorContent","arr","_createArrayEntryEl","indexOf","isKeyNaN","isNaN","FnType","FunctionView","FUNCTION","_fnType","checkFnType","_this","parseFunction","_parseFunction","joinedLines","lines","markup","_parseFunction2","funString","paramsStart","paramsEnd","paramsContent","substring","trim","split","map","it","endingChar","ex","exec","bodyStart","bodyEnd","lastIndexOf","bodyContent","fnOrString","parseParams","parseBody","fn","concat","err","tpl","_getHeadPropMarkup","_getHeadDirMarkup","_getLogMarkup","firstParenthesisIndex","classIndex","arrowIndex","STRING_COLLAPSED","PrimitiveView","PRIMITIVE","unsafe","replace","html","escapeHtml","Infinity","Console","container","arguments","undefined","_container","_parseParams","object","array","function","paramsObject","paramName","isArray","rest","_len","_key","_getRowEl","onlog","onerror","ondir","_typeof","entries","forEach","consoleObject","log","info","error","warn","dir","body","str1","str2","describe","defaultMode","primitiveEls","sym","NaN","every","contains","textContent"],"mappings":"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","file":"markup.test.js","sourcesContent":["export const getElement = (htmlMarkup) => {\n  const div = document.createElement(`div`);\n  div.innerHTML = htmlMarkup;\n  return div.firstElementChild;\n};\n","import {getElement} from './utils';\n\nexport default class AbstractView {\n  constructor() {}\n\n  /**\n   * @abstract\n   * @return {string}\n   */\n  get template() {}\n\n  get el() {\n    if (!this._el) {\n      this._el = this.render();\n      this.bind(this._el);\n    }\n    return this._el;\n  }\n\n  render() {\n    return getElement(this.template);\n  }\n\n  bind() {}\n}\n","export const Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  PROP: `prop`,\n  ERROR: `error`\n};\n\nexport const ViewType = {\n  FUNCTION: `function`,\n  OBJECT: `object`,\n  ARRAY: `array`,\n  PRIMITIVE: `primitive`\n};\n\nexport const Class = {\n  CONSOLE_ITEM_HEAD: `item-head`,\n  CONSOLE_ITEM_POINTER: `item_pointer`,\n  CONSOLE_ITEM_HEAD_SHOW: `item-head_show`,\n  ENTRY_CONTAINER_BRACED: `entry-container_braced`,\n  ENTRY_CONTAINER_OVERSIZE: `entry-container_oversize`,\n  CONSOLE_ITEM_HEAD_PARENTHESED: `item-head_parenthesed`,\n  CONSOLE_ITEM_HEAD_INFO: `item-head-info`,\n  CONSOLE_ITEM_HEAD_ELEMENTS: `item-head-elements`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_SHOW: `item-head-elements_show`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER: `item-content-container`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW: `item-content-container_show`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH: `item-head-elements-length`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW: `item-head-elements-length_show`\n};\n","import AbstractView from './abstract-view';\nimport {getElement} from './utils';\nimport {Class} from './enums';\n\nexport default class TypeView extends AbstractView {\n  constructor(params, cons) {\n    super();\n    if (params.parentView) {\n      this._parentView = params.parentView;\n      this._rootViewType = params.parentView._rootViewType;\n    }\n    this._viewType = null;\n    this._console = cons;\n    this._value = params.val;\n    this._mode = params.mode;\n    this._type = params.type;\n    this._isOpened = false;\n\n    this._currentDepth = typeof params.depth === `number` ? params.depth : 1;\n\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get mode() {\n    return this._mode;\n  }\n\n  get nextNestingLevel() {\n    return this._currentDepth + 1;\n  }\n\n  get _isAutoExpandNeeded() {\n    let rootFieldsMoreThanNeed = false;\n    if (this._parentView && this._parentView._isAutoExpandNeeded) {\n      rootFieldsMoreThanNeed = true;\n    } else if (Object.keys(this.value).length >= // Object.getOwnPropertyNames\n    this._console.params[this._rootViewType].minFieldsToExpand) {\n      rootFieldsMoreThanNeed = true;\n    }\n    if (this._viewType !== null &&\n    this._currentDepth <= this._console.params[this._rootViewType].expandDepth &&\n    rootFieldsMoreThanNeed &&\n    !this._console.params[this._rootViewType].exclude.includes(this._viewType)) {\n      return true;\n    }\n    return false;\n  }\n\n  _getHeadErrorContent() {\n    return {\n      elOrStr: this._value.toString(),\n      isShowConstructor: false,\n      isShowElements: true\n    };\n  }\n\n  _toggleContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item item-content\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value, false).fragment);\n      this._contentContainerEl.appendChild(this._proxiedContentEl);\n    }\n    this._contentContainerEl.classList.toggle(Class.CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW);\n  }\n\n  _hideContent() {\n    this._proxiedContentEl.style.display = `none`;\n  }\n\n  _additionHeadClickHandler() {}\n\n  _setHeadClickHandler(headEl) {\n    this._setCursorPointer();\n    headEl.addEventListener(`click`, (evt) => {\n      evt.preventDefault();\n      this._toggleContent();\n      this._additionHeadClickHandler();\n    });\n  }\n\n  _setCursorPointer() {\n    this.el.classList.add(Class.CONSOLE_ITEM_POINTER);\n  }\n\n  static createEntryEl(index, valueEl, withoutKey) {\n    const entryEl = getElement(`\\\n<span class=\"entry-container__entry\">\\\n  ${withoutKey ? `` : `<span class=\"entry-container__key\">${index}</span>`}<span class=\"entry-container__value-container\"></span>\\\n</span>`);\n    const valueContEl = entryEl.querySelector(`.entry-container__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","/* eslint guard-for-in: \"off\"*/\nimport TypeView from '../type-view';\n// import {createTypedView} from '../utils';\nimport {Mode, Class, ViewType} from '../enums';\n\n\nexport default class ObjectView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    if (!params.parentView) {\n      this._rootViewType = ViewType.OBJECT;\n    }\n    this._viewType = ViewType.OBJECT;\n    this._entries = new Map();\n    this._isOpened = false;\n  }\n\n  /**\n   * Шаблон\n   * @override\n   * Чтобы окружить фигурными скобками тело объекта, добавьте к элемену с классом\n   * Class.CONSOLE_ITEM_CONTENT_CONTAINTER\n   * класс\n   * Class.ENTRY_CONTAINER_BRACED\n   *\n   **/\n  get template() {\n    return `\\\n<div class=\"console__item item item_object\">\\\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\">\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">${this.value.constructor.name}</span>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS} entry-container entry-container_head entry-container_type_object\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container entry-container_type_object\"></div>\n</div>`;\n  }\n\n  bind() {\n    const headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    const headElementsEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    const headInfoEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_INFO}`);\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n\n    const {elOrStr, isShowConstructor, isShowElements, isBraced, isOpeningDisabled, isOversize, isStringified} = this._getHeadContent();\n    if (isBraced) {\n      headElementsEl.classList.add(Class.ENTRY_CONTAINER_BRACED);\n    }\n    if (isOversize) {\n      headElementsEl.classList.add(Class.ENTRY_CONTAINER_OVERSIZE);\n    }\n    if (isShowConstructor) {\n      headInfoEl.classList.add(Class.CONSOLE_ITEM_HEAD_SHOW);\n    }\n    if (isShowElements) {\n      if (elOrStr instanceof HTMLElement || elOrStr instanceof DocumentFragment) {\n        headElementsEl.appendChild(elOrStr);\n      } else {\n        headElementsEl.innerHTML = elOrStr;\n      }\n      headElementsEl.classList.add(Class.CONSOLE_ITEM_HEAD_ELEMENTS_SHOW);\n    }\n\n    if (this._mode === Mode.ERROR && isStringified) {\n      this.el.classList.add(this._mode);\n    }\n\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    if (!isOpeningDisabled) {\n      if (this._isAutoExpandNeeded) {\n        this._toggleContent();\n      }\n      this._setHeadClickHandler(headEl);\n    }\n  }\n\n  _getHeadContent() {\n    if (this._mode === Mode.DIR) {\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.LOG || this._mode === Mode.PROP || this._mode === Mode.ERROR) {\n      return this._getHeadLogContent();\n    } else if (this._mode === Mode.PREVIEW) {\n      return this._getHeadPreviewContent();\n    }\n    return ``;\n  }\n\n  _getHeadPreviewContent() {\n    if (Object.prototype.toString.call(this.value) === `[object Object]`) {\n      return {\n        elOrStr: `...`,\n        isShowConstructor: false,\n        isShowElements: true,\n        isBraced: true\n      };\n    }\n    return this._getHeadDirContent();\n  }\n\n  _getHeadLogContent() {\n    let val;\n    let isShowConstructor = false;\n    let isBraced = true;\n    let isOpeningDisabled = false;\n    let isOversize = false;\n    let isStringified = false;\n\n    if (this.value instanceof HTMLElement) {\n      return this._getHeadDirContent();\n    } else if (this.value instanceof Error) {\n      isBraced = false;\n      val = this.value.toString();\n      isStringified = true;\n    } else if (this.value instanceof Number) {\n      const view = this._console.createTypedView(Number.parseInt(this.value, 10), Mode.PREVIEW, this.nextNestingLevel, this);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof String) {\n      const view = this._console.createTypedView(this.value.toString(), Mode.PREVIEW, this.nextNestingLevel, this);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n      isStringified = true;\n      isBraced = false;\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n      isOpeningDisabled = true;\n      isBraced = false;\n    } else {\n      const obj = this.createContent(this.value, true);\n      val = obj.fragment;\n      isOversize = obj.isOversize;\n      if (this.value.constructor !== Object) {\n        isShowConstructor = true;\n      }\n    }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements: true,\n      isBraced,\n      isOpeningDisabled,\n      isOversize,\n      isStringified\n    };\n  }\n\n  _getHeadDirContent() {\n    let val;\n    let isShowConstructor = false;\n    let isShowElements = true;\n    let isBraced = false;\n    if (this.value instanceof HTMLElement) {\n      let str = this.value.tagName.toLowerCase();\n      str += this.value.id;\n      if (this.value.classList.length) {\n        str += `.` + Array.prototype.join.call(this.value.classList, `.`);\n      }\n      val = str;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n    } else if (this.value instanceof Error) {\n      val = this.value.toString();\n    } else {\n      val = this.value;\n      isShowConstructor = true;\n      isShowElements = false;\n    }\n    // else if (this.value.constructor === GeneratorFunction) {\n    //   return this\n    // }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements,\n      isBraced\n    };\n  }\n\n  createContent(obj, isPreview) {\n    const fragment = document.createDocumentFragment();\n    const keys = Object.keys(obj);\n    const addedKeys = new Set();\n    // TODO: Добавить счётчик, чтобы больше 5 значений не добавлялось\n    for (let key of keys) {\n      if (isPreview && addedKeys.size === this._console.params[this._viewType].maxFieldsInHead) {\n        return {\n          fragment,\n          isOversize: true\n        };\n      }\n      addedKeys.add(key);\n      const val = obj[key];\n      fragment.appendChild(this._createObjectEntryEl(key, val, isPreview));\n    }\n    for (let key of Object.getOwnPropertyNames(obj)) {\n      if (addedKeys.has(key)) {\n        continue;\n      }\n      if (isPreview && addedKeys.size === this._console.params[this._viewType].maxFieldsInHead) {\n        return {\n          fragment,\n          isOversize: true\n        };\n      }\n      addedKeys.add(key);\n      const val = obj[key];\n      fragment.appendChild(this._createObjectEntryEl(key, val, isPreview));\n    }\n    return {\n      fragment,\n      isOversize: false\n    };\n  }\n\n  _createObjectEntryEl(key, val, isPreview) {\n    const view = this._console.createTypedView(val, isPreview ? Mode.PREVIEW : Mode.PROP, this.nextNestingLevel, this);\n    return ObjectView.createEntryEl(key, view.el);\n  }\n}\n","import TypeView from '../type-view';\n// import {createTypedView} from '../utils';\nimport {Mode, Class, ViewType} from '../enums';\n\nexport default class ArrayView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    if (!params.parentView) {\n      this._rootViewType = ViewType.ARRAY;\n    }\n    this._viewType = ViewType.ARRAY;\n    this._elements = new Map();\n    this._isOpened = false;\n  }\n\n  /**\n   * Шаблон\n   * @override\n   * Чтобы окружить квадратными скобками тело объекта, добавьте к элемену с классом\n   * Class.CONSOLE_ITEM_CONTENT_CONTAINTER\n   * класс\n   * Class.ENTRY_CONTAINER_BRACED\n   *\n   **/\n  get template() {\n    return `\\\n<div class=\"console__item item item_array\">\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\">\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">${this.value.constructor.name}</span>\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH}\">${this.value.length}</span>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS} entry-container entry-container_head entry-container_braced entry-container_type_array\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container entry-container_type_array\"></div>\n</div>`;\n  }\n\n  bind() {\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    this.headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    this.headInfoEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_INFO}`);\n    this.headElementsEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    this.headElementsLengthEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH}`);\n    const {isShowConstructor, isShowElements, isShowLength} = this._getHeadContent();\n    if (isShowConstructor) {\n      this._toggleConstructor(this.headInfoEl, true);\n    }\n    if (isShowElements) {\n      this.headElementsEl.appendChild(this.createContent(this.value, true).fragment);\n      this._toggleHeadElements(this.headElementsEl, true);\n    }\n    if (isShowLength) {\n      this._toggleLength(this.headElementsLengthEl, true);\n    }\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    if (this._isAutoExpandNeeded) {\n      this._toggleContent();\n    }\n    this._setHeadClickHandler(this.headEl);\n  }\n\n  _additionHeadClickHandler() {\n    if (this._mode === Mode.PROP) {\n      this._toggleConstructor();\n      this._toggleHeadElements();\n    }\n  }\n\n  _toggleConstructor() {\n    this.headInfoEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_SHOW);\n  }\n\n  _toggleLength() {\n    this.headElementsLengthEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW);\n  }\n\n  _toggleHeadElements() {\n    this.headElementsEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_ELEMENTS_SHOW);\n  }\n\n  _getHeadContent() {\n    let isShowConstructor = false;\n    let isShowElements = true;\n    let isShowLength = this.value.length > 1;\n    if (this._mode === Mode.DIR) {\n      isShowConstructor = true;\n      isShowElements = false;\n    // } else if (this._mode === Mode.PROP) {\n    } else if (this._mode === Mode.PREVIEW) {\n      isShowConstructor = true;\n      isShowElements = false;\n      isShowLength = true;\n    } else if (this._mode === Mode.ERROR) {\n      return this._getHeadErrorContent();\n    }\n    return {\n      isShowConstructor,\n      isShowElements,\n      isShowLength\n    };\n  }\n\n  createContent(arr, isPreview) {\n    const keys = Object.keys(arr);\n    const addedKeys = new Set();\n    const fragment = document.createDocumentFragment();\n    for (let key of keys) {\n      addedKeys.add(key);\n      const val = arr[key];\n      fragment.appendChild(this._createArrayEntryEl(key, val, isPreview));\n    }\n    for (let key of Object.getOwnPropertyNames(arr)) {\n      if (addedKeys.has(key)) {\n        continue;\n      }\n      if (isPreview && keys.indexOf(key) === -1) {\n        continue;\n      }\n      const val = arr[key];\n      fragment.appendChild(this._createArrayEntryEl(key, val, isPreview));\n    }\n    return {fragment};\n  }\n\n  _createArrayEntryEl(key, val, isPreview) {\n    const isKeyNaN = Number.isNaN(Number.parseInt(key, 10));\n    const view = this._console.createTypedView(val, isPreview ? Mode.PREVIEW : Mode.PROP, this.nextNestingLevel, this);\n    return ArrayView.createEntryEl(key, view.el, isPreview ? !isKeyNaN : isPreview);\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, Class, ViewType} from '../enums';\n\nconst MAX_PREVIEW_FN_BODY_LENGTH = 43;\n\nconst FnType = {\n  PLAIN: `plain`,\n  ARROW: `arrow`,\n  CLASS: `class`\n};\n\n// arguments, caller, length, name, prototype, __proto__, [[FunctionLocation]], [[Scopes]]\n\n// if .caller not accessed — не выводим\n// if prototype undefined — не выводим\n// name — если неименованная — получает имя переменной, в которую записана\n// если именнованная — то имя ф-ии\n\nexport default class FunctionView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    if (!params.parentView) {\n      this._rootViewType = ViewType.FUNCTION;\n    }\n    this._viewType = ViewType.FUNCTION;\n    this._isOpened = false;\n    this._fnType = FunctionView.checkFnType(this.value);\n  }\n\n  get template() {\n    let tpl = `<div class=\"console__item item item_function ${this._mode === Mode.ERROR ? `${this._mode}` : ``}\">`;\n    switch (this._mode) {\n      case Mode.PREVIEW:\n        tpl += `f`;\n        break;\n      case Mode.PROP:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadPropMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>`;\n        break;\n      case Mode.DIR:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadDirMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>`;\n        break;\n      case Mode.LOG:\n      case Mode.ERROR:\n        tpl += this._getLogMarkup();\n        break;\n    }\n    tpl += `</div>`;\n    return tpl;\n  }\n\n  bind() {\n    if (this._mode !== Mode.DIR && this._mode !== Mode.PROP) {\n      return;\n    }\n\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    const headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    // previewEl.appendChild(this.createPreview(this.value, true));\n    if (this._isAutoExpandNeeded) {\n      this._toggleContent();\n    }\n    this._setHeadClickHandler(headEl);\n  }\n\n  _getHeadPropMarkup() {\n    const {name, params, lines} = this.parseFunction(this.value);\n    const joinedLines = lines.join(`\\n`);\n\n    let markup = `\\\n<span>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}`;\n    if (this._fnType !== FnType.CLASS) {\n      markup += `{${joinedLines.length <= MAX_PREVIEW_FN_BODY_LENGTH ? joinedLines : `...`}}`;\n    }\n    markup += `</span>`;\n    return markup;\n  }\n\n  _getHeadDirMarkup() {\n    const {name, params} = this.parseFunction(this.value);\n\n    let markup = `\\\n  <span>\\\n  ${this._fnType === FnType.CLASS ? `class ` : ``}\\\n  ${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n  ${name ? name : ``}\\\n  ${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}</span>`;\n    return markup;\n  }\n\n  _getLogMarkup() {\n    return `<pre>${this.value.toString()}</pre>`;\n    // const {name, params, lines} = this.parseFunction(this.value);\n    /* return `\\\n<pre>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `function ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}{\n${lines.join(`\\n`)}\n}\n</pre>`;*/\n  }\n\n  static checkFnType(fn) {\n    let str = fn.toString();\n    const firstParenthesisIndex = str.indexOf(`(`);\n\n    const classIndex = str.indexOf(`class`);\n    const arrowIndex = str.indexOf(`=>`);\n    if (classIndex !== -1 && classIndex < firstParenthesisIndex) {\n      return FnType.CLASS;\n    } else if (arrowIndex !== -1 && arrowIndex > firstParenthesisIndex) {\n      return FnType.ARROW;\n    }\n    return FnType.PLAIN;\n  }\n\n  parseParams(funString) {\n    const paramsStart = funString.indexOf(`(`);\n    const paramsEnd = funString.indexOf(`)`);\n\n    const paramsContent = funString.substring(paramsStart + 1, paramsEnd).trim();\n\n    return paramsContent ? paramsContent.split(`,`).map((it) => it.trim()) : [];\n  }\n\n  parseName(funString) {\n    let endingChar;\n    if (this._fnType === FnType.CLASS) {\n      endingChar = `{`;\n    } else if (this._fnType === FnType.PLAIN) {\n      endingChar = `(`;\n    }\n    let name;\n    const re = new RegExp(`(?:class|function)\\\\s+(\\\\w+)\\\\s*(?:\\\\${endingChar})`);\n    const ex = re.exec(funString);\n    if (ex !== null) {\n      name = ex[1];\n    }\n    return name;\n  }\n\n  parseBody(funString) {\n    const bodyStart = funString.indexOf(`{`);\n    const bodyEnd = funString.lastIndexOf(`}`);\n\n    const bodyContent = funString.substring(bodyStart + 1, bodyEnd).trim();\n\n    if (!bodyContent) {\n      return [];\n    }\n\n    return bodyContent.split(`\\n`).map(function (it) {\n      return it.trim();\n    });\n  }\n\n  parseFunction(fnOrString) {\n    let str;\n    if (typeof fnOrString !== `string`) {\n      str = fnOrString.toString();\n    }\n    return {\n      name: fnOrString.name, // this.parseName(str),\n      params: this.parseParams(str),\n      lines: this.parseBody(str)\n    };\n  }\n\n  createContent(fn) {\n    const fragment = document.createDocumentFragment();\n    const fnKeys = [`name`, `prototype`, `caller`, `arguments`, `length`, `__proto__`];\n    const keys = Object.keys(fn).concat(fnKeys);\n    for (let key of keys) {\n      let value;\n      try {\n        value = fn[key];\n      } catch (err) {\n        continue;\n      }\n      const view = this._console.createTypedView(value, Mode.PROP, this.nextNestingLevel, this);\n      const entryEl = FunctionView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return {fragment};\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nconst STRING_COLLAPSED = `string_collapsed`;\n\nexport default class PrimitiveView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this._viewType = ViewType.PRIMITIVE;\n  }\n\n  get template() {\n    const type = this._type;\n    let value = this.value;\n    let html = ``;\n    if (type === `string` || type === `symbol`) {\n      if (type === `symbol`) {\n        value = value.toString();\n      }\n      value = this.escapeHtml(value);\n    }\n    switch (type) {\n      case `undefined`:\n      case `null`:\n      case `boolean`:\n        html = `<div class=\"console__item item item_primitive ${type}\">${value}</div>`;\n        break;\n\n      case `number`:\n        if (Number.isNaN(value)) {\n          html = `<div class=\"console__item item item_primitive NaN\">NaN</div>`;\n        } else if ((value === Infinity || value === -Infinity)) {\n          html = `<div class=\"console__item item item_primitive number\">${(value === -Infinity ? `-` : ``)}Infinity</div>`;\n        } else {\n          html = `<div class=\"console__item item item_primitive ${type}\">${value}</div>`;\n        }\n        break;\n\n      case `string`:\n        html = `<pre class=\"console__item item item_primitive string ${this.mode === Mode.PROP ? STRING_COLLAPSED : ``} ${this.mode === Mode.ERROR ? `${this.mode}` : ``}\">${value}</pre>`;\n        break;\n      case `symbol`:\n        html = `<div class=\"console__item item item_primitive symbol\">${value}</div>`;\n        break;\n\n      case `object`:\n        if (value === null) {\n          html = `<div class=\"console__item item item_primitive null\">${value}</div>`;\n          break;\n        }\n    }\n    return html;\n  }\n\n  bind() {\n    if (this.mode === Mode.PROP && this.type === `string`) {\n      this._setCursorPointer();\n      this.el.addEventListener(`click`, (evt) => {\n        evt.preventDefault();\n        this.el.classList.toggle(STRING_COLLAPSED);\n      });\n    }\n  }\n\n  escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, `&amp;`)\n        .replace(/</g, `&lt;`)\n        .replace(/>/g, `&gt;`)\n        .replace(/\"/g, `&quot;`)\n        .replace(/'/g, `&#039;`);\n  }\n}\n","/* eslint no-undefined: 0 */\n\n// import FunctionView from '../function/function-view';\nimport Console from '../main';\nimport {Mode} from '../enums';\n\nconst cons = new Console(document.body);\n\n// declare consts here\n//\n// const arr1 = [1, 2, 3];\n// const arr2 = [1, 2, 3];\n// arr2.test = 123;\n// const nestedArr = [1, 2, ``, [1, 2, ``]];\nconst str1 = `Here is console log`;\nconst str2 = `\n  Here is console log\n  sdadsda\nasddsd`;\nconst primitiveNumber = 123;\n// const currYearText = `current year: `;\n// const currYearDate = (new Date()).getFullYear();\n//\n// const arr3 = [\n//   {key1: `value1`},\n//   {key2: `value2`}\n// ];\n//\nclass Person {\n  constructor(val) {\n    if (val === 123) {\n      this._bar = val;\n    }\n  }\n}\n\nconst arrowFn1 = (bar = 123) => {return 123;};\nconst arrowFn2 = (bar = 123) => {`sssssssssssssssssssssssssssssssssssssssss`};\nconst arrowFn3 = (bar = 123) => {`sssssssssssssssssssssssssssssssssssssssssss`};\nfunction plainFn (bar456 = 123) {return 123;}\nconst exprFn = function (bar1 = 123) {return 123;}\nconst exprNamedFn = function named (bar2 = 123) {return 123;}\n//\n// const num = new Number(1)\n// const date = new Date();\n// const str = new String(`qwe`);\n//\n// const div = document.querySelector(`div`);\n//\n// const kot = {\n//   cat: {\n//     name: `Сергей Сергеевич`,\n//     kittens: [{\n//       name: `Иван Васильич`,\n//       kittens: [\n//         {name: `Пётр Иванович`}\n//       ]\n//     }]\n//   }\n// };\n//\n// class Cat {\n//   constructor(name, age = 0, male = true) {\n//     this.name = name;\n//     this.age = age;\n//     this.male = male;\n//   }\n//\n//   eat(food) {\n//     return `${this.name} ate ${food}`;\n//   }\n//\n//   meow() {\n//     return `Мяу!`;\n//   }\n// }\n//\n// const o1 = {};\n// o1.b = {o1: o1};\n// const o2 = {oo: 1, b: ``, arr1, arr2, nestedArr, e: {b: 1}, o1};\n// const o3 = {Person, arrowFn1, arrowFn2, arrowFn3, plainFn, exprFn, exprNamedFn};\n// const o4 = {num, str};\n//\n// const cat = new Cat(`Keks`, 2);\n// const err = new Error(`new Error`);\n// const errObjPlain = new Error(o3);\n// const errNum = new Error(num);\n// const typeErr = new TypeError(`new TypeError`);\n// const int8Arr = new Int8Array();\n// const reConstr = new RegExp(`regexpConstr`);\n// const reLiteral = /reLiteral/;\nconst sym = Symbol(`sym`);\n// const ab = new ArrayBuffer();\n\ndescribe(`Check primitives: `, () => {\n  const defaultMode = Mode.LOG;\n  it(`any primitive has class \"item_primitive\"`, () => {\n    const primitiveEls = [\n      cons.createTypedView(str1, defaultMode).el,\n      cons.createTypedView(primitiveNumber, defaultMode).el,\n      cons.createTypedView(sym, defaultMode).el,\n      cons.createTypedView(NaN, defaultMode).el,\n      cons.createTypedView(null, defaultMode).el,\n      cons.createTypedView(true, defaultMode).el,\n      cons.createTypedView(undefined, defaultMode).el\n    ];\n    assert(primitiveEls.every((el) => {\n      return el.classList.contains(`item_primitive`);\n    }));\n  });\n  it(`string`, () => {\n    const el = cons.createTypedView(str1, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`string`) &&\n        el.textContent === str1\n    );\n  });\n  it(`string prop mode`, () => {\n    const el = cons.createTypedView(str1, Mode.PROP).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`string`) &&\n        el.classList.contains(`string_collapsed`) &&\n        el.textContent === str1\n    );\n  });\n  it(`multiline string`, () => {\n    const el = cons.createTypedView(str2, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`string`) &&\n        str2.includes(el.textContent)\n    );\n  });\n  it(`number`, () => {\n    const el = cons.createTypedView(primitiveNumber, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`number`) &&\n        el.textContent === primitiveNumber.toString()\n    );\n  });\n  it(`symbol`, () => {\n    const el = cons.createTypedView(sym, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`symbol`) &&\n        el.textContent === sym.toString()\n    );\n  });\n  it(`NaN`, () => {\n    const el = cons.createTypedView(NaN, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`NaN`) &&\n        el.textContent === `NaN`\n    );\n  });\n  it(`null`, () => {\n    const el = cons.createTypedView(null, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`null`) &&\n        el.textContent === `null`\n    );\n  });\n  it(`boolean`, () => {\n    const el = cons.createTypedView(true, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`boolean`) &&\n        el.textContent === `true`\n    );\n  });\n  it(`undefined`, () => {\n    const el = cons.createTypedView(undefined, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`undefined`) &&\n        el.textContent === `undefined`\n    );\n  });\n});\n\n// describe(`Check functions: `, () => {\n//   const fnEls = [\n//     cons.createTypedView(arrowFn1, Mode.PREVIEW).el,\n//     cons.createTypedView(plainFn, Mode.PREVIEW).el,\n//     cons.createTypedView(exprFn, Mode.PREVIEW).el,\n//     cons.createTypedView(exprNamedFn, Mode.PREVIEW).el,\n//     cons.createTypedView(Person, Mode.PREVIEW).el\n//   ];\n//   it(`any function has class \"item_function\"`, () => {\n//     assert(fnEls.every((el) => {\n//       return el.classList.contains(`item_function`);\n//     }));\n//   });\n//   it(`any function in preview === \"f\"`, () => {\n//     assert(fnEls.every((el) => {\n//       return el.textContent === `f`;\n//     }));\n//   });\n//   it(`class dir and prop`, () => {\n//     const classEls = [\n//       cons.createTypedView(Person, Mode.DIR).el,\n//       cons.createTypedView(Person, Mode.PROP).el\n//     ];\n//     assert(classEls.every((el) => {\n//       return el.textContent.startsWith(`class ${Person.name}`);\n//     }));\n//   });\n// });\n","import ObjectView from './object/object-view';\nimport ArrayView from './array/array-view';\nimport FunctionView from './function/function-view';\nimport PrimitiveView from './primitive/primitive-view';\nimport {getElement} from './utils';\nimport {Mode} from './enums';\n\nconst MAX_HEAD_ELEMENTS_LENGTH = 5;\n\n/**\n * Console\n * @class\n */\nexport default class Console {\n  /**\n   * Initialize console into container\n   * @param {HTMLElement} container — console container\n   * @param {{}} params — parameters\n   * @property {number} params.minFieldsToExpand — min number of fields in obj to expand\n   * @property {number} params.maxFieldsInHead — max number of preview fields inside head\n   * @property {number} params.expandDepth — level of depth to expand\n   **/\n  constructor(container, params = {}) {\n    if (!container) {\n      throw new Error(`Console is not inited!`);\n    }\n    this._container = container;\n    this.params = {\n      object: this._parseParams(params.object, `object`),\n      array: this._parseParams(params.array, `array`),\n      function: this._parseParams(params.function, `function`)\n    };\n  }\n\n  _parseParams(paramsObject, paramName) {\n    if (paramsObject) {\n      // Set this._expandDepth and this._minFieldsToExpand only if expandDepth provided and > 0\n      if (typeof paramsObject.expandDepth === `number` &&\n      paramsObject.expandDepth > 0) {\n\n        paramsObject.minFieldsToExpand = (\n          typeof paramsObject.minFieldsToExpand === `number` &&\n          paramsObject.minFieldsToExpand > 0\n        ) ? paramsObject.minFieldsToExpand : 0;\n      }\n\n      paramsObject.maxFieldsInHead = (\n        typeof paramsObject.maxFieldsInHead === `number` &&\n        paramsObject.maxFieldsInHead > 0\n      ) ? paramsObject.maxFieldsInHead : MAX_HEAD_ELEMENTS_LENGTH;\n    } else {\n      paramsObject = {};\n      if (paramName === `object`) {\n        paramsObject.maxFieldsInHead = MAX_HEAD_ELEMENTS_LENGTH;\n      }\n    }\n    if (!Array.isArray(paramsObject.exclude)) {\n      paramsObject.exclude = [];\n    }\n    return paramsObject;\n  }\n\n  /**\n   * Subscribe on log event fired\n   * @abstract\n   **/\n  onlog() {}\n\n  /**\n   * Subscribe on dir event fired\n   * @abstract\n   **/\n  ondir() {}\n\n  /**\n   * Subscribe on error event fired\n   * @abstract\n   **/\n  onerror() {}\n\n  /**\n   * Equivalent to console.log\n   * Push rest of arguments into container\n   */\n  log(...rest) {\n    this._container.appendChild(this._getRowEl(rest, Mode.LOG));\n    this.onlog();\n  }\n\n  /**\n   * Equivalent to console.error\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  error(val) {\n    const el = getElement(`<div class=\"console__row console__row_error\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.ERROR).el);\n    this._container.appendChild(el);\n    this.onerror();\n  }\n\n  /**\n   * Equivalent to console.dir\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  dir(val) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.DIR).el);\n    this._container.appendChild(el);\n    this.ondir();\n  }\n\n  /**\n   * Clean container\n   */\n  clean() {\n    this._container.innerHTML = ``;\n  }\n\n  createTypedView(val, mode, depth, parentView) {\n    const params = {val, mode, depth, parentView, type: typeof val};\n    let view;\n    switch (params.type) {\n      case `function`:\n        view = new FunctionView(params, this);\n        break;\n      case `object`:\n        if (val !== null) {\n          if (Array.isArray(val)) {\n            view = new ArrayView(params, this);\n          } else {\n            view = new ObjectView(params, this);\n          }\n        } else {\n          view = new PrimitiveView(params, this);\n        }\n        break;\n      default:\n        view = new PrimitiveView(params, this);\n        break;\n    }\n    return view;\n  }\n\n  _getRowEl(entries, mode) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    entries.forEach((val) => {\n      el.appendChild(this.createTypedView(val, mode).el);\n    });\n    return el;\n  }\n\n  /**\n   * get innerHTML of container\n   */\n  get sourceLog() {\n    return this._container.innerHTML;\n  }\n\n  /**\n   * Extend console\n   * @static\n   * @param {{}} consoleObject\n   * @return {{}} extended console\n   */\n  static extend(consoleObject) {\n    consoleObject.log = this.log;\n    consoleObject.info = this.log;\n\n    consoleObject.error = this.error;\n    consoleObject.warn = this.error;\n\n    consoleObject.dir = this.dir;\n\n    return consoleObject;\n  }\n}\n"]}