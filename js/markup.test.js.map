{"version":3,"sources":["js/abstract-view.js","js/enums.js","js/type-view.js","js/object/object-view.js","js/array/array-view.js","js/function/function-view.js","js/primitive/primitive-view.js","js/utils.js","js/tests/markup.test.js"],"names":["AbstractView","getElement","this","template","_el","render","bind","Mode","Class","TypeView","value","type","isPrimitive","_value","_type","_isPrimitive","_isOpened","stack","_proxiedContentEl","appendChild","createContent","fragment","_contentContainerEl","classList","toggle","style","display","headEl","_setCursorPointer","addEventListener","evt","preventDefault","_toggleContent","_additionHeadClickHandler","el","add","index","valueEl","withoutKey","entryEl","querySelector","ObjectView","mode","_mode","_entries","Map","headElementsEl","headInfoEl","_getHeadContent","elOrStr","_getHeadContent2","isShowConstructor","isShowElements","isBraced","isOpeningDisabled","isOversize","HTMLElement","DocumentFragment","innerHTML","_setHeadClickHandler","_getHeadDirContent","_getHeadLogContent","_getHeadPreviewContent","_getHeadErrorContent","Object","prototype","toString","call","val","Error","Number","createTypedView","parseInt","String","Date","RegExp","source","flags","obj","constructor","str","tagName","toLowerCase","id","length","Array","join","isPreview","document","createDocumentFragment","keys","Set","key","size","view","createEntryEl","_step","getOwnPropertyNames","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","has","name","ArrayView","arr","_elements","headElementsLengthEl","isShowLength","_toggleConstructor","_toggleHeadElements","_toggleLength","ownPropertyNames","indexInKeys","indexOf","isKeyNaN","isNaN","FnType","FunctionView","fn","_fnType","checkFnType","parseFunction","_parseFunction","params","joinedLines","lines","markup","_parseFunction2","funString","paramsStart","paramsEnd","paramsContent","substring","trim","split","map","it","endingChar","ex","exec","bodyStart","bodyEnd","lastIndexOf","bodyContent","fnOrString","parseParams","parseBody","err","tpl","_getHeadPropMarkup","_getHeadDirMarkup","_getLogMarkup","firstParenthesisIndex","classIndex","arrowIndex","STRING_COLLAPSED","PrimitiveView","unsafe","replace","html","escapeHtml","Infinity","htmlMarkup","div","createElement","firstElementChild","_typeof","isArray","str1","str2","sym","describe","defaultMode","primitiveEls","undefined","every","contains","textContent","includes","NaN"],"mappings":"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","file":"markup.test.js","sourcesContent":["import {getElement} from './utils';\n\nexport default class AbstractView {\n  constructor() {}\n\n  /**\n   * @abstract\n   * @return {string}\n   */\n  get template() {}\n\n  get el() {\n    if (!this._el) {\n      this._el = this.render();\n      this.bind(this._el);\n    }\n    return this._el;\n  }\n\n  render() {\n    return getElement(this.template);\n  }\n\n  bind() {}\n}\n","export const Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  PROP: `prop`,\n  ERROR: `error`\n};\n\nexport const Class = {\n  CONSOLE_ITEM_HEAD: `item-head`,\n  CONSOLE_ITEM_POINTER: `item_pointer`,\n  CONSOLE_ITEM_HEAD_SHOW: `item-head_show`,\n  ENTRY_CONTAINER_BRACED: `entry-container_braced`,\n  ENTRY_CONTAINER_OVERSIZE: `entry-container_oversize`,\n  CONSOLE_ITEM_HEAD_PARENTHESED: `item-head_parenthesed`,\n  CONSOLE_ITEM_HEAD_INFO: `item-head-info`,\n  CONSOLE_ITEM_HEAD_ELEMENTS: `item-head-elements`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_SHOW: `item-head-elements_show`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER: `item-content-container`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW: `item-content-container_show`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH: `item-head-elements-length`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW: `item-head-elements-length_show`\n};\n","import AbstractView from './abstract-view';\nimport {getElement} from './utils';\nimport {Class} from './enums';\n\nexport default class TypeView extends AbstractView {\n  constructor(value, type, isPrimitive) {\n    super();\n    this._value = value;\n    this._type = type;\n    this._isPrimitive = isPrimitive;\n    this._isOpened = false;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get isPrimitive() {\n    return this._isPrimitive;\n  }\n\n  _getHeadErrorContent() {\n    return {\n      elOrStr: `<pre>${this._value.stack}</pre>`,\n      isShowConstructor: false,\n      isShowElements: true\n    };\n  }\n\n  _toggleContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item item-content\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value, false).fragment);\n      this._contentContainerEl.appendChild(this._proxiedContentEl);\n    }\n    this._contentContainerEl.classList.toggle(Class.CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW);\n  }\n\n  _hideContent() {\n    this._proxiedContentEl.style.display = `none`;\n  }\n\n  _additionHeadClickHandler() {}\n\n  _setHeadClickHandler(headEl) {\n    this._setCursorPointer();\n    headEl.addEventListener(`click`, (evt) => {\n      evt.preventDefault();\n      this._toggleContent();\n      this._additionHeadClickHandler();\n    });\n  }\n\n  _setCursorPointer() {\n    this.el.classList.add(Class.CONSOLE_ITEM_POINTER);\n  }\n\n  static createEntryEl(index, valueEl, withoutKey) {\n    const entryEl = getElement(`\\\n<span class=\"entry-container__entry\">\\\n  ${withoutKey ? `` : `<span class=\"entry-container__key\">${index}</span>`}<span class=\"entry-container__value-container\"></span>\\\n</span>`);\n    const valueContEl = entryEl.querySelector(`.entry-container__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","/* eslint guard-for-in: \"off\"*/\nimport TypeView from '../type-view';\nimport {createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nconst MAX_HEAD_ELEMENTS_LENGTH = 5;\n\nexport default class ObjectView extends TypeView {\n  constructor(value, mode) {\n    super(value, `object`, false);\n    this._mode = mode;\n    this._entries = new Map();\n    this._isOpened = false;\n  }\n\n  /**\n   * Шаблон\n   * @override\n   * Чтобы окружить фигурными скобками тело объекта, добавьте к элемену с классом\n   * Class.CONSOLE_ITEM_CONTENT_CONTAINTER\n   * класс\n   * Class.ENTRY_CONTAINER_BRACED\n   *\n   **/\n  get template() {\n    return `\\\n<div class=\"console__item item item_object ${this._mode === Mode.ERROR ? `${this._mode}` : ``}\">\\\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\">\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">${this.value.constructor.name}</span>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS} entry-container entry-container_head entry-container_type_object\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container entry-container_type_object\"></div>\n</div>`;\n  }\n\n  bind() {\n    const headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    const headElementsEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    const headInfoEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_INFO}`);\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n\n    const {elOrStr, isShowConstructor, isShowElements, isBraced, isOpeningDisabled, isOversize} = this._getHeadContent();\n    if (isBraced) {\n      headElementsEl.classList.add(Class.ENTRY_CONTAINER_BRACED);\n    }\n    if (isOversize) {\n      headElementsEl.classList.add(Class.ENTRY_CONTAINER_OVERSIZE);\n    }\n    if (isShowConstructor) {\n      headInfoEl.classList.add(Class.CONSOLE_ITEM_HEAD_SHOW);\n    }\n    if (isShowElements) {\n      if (elOrStr instanceof HTMLElement || elOrStr instanceof DocumentFragment) {\n        headElementsEl.appendChild(elOrStr);\n      } else {\n        headElementsEl.innerHTML = elOrStr;\n      }\n      headElementsEl.classList.add(Class.CONSOLE_ITEM_HEAD_ELEMENTS_SHOW);\n    }\n    if (this._mode === Mode.PREVIEW || this._mode === Mode.ERROR) {\n      return;\n    }\n    if (!isOpeningDisabled) {\n      this._setHeadClickHandler(headEl);\n    }\n  }\n\n  _getHeadContent() {\n    if (this._mode === Mode.DIR) {\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.LOG || this._mode === Mode.PROP) {\n      return this._getHeadLogContent();\n    } else if (this._mode === Mode.PREVIEW) {\n      return this._getHeadPreviewContent();\n    } else if (this._mode === Mode.ERROR) {\n      return this._getHeadErrorContent();\n    }\n    return ``;\n  }\n\n  _getHeadPreviewContent() {\n    if (Object.prototype.toString.call(this.value) === `[object Object]`) {\n      return {\n        elOrStr: `...`,\n        isShowConstructor: false,\n        isShowElements: true,\n        isBraced: true\n      };\n    }\n    return this._getHeadDirContent();\n  }\n  _getHeadLogContent() {\n    let val;\n    let isShowConstructor = false;\n    let isBraced = true;\n    let isOpeningDisabled = false;\n    let isOversize = false;\n\n    if (this.value instanceof HTMLElement) {\n      return this._getHeadDirContent();\n    } else if (this.value instanceof Error) {\n      isBraced = false;\n      val = this.value.stack;\n    } else if (this.value instanceof Number) {\n      const view = createTypedView(Number.parseInt(this.value, 10), Mode.PREVIEW);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof String) {\n      const view = createTypedView(this.value.toString(), Mode.PREVIEW);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n      isBraced = false;\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n      isOpeningDisabled = true;\n      isBraced = false;\n    } else {\n      const obj = this.createContent(this.value, true);\n      val = obj.fragment;\n      isOversize = obj.isOversize;\n      if (this.value.constructor !== Object) {\n        isShowConstructor = true;\n      }\n    }\n    // else if (this.value.constructor === GeneratorFunction) {\n    //   return this\n    // }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements: true,\n      isBraced,\n      isOpeningDisabled,\n      isOversize\n    };\n  }\n\n  _getHeadDirContent() {\n    let val;\n    let isShowConstructor = false;\n    let isShowElements = true;\n    let isBraced = false;\n    if (this.value instanceof HTMLElement) {\n      let str = this.value.tagName.toLowerCase();\n      str += this.value.id;\n      if (this.value.classList.length) {\n        str += `.` + Array.prototype.join.call(this.value.classList, `.`);\n      }\n      val = str;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n    } else if (this.value instanceof Error) {\n      val = this.value.stack;\n    } else {\n      val = this.value;\n      isShowConstructor = true;\n      isShowElements = false;\n    }\n    // else if (this.value.constructor === GeneratorFunction) {\n    //   return this\n    // }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements,\n      isBraced\n    };\n  }\n\n  createContent(obj, isPreview) {\n    const fragment = document.createDocumentFragment();\n    const keys = new Set();\n    // TODO: Добавить счётчик, чтобы больше 5 значений не добавлялось\n    for (let key in obj) {\n      keys.add(key);\n      if (isPreview && keys.size === MAX_HEAD_ELEMENTS_LENGTH) {\n        return {\n          fragment,\n          isOversize: true\n        };\n      }\n      const value = obj[key];\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    for (let key of Object.getOwnPropertyNames(obj)) {\n      if (keys.has(key)) {\n        continue;\n      }\n      keys.add(key);\n      if (isPreview && keys.size === MAX_HEAD_ELEMENTS_LENGTH) {\n        return {\n          fragment,\n          isOversize: true\n        };\n      }\n      const value = obj[key];\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return {\n      fragment,\n      isOversize: false\n    };\n  }\n}\n","import TypeView from '../type-view';\nimport {createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nexport default class ArrayView extends TypeView {\n  constructor(arr, mode) {\n    super(arr, `array`, false);\n    this._mode = mode;\n    this._elements = new Map();\n    this._isOpened = false;\n  }\n\n  /**\n   * Шаблон\n   * @override\n   * Чтобы окружить квадратными скобками тело объекта, добавьте к элемену с классом\n   * Class.CONSOLE_ITEM_CONTENT_CONTAINTER\n   * класс\n   * Class.ENTRY_CONTAINER_BRACED\n   *\n   **/\n  get template() {\n    return `\\\n<div class=\"console__item item item_array\">\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\">\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">${this.value.constructor.name}</span>\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH}\">${this.value.length}</span>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS} entry-container entry-container_head entry-container_braced entry-container_type_array\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container entry-container_type_array\"></div>\n</div>`;\n  }\n\n  bind() {\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    this.headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    this.headInfoEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_INFO}`);\n    this.headElementsEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    this.headElementsLengthEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH}`);\n    const {isShowConstructor, isShowElements, isShowLength} = this._getHeadContent();\n    if (isShowConstructor) {\n      this._toggleConstructor(this.headInfoEl, true);\n    }\n    if (isShowElements) {\n      this.headElementsEl.appendChild(this.createContent(this.value, true).fragment);\n      this._toggleHeadElements(this.headElementsEl, true);\n    }\n    if (isShowLength) {\n      this._toggleLength(this.headElementsLengthEl, true);\n    }\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    this._setHeadClickHandler(this.headEl);\n  }\n\n  _additionHeadClickHandler() {\n    if (this._mode === Mode.PROP) {\n      this._toggleConstructor();\n      this._toggleHeadElements();\n    }\n  }\n\n  _toggleConstructor() {\n    this.headInfoEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_SHOW);\n  }\n\n  _toggleLength() {\n    this.headElementsLengthEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW);\n  }\n\n  _toggleHeadElements() {\n    this.headElementsEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_ELEMENTS_SHOW);\n  }\n\n  _getHeadContent() {\n    let isShowConstructor = false;\n    let isShowElements = true;\n    let isShowLength = this.value.length > 1;\n    if (this._mode === Mode.DIR) {\n      isShowConstructor = true;\n      isShowElements = false;\n    // } else if (this._mode === Mode.PROP) {\n    } else if (this._mode === Mode.PREVIEW) {\n      isShowConstructor = true;\n      isShowElements = false;\n      isShowLength = true;\n    } else if (this._mode === Mode.ERROR) {\n      return this._getHeadErrorContent();\n    }\n    return {\n      isShowConstructor,\n      isShowElements,\n      isShowLength\n    };\n  }\n\n  createContent(arr, isPreview) {\n    const ownPropertyNames = Object.getOwnPropertyNames(arr);\n    const keys = Object.keys(arr);\n    const fragment = document.createDocumentFragment();\n    for (let key of ownPropertyNames) {\n      const value = arr[key];\n      const indexInKeys = keys.indexOf(key);\n      const isKeyNaN = Number.isNaN(Number.parseInt(key, 10));\n      if (isPreview && indexInKeys === -1) {\n        continue;\n      }\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ArrayView.createEntryEl(key, view.el, isPreview ? !isKeyNaN : isPreview);\n      // if (!isPreview) {\n      //   this._elements.set(entryEl, view);\n      // }\n      fragment.appendChild(entryEl);\n    }\n    return {fragment};\n  }\n}\n","import TypeView from '../type-view';\nimport {createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nconst MAX_PREVIEW_FN_BODY_LENGTH = 43;\n\nconst FnType = {\n  PLAIN: `plain`,\n  ARROW: `arrow`,\n  CLASS: `class`\n};\n\n// arguments, caller, length, name, prototype, __proto__, [[FunctionLocation]], [[Scopes]]\n\n// if .caller not accessed — не выводим\n// if prototype undefined — не выводим\n// name — если неименованная — получает имя переменной, в которую записана\n// если именнованная — то имя ф-ии\n\nexport default class FunctionView extends TypeView {\n  constructor(fn, mode) {\n    super(fn, `function`, false);\n    this._mode = mode;\n    this._isOpened = false;\n    this._fnType = FunctionView.checkFnType(fn);\n  }\n\n  get template() {\n    let tpl = `<div class=\"console__item item item_function\">`;\n    switch (this._mode) {\n      case Mode.PREVIEW:\n        tpl += `f`;\n        break;\n      case Mode.PROP:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadPropMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>`;\n        break;\n      case Mode.DIR:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadDirMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>`;\n        break;\n      case Mode.LOG:\n        tpl += this._getLogMarkup();\n        break;\n    }\n    tpl += `</div>`;\n    return tpl;\n  }\n\n  bind() {\n    if (this._mode !== Mode.DIR && this._mode !== Mode.PROP) {\n      return;\n    }\n\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    const headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    // previewEl.appendChild(this.createPreview(this.value, true));\n    this._setHeadClickHandler(headEl);\n  }\n\n  _getHeadPropMarkup() {\n    const {name, params, lines} = this.parseFunction(this.value);\n    const joinedLines = lines.join(`\\n`);\n\n    let markup = `\\\n<span>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}`;\n    if (this._fnType !== FnType.CLASS) {\n      markup += `{${joinedLines.length <= MAX_PREVIEW_FN_BODY_LENGTH ? joinedLines : `...`}}`;\n    }\n    markup += `</span>`;\n    return markup;\n  }\n\n  _getHeadDirMarkup() {\n    const {name, params} = this.parseFunction(this.value);\n\n    let markup = `\\\n  <span>\\\n  ${this._fnType === FnType.CLASS ? `class ` : ``}\\\n  ${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n  ${name ? name : ``}\\\n  ${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}</span>`;\n    return markup;\n  }\n\n  _getLogMarkup() {\n    return `<pre>${this.value.toString()}</pre>`;\n    // const {name, params, lines} = this.parseFunction(this.value);\n    /* return `\\\n<pre>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `function ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}{\n${lines.join(`\\n`)}\n}\n</pre>`;*/\n  }\n\n  static checkFnType(fn) {\n    let str = fn.toString();\n    const firstParenthesisIndex = str.indexOf(`(`);\n\n    const classIndex = str.indexOf(`class`);\n    const arrowIndex = str.indexOf(`=>`);\n    if (classIndex !== -1 && classIndex < firstParenthesisIndex) {\n      return FnType.CLASS;\n    } else if (arrowIndex !== -1 && arrowIndex > firstParenthesisIndex) {\n      return FnType.ARROW;\n    }\n    return FnType.PLAIN;\n  }\n\n  parseParams(funString) {\n    const paramsStart = funString.indexOf(`(`);\n    const paramsEnd = funString.indexOf(`)`);\n\n    const paramsContent = funString.substring(paramsStart + 1, paramsEnd).trim();\n\n    return paramsContent ? paramsContent.split(`,`).map((it) => it.trim()) : [];\n  }\n\n  parseName(funString) {\n    let endingChar;\n    if (this._fnType === FnType.CLASS) {\n      endingChar = `{`;\n    } else if (this._fnType === FnType.PLAIN) {\n      endingChar = `(`;\n    }\n    let name;\n    const re = new RegExp(`(?:class|function)\\\\s+(\\\\w+)\\\\s*(?:\\\\${endingChar})`);\n    const ex = re.exec(funString);\n    if (ex !== null) {\n      name = ex[1];\n    }\n    return name;\n  }\n\n  parseBody(funString) {\n    const bodyStart = funString.indexOf(`{`);\n    const bodyEnd = funString.lastIndexOf(`}`);\n\n    const bodyContent = funString.substring(bodyStart + 1, bodyEnd).trim();\n\n    if (!bodyContent) {\n      return [];\n    }\n\n    return bodyContent.split(`\\n`).map(function (it) {\n      return it.trim();\n    });\n  }\n\n  parseFunction(fnOrString) {\n    let str;\n    if (typeof fnOrString !== `string`) {\n      str = fnOrString.toString();\n    }\n    return {\n      name: fnOrString.name, // this.parseName(str),\n      params: this.parseParams(str),\n      lines: this.parseBody(str)\n    };\n  }\n\n  createContent(fn) {\n    const fragment = document.createDocumentFragment();\n    const keys = [`name`, `prototype`, `caller`, `arguments`, `length`, `__proto__`];\n    for (let key of keys) {\n      let value;\n      try {\n        value = fn[key];\n      } catch (err) {\n        continue;\n      }\n      const view = createTypedView(value, Mode.DIR);\n      const entryEl = FunctionView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return {fragment};\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode} from '../enums';\n\nconst STRING_COLLAPSED = `string_collapsed`;\n\nexport default class PrimitiveView extends TypeView {\n  constructor(value, mode, type) {\n    super(value, type, true);\n    this._mode = mode;\n  }\n\n  get template() {\n    const type = this.type;\n    let value = this.value;\n    let html = ``;\n    if (type === `string` || type === `symbol`) {\n      if (type === `symbol`) {\n        value = value.toString();\n      }\n      value = this.escapeHtml(value);\n    }\n    switch (type) {\n      case `undefined`:\n      case `null`:\n      case `boolean`:\n        html = `<div class=\"console__item item item_primitive ${type}\">${value}</div>`;\n        break;\n\n      case `number`:\n        if (Number.isNaN(value)) {\n          html = `<div class=\"console__item item item_primitive NaN\">NaN</div>`;\n        } else if ((value === Infinity || value === -Infinity)) {\n          html = `<div class=\"console__item item item_primitive number\">${(value === -Infinity ? `-` : ``)}Infinity</div>`;\n        } else {\n          html = `<div class=\"console__item item item_primitive ${type}\">${value}</div>`;\n        }\n        break;\n\n      case `string`:\n        html = `<pre class=\"console__item item item_primitive string ${this._mode === Mode.PROP ? STRING_COLLAPSED : ``}\">${value}</pre>`;\n        break;\n      case `symbol`:\n        html = `<div class=\"console__item item item_primitive symbol\">${value}</div>`;\n        break;\n\n      case `object`:\n        if (value === null) {\n          html = `<div class=\"console__item item item_primitive null\">${value}</div>`;\n          break;\n        }\n    }\n    return html;\n  }\n\n  bind() {\n    if (this._mode === Mode.PROP && this.type === `string`) {\n      this._setCursorPointer();\n      this.el.addEventListener(`click`, (evt) => {\n        evt.preventDefault();\n        this.el.classList.toggle(STRING_COLLAPSED);\n      });\n    }\n  }\n\n  escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, `&amp;`)\n        .replace(/</g, `&lt;`)\n        .replace(/>/g, `&gt;`)\n        .replace(/\"/g, `&quot;`)\n        .replace(/'/g, `&#039;`);\n  }\n}\n","import ObjectView from './object/object-view';\nimport ArrayView from './array/array-view';\nimport FunctionView from './function/function-view';\nimport PrimitiveView from './primitive/primitive-view';\n\nexport const getElement = (htmlMarkup) => {\n  const div = document.createElement(`div`);\n  div.innerHTML = htmlMarkup;\n  return div.firstElementChild;\n};\n\nconst primitiveTypeofs = [\n  `undefined`,\n  `number`,\n  `string`,\n  `boolean`,\n  `symbol`,\n  `object`\n];\n\nexport const getPrimitiveType = (val) => {\n  const type = typeof val;\n\n  if (!primitiveTypeofs.includes(type)) {\n    throw new Error(`Unknown primitive type: ` + type);\n  }\n\n  return type;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\nexport const createTypedView = (val, mode) => {\n  let view;\n  const type = typeof val;\n  switch (type) {\n    case `function`:\n      view = new FunctionView(val, mode);\n      break;\n    case `object`:\n      // TODO: check instanceof Date, String, Boolean, Number\n      if (val !== null) {\n        if (Array.isArray(val)) { // TODO: typedarrays, arraybuffer, etc\n          view = new ArrayView(val, mode);\n        } else {\n          view = new ObjectView(val, mode);\n        }\n      } else {\n        view = new PrimitiveView(val, mode, type);\n      }\n      break;\n    default:\n      view = new PrimitiveView(val, mode, type);\n      break;\n  }\n  return view;\n};\n","/* eslint no-undefined: 0 */\n\n// import FunctionView from '../function/function-view';\nimport {createTypedView} from '../utils';\nimport {Mode} from '../enums';\n\n// declare consts here\n//\n// const arr1 = [1, 2, 3];\n// const arr2 = [1, 2, 3];\n// arr2.test = 123;\n// const nestedArr = [1, 2, ``, [1, 2, ``]];\nconst str1 = `Here is console log`;\nconst str2 = `\n  Here is console log\n  sdadsda\nasddsd`;\nconst primitiveNumber = 123;\n// const currYearText = `current year: `;\n// const currYearDate = (new Date()).getFullYear();\n//\n// const arr3 = [\n//   {key1: `value1`},\n//   {key2: `value2`}\n// ];\n//\nclass Person {\n  constructor(val) {\n    if (val === 123) {\n      this._bar = val;\n    }\n  }\n}\n\nconst arrowFn1 = (bar = 123) => {return 123;};\nconst arrowFn2 = (bar = 123) => {`sssssssssssssssssssssssssssssssssssssssss`};\nconst arrowFn3 = (bar = 123) => {`sssssssssssssssssssssssssssssssssssssssssss`};\nfunction plainFn (bar456 = 123) {return 123;}\nconst exprFn = function (bar1 = 123) {return 123;}\nconst exprNamedFn = function named (bar2 = 123) {return 123;}\n//\n// const num = new Number(1)\n// const date = new Date();\n// const str = new String(`qwe`);\n//\n// const div = document.querySelector(`div`);\n//\n// const kot = {\n//   cat: {\n//     name: `Сергей Сергеевич`,\n//     kittens: [{\n//       name: `Иван Васильич`,\n//       kittens: [\n//         {name: `Пётр Иванович`}\n//       ]\n//     }]\n//   }\n// };\n//\n// class Cat {\n//   constructor(name, age = 0, male = true) {\n//     this.name = name;\n//     this.age = age;\n//     this.male = male;\n//   }\n//\n//   eat(food) {\n//     return `${this.name} ate ${food}`;\n//   }\n//\n//   meow() {\n//     return `Мяу!`;\n//   }\n// }\n//\n// const o1 = {};\n// o1.b = {o1: o1};\n// const o2 = {oo: 1, b: ``, arr1, arr2, nestedArr, e: {b: 1}, o1};\n// const o3 = {Person, arrowFn1, arrowFn2, arrowFn3, plainFn, exprFn, exprNamedFn};\n// const o4 = {num, str};\n//\n// const cat = new Cat(`Keks`, 2);\n// const err = new Error(`new Error`);\n// const errObjPlain = new Error(o3);\n// const errNum = new Error(num);\n// const typeErr = new TypeError(`new TypeError`);\n// const int8Arr = new Int8Array();\n// const reConstr = new RegExp(`regexpConstr`);\n// const reLiteral = /reLiteral/;\nconst sym = Symbol(`sym`);\n// const ab = new ArrayBuffer();\n\ndescribe(`Check primitives: `, () => {\n  const defaultMode = Mode.LOG;\n  it(`any primitive has class \"item_primitive\"`, () => {\n    const primitiveEls = [\n      createTypedView(str1, defaultMode).el,\n      createTypedView(primitiveNumber, defaultMode).el,\n      createTypedView(sym, defaultMode).el,\n      createTypedView(NaN, defaultMode).el,\n      createTypedView(null, defaultMode).el,\n      createTypedView(true, defaultMode).el,\n      createTypedView(undefined, defaultMode).el\n    ];\n    assert(primitiveEls.every((el) => {\n      return el.classList.contains(`item_primitive`);\n    }));\n  });\n  it(`string`, () => {\n    const el = createTypedView(str1, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`string`) &&\n        el.textContent === str1\n    );\n  });\n  it(`string prop mode`, () => {\n    const el = createTypedView(str1, Mode.PROP).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`string`) &&\n        el.classList.contains(`string_collapsed`) &&\n        el.textContent === str1\n    );\n  });\n  it(`multiline string`, () => {\n    const el = createTypedView(str2, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`string`) &&\n        str2.includes(el.textContent)\n    );\n  });\n  it(`number`, () => {\n    const el = createTypedView(primitiveNumber, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`number`) &&\n        el.textContent === primitiveNumber.toString()\n    );\n  });\n  it(`symbol`, () => {\n    const el = createTypedView(sym, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`symbol`) &&\n        el.textContent === sym.toString()\n    );\n  });\n  it(`NaN`, () => {\n    const el = createTypedView(NaN, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`NaN`) &&\n        el.textContent === `NaN`\n    );\n  });\n  it(`null`, () => {\n    const el = createTypedView(null, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`null`) &&\n        el.textContent === `null`\n    );\n  });\n  it(`boolean`, () => {\n    const el = createTypedView(true, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`boolean`) &&\n        el.textContent === `true`\n    );\n  });\n  it(`undefined`, () => {\n    const el = createTypedView(undefined, defaultMode).el;\n    assert(\n        el.classList.contains(`item_primitive`) &&\n        el.classList.contains(`undefined`) &&\n        el.textContent === `undefined`\n    );\n  });\n});\n\n// describe(`Check functions: `, () => {\n//   const fnEls = [\n//     createTypedView(arrowFn1, Mode.PREVIEW).el,\n//     createTypedView(plainFn, Mode.PREVIEW).el,\n//     createTypedView(exprFn, Mode.PREVIEW).el,\n//     createTypedView(exprNamedFn, Mode.PREVIEW).el,\n//     createTypedView(Person, Mode.PREVIEW).el\n//   ];\n//   it(`any function has class \"item_function\"`, () => {\n//     assert(fnEls.every((el) => {\n//       return el.classList.contains(`item_function`);\n//     }));\n//   });\n//   it(`any function in preview === \"f\"`, () => {\n//     assert(fnEls.every((el) => {\n//       return el.textContent === `f`;\n//     }));\n//   });\n//   it(`class dir and prop`, () => {\n//     const classEls = [\n//       createTypedView(Person, Mode.DIR).el,\n//       createTypedView(Person, Mode.PROP).el\n//     ];\n//     assert(classEls.every((el) => {\n//       return el.textContent.startsWith(`class ${Person.name}`);\n//     }));\n//   });\n// });\n"]}