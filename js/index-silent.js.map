{"version":3,"sources":["js/abstract-view.js","js/type-view.js","js/enums.js","js/object/object-view.js","js/array/array-view.js","js/function/function-view.js","js/primitive/primitive-view.js","js/utils.js","js/main.js","js/index-silent.js"],"names":["AbstractView","getElement","this","template","_el","render","bind","TypeView","value","type","isPrimitive","_value","_type","_isPrimitive","Mode","Class","ObjectView","mode","_mode","_entries","Map","_isOpened","headEl","el","querySelector","headElementsEl","headInfoEl","_contentContainerEl","_getHeadContent","elOrStr","_getHeadContent2","isShowConstructor","isShowElements","isBraced","classList","add","style","display","HTMLElement","DocumentFragment","appendChild","innerHTML","addEventListener","_this2","_hideContent","_showContent","_proxiedContentEl","createContent","_displayVal","_getHeadDirContent","_getHeadLogContent","_getHeadPreviewContent","_getHeadErrorContent","Object","prototype","toString","call","val","constructor","Error","stack","Number","createTypedView","parseInt","String","Date","str","tagName","toLowerCase","id","length","Array","join","obj","isPreview","fragment","document","createDocumentFragment","keys","Set","key","view","entryEl","createEntryEl","_step","getOwnPropertyNames","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","has","slice","name","valueEl","ArrayView","arr","_arr","_elements","previewEl","ownPropertyNames","indexInKeys","indexOf","isKeyNaN","isNaN","index","withKey","FnType","FunctionView","fn","_fnType","checkFnType","_parseFunction","_parseFunction2","params","joinedLines","lines","markup","_parseFunction3","funString","paramsStart","paramsEnd","paramsContent","substring","trim","split","map","it","endingChar","ex","RegExp","exec","bodyStart","bodyEnd","lastIndexOf","bodyContent","fnOrString","_parseParams","_parseBody","err","tpl","_getHeadPropMarkup","_getHeadDirMarkup","_getLogMarkup","firstParenthesisIndex","classIndex","arrowIndex","PrimitiveView","evt","preventDefault","toggle","unsafe","replace","html","escapeHtml","Infinity","htmlMarkup","div","createElement","firstElementChild","_typeof","isArray","jsConsoleInit","cont","logger","log","rest","_len","_key","arguments","entries","forEach","code","onlog","error","errOrSmth","clean","getLogSource","dir","_len2","_key2","extend","consoleObject","info","warn","errors","collectErr","push","window","onerror","console","messages","collectMsg","apply","debug","link","jsConsole","body","args","concat","toConsumableArray","rel","href","CSS_URL","head"],"mappings":"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","file":"index-silent.js","sourcesContent":["import {getElement} from './utils';\n\nexport default class AbstractView {\n  constructor() {}\n\n  /**\n   * @abstract\n   * @return {string}\n   */\n  get template() {}\n\n  get el() {\n    if (!this._el) {\n      this._el = this.render();\n      this.bind(this._el);\n    }\n    return this._el;\n  }\n\n  render() {\n    return getElement(this.template);\n  }\n\n  bind() {}\n}\n","import AbstractView from './abstract-view';\n\nexport default class TypeView extends AbstractView {\n  constructor(value, type, isPrimitive) {\n    super();\n    this._value = value;\n    this._type = type;\n    this._isPrimitive = isPrimitive;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get isPrimitive() {\n    return this._isPrimitive;\n  }\n}\n","export const Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  PROP: `prop`,\n  ERROR: `error`\n};\n\nexport const Class = {\n  CONSOLE_ITEM_HEAD: `console__item-head`,\n  CONSOLE_ITEM_HEAD_BRACED: `console__item-head_braced`,\n  CONSOLE_ITEM_HEAD_PARENTHESED: `console__item-head_parenthesed`,\n  CONSOLE_ITEM_HEAD_INFO: `console__item-head-info`,\n  CONSOLE_ITEM_HEAD_ELEMENTS: `console__item-head-elements`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER: `console__item-content-container`\n};\n","/* eslint guard-for-in: \"off\"*/\nimport TypeView from '../type-view';\nimport {getElement, createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nexport default class ObjectView extends TypeView {\n  constructor(value, mode) {\n    super(value, `object`, false);\n    this._mode = mode;\n    this._entries = new Map();\n    this._isOpened = false;\n  }\n\n  get template() {\n    const className = Object.prototype.toString.call(this.value).slice(8, -1);\n    return `\n<div class=\"console__item object ${className} ${this._mode === Mode.ERROR ? `${this._mode}` : ``}\">\\\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\">\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">${this.value.constructor.name}</span>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS}\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}\"></div>\n</div>`;\n  }\n\n  bind() {\n    const headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    const headElementsEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    const headInfoEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_INFO}`);\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    // headEl.appendChild(this.createContent(this.value, true));\n\n    const {elOrStr, isShowConstructor, isShowElements, isBraced} = this._getHeadContent();\n    if (isBraced) {\n      headEl.classList.add(Class.CONSOLE_ITEM_HEAD_BRACED);\n    }\n    if (isShowConstructor) {\n      headInfoEl.style.display = `inline`;\n    }\n    if (isShowElements) {\n      if (elOrStr instanceof HTMLElement || elOrStr instanceof DocumentFragment) {\n        headElementsEl.appendChild(elOrStr);\n      } else {\n        headElementsEl.innerHTML = elOrStr;\n      }\n    }\n    if (this._mode === Mode.PREVIEW || this._mode === Mode.ERROR) {\n      return;\n    }\n\n    headEl.addEventListener(`click`, () => {\n      if (this._isOpened) {\n        this._hideContent();\n      } else {\n        this._showContent();\n      }\n      this._isOpened = !this._isOpened;\n    });\n  }\n\n  _showContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item-content\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value, false));\n      this._contentContainerEl.appendChild(this._proxiedContentEl);\n      this._displayVal = this._proxiedContentEl.style.display;\n    }\n\n    this._proxiedContentEl.style.display = this._displayVal;\n  }\n\n  _hideContent() {\n    this._proxiedContentEl.style.display = `none`;\n  }\n\n  _getHeadContent() {\n    if (this._mode === Mode.DIR) {\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.LOG || this._mode === Mode.PROP) {\n      return this._getHeadLogContent();\n    } else if (this._mode === Mode.PREVIEW) {\n      return this._getHeadPreviewContent();\n    } else if (this._mode === Mode.ERROR) {\n      return this._getHeadErrorContent();\n    }\n    return ``;\n  }\n\n  _getHeadPreviewContent() {\n    if (Object.prototype.toString.call(this.value) === `[object Object]`) {\n      return {\n        elOrStr: `...`,\n        isShowConstructor: false,\n        isShowElements: true,\n        isBraced: true\n      };\n    }\n    return this._getHeadDirContent();\n  }\n  _getHeadLogContent() {\n    let val;\n    let isShowConstructor = false;\n    let isBraced = true;\n    if (Object.prototype.toString.call(this.value) === `[object Object]`) {\n      val = this.createContent(this.value, true);\n      if (this.value.constructor !== Object) {\n        isShowConstructor = true;\n      }\n    } else if (this.value instanceof HTMLElement) {\n      return this._getHeadDirContent();\n    } else if (this.value instanceof Error) {\n      val = this.value.stack;\n    } else if (this.value instanceof Number) {\n      const view = createTypedView(Number.parseInt(this.value, 10), Mode.PREVIEW);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof String) {\n      const view = createTypedView(this.value.toString(), Mode.PREVIEW);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n      isBraced = false;\n    } else {\n      val = this.createContent(this.value, true);\n      isShowConstructor = true;\n    }\n    // else if (this.value.constructor === GeneratorFunction) {\n    //   return this\n    // }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements: true,\n      isBraced\n    };\n  }\n  _getHeadErrorContent() {\n\n    return {\n      elOrStr: `<pre>${this.value.stack}</pre>`,\n      isShowConstructor: false,\n      isShowElements: true\n    };\n  }\n  _getHeadDirContent() {\n    let val;\n    let isShowConstructor = false;\n    let isShowElements = true;\n    let isBraced = false;\n    if (this.value instanceof HTMLElement) {\n      let str = this.value.tagName.toLowerCase();\n      str += this.value.id;\n      if (this.value.classList.length) {\n        str += `.` + Array.prototype.join.call(this.value.classList, `.`);\n      }\n      val = str;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n    } else if (this.value instanceof Error) {\n      val = this.value.stack;\n    } else {\n      val = this.value;\n      isShowConstructor = true;\n      isShowElements = false;\n    }\n    // else if (this.value.constructor === GeneratorFunction) {\n    //   return this\n    // }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements,\n      isBraced\n    };\n  }\n\n  createContent(obj, isPreview) {\n    const fragment = document.createDocumentFragment();\n    const keys = new Set();\n    // TODO: Добавить счётчик, чтобы больше 5 значений не добавлялось\n    for (let key in obj) {\n      keys.add(key);\n      const value = obj[key];\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    for (let key of Object.getOwnPropertyNames(obj)) {\n      if (keys.has(key)) {\n        continue;\n      }\n      const value = obj[key];\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return fragment;\n  }\n\n  static createEntryEl(key, valueEl) {\n    const entryEl = getElement(`\\\n<span class=\"object__entry object-entry\">\n  <span class=\"object-entry__key\">${key}</span><span class=\"object-entry__value-container\"></span>\n</span>`);\n    const valueContEl = entryEl.querySelector(`.object-entry__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","import TypeView from '../type-view';\nimport {getElement, createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nexport default class ArrayView extends TypeView {\n  constructor(arr, mode) {\n    super(arr, `array`, false);\n    this._arr = arr;\n    this._mode = mode;\n    this._elements = new Map();\n    this._isOpened = false;\n  }\n\n  get template() {\n    return `\\\n<div class=\"console__item array\">\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\">\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">\n      ${this._mode === Mode.PREVIEW || this._mode === Mode.DIR ? `${this._arr.constructor.name}(${this._arr.length})` : `(${this._arr.length})`}\n    </div>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS}\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}\"></div>\n</div>`;\n  }\n\n  bind() {\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    const previewEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    const headElementsEl = previewEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    if (this._mode !== Mode.DIR) {\n      headElementsEl.appendChild(this.createContent(this.value, true));\n    }\n    previewEl.addEventListener(`click`, () => {\n      if (this._isOpened) {\n        this._hideContent();\n      } else {\n        this._showContent();\n      }\n      this._isOpened = !this._isOpened;\n    });\n  }\n\n  _showContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item-content\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value, false));\n      this._contentContainerEl.appendChild(this._proxiedContentEl);\n      this._displayVal = this._proxiedContentEl.style.display;\n    }\n    this._proxiedContentEl.style.display = this._displayVal;\n  }\n\n  _hideContent() {\n    this._proxiedContentEl.style.display = `none`;\n  }\n\n  createContent(arr, isPreview) {\n    const ownPropertyNames = Object.getOwnPropertyNames(arr);\n    const keys = Object.keys(arr);\n    const fragment = document.createDocumentFragment();\n    for (let key of ownPropertyNames) {\n      const value = arr[key];\n      const indexInKeys = keys.indexOf(key);\n      const isKeyNaN = Number.isNaN(Number.parseInt(key, 10));\n      if (isPreview && indexInKeys === -1) {\n        continue;\n      }\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ArrayView.createEntryEl(key, view.el, isPreview ? !isKeyNaN : isPreview);\n      // if (!isPreview) {\n      //   this._elements.set(entryEl, view);\n      // }\n      fragment.appendChild(entryEl);\n    }\n    return fragment;\n  }\n\n  static createEntryEl(index, valueEl, withKey) {\n    const entryEl = getElement(`\\\n<span class=\"array__entry array-entry\">\\\n  ${withKey ? `` : `<span class=\"array-entry__key\">${index}</span>`}<span class=\"array-entry__value-container\"></span>\\\n</span>`);\n    const valueContEl = entryEl.querySelector(`.array-entry__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","import TypeView from '../type-view';\nimport {getElement, createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nconst MAX_PREVIEW_FN_BODY_LENGTH = 43;\n\nconst FnType = {\n  PLAIN: `plain`,\n  ARROW: `arrow`,\n  CLASS: `class`\n};\n\n// arguments, caller, length, name, prototype, __proto__, [[FunctionLocation]], [[Scopes]]\n\n// if .caller not accessed — не выводим\n// if prototype undefined — не выводим\n// name — если неименованная — получает имя переменной, в которую записана\n// если именнованная — то имя ф-ии\n\nexport default class FunctionView extends TypeView {\n  constructor(fn, mode) {\n    super(fn, `function`, false);\n    this._mode = mode;\n    this._isOpened = false;\n    this._fnType = FunctionView.checkFnType(fn);\n  }\n\n  get template() {\n    let tpl = `<div class=\"console__item function\">`;\n    switch (this._mode) {\n      case Mode.PREVIEW:\n        tpl += `f`;\n        break;\n      case Mode.PROP:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadPropMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}\"></div>`;\n        break;\n      case Mode.DIR:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadDirMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}\"></div>`;\n        break;\n      case Mode.LOG:\n        tpl += this._getLogMarkup();\n        break;\n    }\n    tpl += `</div>`;\n    return tpl;\n  }\n\n  bind() {\n    if (this._mode !== Mode.DIR && this._mode !== Mode.PROP) {\n      return;\n    }\n\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    const previewEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    // previewEl.appendChild(this.createPreview(this.value, true));\n\n    previewEl.addEventListener(`click`, () => {\n      if (this._isOpened) {\n        this._hideContent();\n      } else {\n        this._showContent();\n      }\n      this._isOpened = !this._isOpened;\n    });\n  }\n\n  _showContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item-content\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value));\n      this._contentContainerEl.appendChild(this._proxiedContentEl);\n      this._displayVal = this._proxiedContentEl.style.display;\n    }\n\n    this._proxiedContentEl.style.display = this._displayVal;\n  }\n\n  _hideContent() {\n    this._proxiedContentEl.style.display = `none`;\n  }\n\n  _getHeadPropMarkup() {\n    const {name, params, lines} = this._parseFunction(this.value);\n    const joinedLines = lines.join(`\\n`);\n\n    let markup = `\\\n<span>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}`;\n    if (this._fnType !== FnType.CLASS) {\n      markup += `{${joinedLines.length <= MAX_PREVIEW_FN_BODY_LENGTH ? joinedLines : `...`}}`;\n    }\n    markup += `</span>`;\n    return markup;\n  }\n\n  _getHeadDirMarkup() {\n    const {name, params} = this._parseFunction(this.value);\n\n    let markup = `\\\n  <span>\\\n  ${this._fnType === FnType.CLASS ? `class ` : ``}\\\n  ${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n  ${name ? name : ``}\\\n  ${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}</span>`;\n    return markup;\n  }\n\n  _getLogMarkup() {\n    return `<pre>${this.value.toString()}</pre>`;\n    // const {name, params, lines} = this._parseFunction(this.value);\n    /* return `\\\n<pre>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `function ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}{\n${lines.join(`\\n`)}\n}\n</pre>`;*/\n  }\n\n  static checkFnType(fn) {\n    let str = fn.toString();\n    const firstParenthesisIndex = str.indexOf(`(`);\n\n    const classIndex = str.indexOf(`class`);\n    const arrowIndex = str.indexOf(`=>`);\n    if (classIndex !== -1 && classIndex < firstParenthesisIndex) {\n      return FnType.CLASS;\n    } else if (arrowIndex !== -1 && arrowIndex > firstParenthesisIndex) {\n      return FnType.ARROW;\n    }\n    return FnType.PLAIN;\n  }\n\n  _parseParams(funString) {\n    const paramsStart = funString.indexOf(`(`);\n    const paramsEnd = funString.indexOf(`)`);\n\n    const paramsContent = funString.substring(paramsStart + 1, paramsEnd).trim();\n\n    return paramsContent ? paramsContent.split(`,`).map((it) => it.trim()) : [];\n  }\n\n  _parseName(funString) {\n    let endingChar;\n    if (this._fnType === FnType.CLASS) {\n      endingChar = `{`;\n    } else if (this._fnType === FnType.PLAIN) {\n      endingChar = `(`;\n    }\n    let name;\n    const re = new RegExp(`(?:class|function)\\\\s+(\\\\w+)\\\\s*(?:\\\\${endingChar})`);\n    const ex = re.exec(funString);\n    if (ex !== null) {\n      name = ex[1];\n    }\n    return name;\n  }\n\n  _parseBody(funString) {\n    const bodyStart = funString.indexOf(`{`);\n    const bodyEnd = funString.lastIndexOf(`}`);\n\n    const bodyContent = funString.substring(bodyStart + 1, bodyEnd).trim();\n\n    if (!bodyContent) {\n      return [];\n    }\n\n    return bodyContent.split(`\\n`).map(function (it) {\n      return it.trim();\n    });\n  }\n\n  _parseFunction(fnOrString) {\n    let str;\n    if (typeof fnOrString !== `string`) {\n      str = fnOrString.toString();\n    }\n    return {\n      name: fnOrString.name, // this._parseName(str),\n      params: this._parseParams(str),\n      lines: this._parseBody(str)\n    };\n  }\n\n  createContent(fn) {\n    const fragment = document.createDocumentFragment();\n    const keys = [`name`, `prototype`, `caller`, `arguments`, `length`, `__proto__`];\n    for (let key of keys) {\n      let value;\n      try {\n        value = fn[key];\n      } catch (err) {\n        continue;\n      }\n      const view = createTypedView(value, Mode.DIR);\n      const entryEl = FunctionView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return fragment;\n  }\n\n  static createEntryEl(key, valueEl) {\n    const entryEl = getElement(`\\\n<span class=\"object__entry object-entry\">\n  <span class=\"object-entry__key\">${key}</span><span class=\"object-entry__value-container\"></span>\n</span>`);\n    const valueContEl = entryEl.querySelector(`.object-entry__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode} from '../enums';\n\nconst Class = {\n  STRING_COLLAPSED: `string_collapsed`\n};\n\nexport default class PrimitiveView extends TypeView {\n  constructor(value, mode, type) {\n    super(value, type, true);\n    this._mode = mode;\n  }\n\n  get template() {\n    const type = this.type;\n    let value = this.value;\n    let html = ``;\n    if (type === `string` || type === `symbol`) {\n      if (type === `symbol`) {\n        value = value.toString();\n      }\n      value = this.escapeHtml(value);\n    }\n    switch (type) {\n      case `undefined`:\n      case `null`:\n      case `boolean`:\n        html = `<div class=\"console__item console__item_primitive ` + type + `\">` + value + `</div>`;\n        break;\n\n      case `number`:\n        if (isNaN(value)) {\n          html = `<div class=\"console__item console__item_primitive NaN\">NaN</div>`;\n        } else if ((value === Infinity || value === -Infinity)) {\n          html = `<div class=\"console__item console__item_primitive number\">` + (value === -Infinity ? `-` : ``) + `Infinity</div>`;\n        } else {\n          html = `<div class=\"console__item console__item_primitive ` + type + `\">` + value + `</div>`;\n        }\n        break;\n\n      case `string`:\n        html = `<pre class=\"console__item console__item_primitive string ${this._mode === Mode.PROP ? Class.STRING_COLLAPSED : ``}\">${value}</pre>`;\n        break;\n      case `symbol`:\n        html = `<div class=\"console__item console__item_primitive ` + type + `\">` + value + `</div>`;\n        break;\n\n      case `object`:\n        if (value === null) {\n          html = `<div class=\"console__item console__item_primitive null\">` + value + `</div>`;\n          break;\n        }\n    }\n    return html;\n  }\n\n  bind() {\n    if (this._mode === Mode.PROP && this.type === `string`) {\n      this.el.addEventListener(`click`, (evt) => {\n        evt.preventDefault();\n        this.el.classList.toggle(Class.STRING_COLLAPSED);\n      });\n    }\n  }\n\n  escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, `&amp;`)\n        .replace(/</g, `&lt;`)\n        .replace(/>/g, `&gt;`)\n        .replace(/\"/g, `&quot;`)\n        .replace(/'/g, `&#039;`);\n  }\n}\n","import ObjectView from './object/object-view';\nimport ArrayView from './array/array-view';\nimport FunctionView from './function/function-view';\nimport PrimitiveView from './primitive/primitive-view';\n\nexport const getElement = (htmlMarkup) => {\n  const div = document.createElement(`div`);\n  div.innerHTML = htmlMarkup;\n  return div.firstElementChild;\n};\n\nconst primitiveTypeofs = [\n  `undefined`,\n  `number`,\n  `string`,\n  `boolean`,\n  `symbol`,\n  `object`\n];\n\nexport const getPrimitiveType = (val) => {\n  const type = typeof val;\n\n  if (!primitiveTypeofs.includes(type)) {\n    throw new Error(`Unknown primitive type: ` + type);\n  }\n\n  return type;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\nexport const createTypedView = (val, mode) => {\n  let view;\n  const type = typeof val;\n  switch (type) {\n    case `function`:\n      view = new FunctionView(val, mode);\n      break;\n    case `object`:\n      // TODO: check instanceof Date, String, Boolean, Number\n      if (val !== null) {\n        if (Array.isArray(val)) { // TODO: typedarrays, arraybuffer, etc\n          view = new ArrayView(val, mode);\n        } else {\n          view = new ObjectView(val, mode);\n        }\n      } else {\n        view = new PrimitiveView(val, mode, type);\n      }\n      break;\n    default:\n      view = new PrimitiveView(val, mode, type);\n      break;\n  }\n  return view;\n};\n","// import babelPolyfill from 'babel-polyfill';\n// import whatwgFetch from 'whatwg-fetch';\nimport {getElement, createTypedView} from './utils';\n\nconst Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  ERROR: `error`\n};\n\nconst getRowEl = (entries, mode) => {\n  const el = getElement(`<div class=\"console__row\"></div>`);\n  entries.forEach(function (code) {\n    el.appendChild(createTypedView(code, mode).el);\n  });\n  return el;\n};\n\n/**\n * Init Console\n *\n * @param {HTMLElement} cont — console container\n * @return {{log: log}}\n */\nconst jsConsoleInit = (cont) => {\n  if (!cont) {\n    throw Error(`Console is not inited!`);\n  }\n\n  // Public interface\n  const logger = {};\n\n  /**\n   * Show formatted & highlighted code into `cont`\n   */\n  logger.log = function (...rest) {\n    cont.appendChild(getRowEl(rest, Mode.LOG));\n\n    if (typeof logger.onlog === `function`) {\n      logger.onlog(rest);\n    }\n  };\n\n  logger.error = function (errOrSmth) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    if (errOrSmth instanceof Error) {\n      el.appendChild(createTypedView(errOrSmth, Mode.ERROR).el);\n    } else {\n      el.appendChild(createTypedView(new Error(errOrSmth), Mode.ERROR).el);\n    }\n    cont.appendChild(el);\n  };\n\n  logger.clean = function () {\n    cont.innerHTML = ``;\n  };\n\n  logger.getLogSource = function () {\n    return cont.innerHTML;\n  };\n\n  logger.dir = function (val, ...rest) {\n    // cont.appendChild(getRowEl(val, Mode.DIR));\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    el.appendChild(createTypedView(val, Mode.DIR).el);\n    cont.appendChild(el);\n    if (typeof logger.onlog === `function`) {\n      logger.onlog(rest);\n    }\n  };\n\n  logger.extend = function (consoleObject) {\n    consoleObject.log = logger.log;\n    consoleObject.info = logger.log;\n\n    consoleObject.error = logger.error;\n    consoleObject.warn = logger.error;\n\n    consoleObject.dir = logger.dir;\n\n    return consoleObject;\n  };\n\n  return logger;\n};\n\n// window.jsConsoleInit = jsConsoleInit;\nexport default jsConsoleInit;\n","import jsConsoleInit from './main';\n\nconst CSS_URL = `//htmlacademy.github.io/console.js/css/style.css`;\n\nconst errors = [];\nconst collectErr = function (...rest) {\n  errors.push(rest);\n};\nwindow.onerror = collectErr;\nwindow.console.warn = collectErr;\nwindow.console.error = collectErr;\n\nconst messages = [];\nconst collectMsg = function (...rest) {\n  messages.push(...rest);\n};\nwindow.console.info = collectMsg;\nwindow.console.log = collectMsg;\nwindow.console.debug = collectMsg;\n\nconst init = function () {\n  const div = window.document.createElement(`div`);\n  div.classList.add(`console`);\n  const jsConsole = jsConsoleInit(div);\n  window.document.body.appendChild(div);\n\n  jsConsole.extend(window.console);\n\n  errors.forEach(function (args) {\n    jsConsole.error(jsConsole, ...args);\n  });\n  messages.forEach(function (args) {\n    jsConsole.log(jsConsole, ...args);\n  });\n  window.addEventListener(`error`, (evt) => {\n    jsConsole.error(evt.error);\n  });\n};\n\nconst loadStyles = function () {\n  const link = window.document.createElement(`link`);\n  link.rel = `stylesheet`;\n  link.href = CSS_URL;\n  window.document.head.appendChild(link);\n};\n\nwindow.addEventListener(`DOMContentLoaded`, function () {\n  init();\n  loadStyles();\n});\n"]}