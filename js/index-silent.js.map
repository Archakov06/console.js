{"version":3,"sources":["js/abstract-view.js","js/enums.js","js/type-view.js","js/object/object-view.js","js/array/array-view.js","js/function/function-view.js","js/primitive/primitive-view.js","js/utils.js","js/main.js","js/index-silent.js"],"names":["AbstractView","getElement","this","template","_el","render","bind","Mode","Class","TypeView","value","type","isPrimitive","_value","_type","_isPrimitive","_isOpened","stack","_proxiedContentEl","appendChild","createContent","_contentContainerEl","classList","toggle","style","display","headEl","_setCursorPointer","addEventListener","evt","preventDefault","_toggleContent","_additionHeadClickHandler","el","add","index","valueEl","withoutKey","entryEl","querySelector","ObjectView","mode","_mode","_entries","Map","headElementsEl","headInfoEl","_getHeadContent","elOrStr","_getHeadContent2","isShowConstructor","isShowElements","isBraced","isOpeningDisabled","HTMLElement","DocumentFragment","innerHTML","_setHeadClickHandler","_getHeadDirContent","_getHeadLogContent","_getHeadPreviewContent","_getHeadErrorContent","Object","prototype","toString","call","val","Error","Number","createTypedView","parseInt","String","Date","RegExp","source","flags","constructor","str","tagName","toLowerCase","id","length","Array","join","obj","isPreview","fragment","document","createDocumentFragment","keys","Set","key","view","createEntryEl","_step","getOwnPropertyNames","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","has","name","ArrayView","arr","_elements","headElementsLengthEl","isShowLength","_toggleConstructor","_toggleHeadElements","_toggleLength","ownPropertyNames","indexInKeys","indexOf","isKeyNaN","isNaN","FnType","FunctionView","fn","_fnType","checkFnType","parseFunction","_parseFunction","params","joinedLines","lines","markup","_parseFunction2","funString","paramsStart","paramsEnd","paramsContent","substring","trim","split","map","it","endingChar","ex","exec","bodyStart","bodyEnd","lastIndexOf","bodyContent","fnOrString","parseParams","parseBody","err","tpl","_getHeadPropMarkup","_getHeadDirMarkup","_getLogMarkup","firstParenthesisIndex","classIndex","arrowIndex","STRING_COLLAPSED","PrimitiveView","unsafe","replace","html","escapeHtml","Infinity","htmlMarkup","div","createElement","firstElementChild","_typeof","isArray","jsConsoleInit","cont","logger","log","rest","_len","_key","arguments","entries","forEach","code","onlog","error","errOrSmth","clean","getLogSource","dir","_len2","_key2","extend","consoleObject","info","warn","errors","collectErr","push","window","onerror","console","messages","collectMsg","apply","debug","link","jsConsole","body","args","concat","toConsumableArray","rel","href","CSS_URL","head"],"mappings":"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","file":"index-silent.js","sourcesContent":["import {getElement} from './utils';\n\nexport default class AbstractView {\n  constructor() {}\n\n  /**\n   * @abstract\n   * @return {string}\n   */\n  get template() {}\n\n  get el() {\n    if (!this._el) {\n      this._el = this.render();\n      this.bind(this._el);\n    }\n    return this._el;\n  }\n\n  render() {\n    return getElement(this.template);\n  }\n\n  bind() {}\n}\n","export const Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  PROP: `prop`,\n  ERROR: `error`\n};\n\nexport const Class = {\n  CONSOLE_ITEM_HEAD: `console__item-head`,\n  CONSOLE_ITEM_POINTER: `console__item_pointer`,\n  CONSOLE_ITEM_HEAD_SHOW: `console__item-head_show`,\n  CONSOLE_ITEM_HEAD_BRACED: `console__item-head_braced`,\n  CONSOLE_ITEM_HEAD_PARENTHESED: `console__item-head_parenthesed`,\n  CONSOLE_ITEM_HEAD_INFO: `console__item-head-info`,\n  CONSOLE_ITEM_HEAD_ELEMENTS: `console__item-head-elements`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_SHOW: `console__item-head-elements_show`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER: `console__item-content-container`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW: `console__item-content-container_show`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH: `console__item-head-elements-length`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW: `console__item-head-elements-length_show`\n};\n","import AbstractView from './abstract-view';\nimport {getElement} from './utils';\nimport {Class} from './enums';\n\nexport default class TypeView extends AbstractView {\n  constructor(value, type, isPrimitive) {\n    super();\n    this._value = value;\n    this._type = type;\n    this._isPrimitive = isPrimitive;\n    this._isOpened = false;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get isPrimitive() {\n    return this._isPrimitive;\n  }\n\n  _getHeadErrorContent() {\n    return {\n      elOrStr: `<pre>${this._value.stack}</pre>`,\n      isShowConstructor: false,\n      isShowElements: true\n    };\n  }\n\n  _toggleContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item-content\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value, false));\n      this._contentContainerEl.appendChild(this._proxiedContentEl);\n    }\n    this._contentContainerEl.classList.toggle(Class.CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW);\n  }\n\n  _hideContent() {\n    this._proxiedContentEl.style.display = `none`;\n  }\n\n  _additionHeadClickHandler() {}\n\n  _setHeadClickHandler(headEl) {\n    this._setCursorPointer();\n    headEl.addEventListener(`click`, (evt) => {\n      evt.preventDefault();\n      this._toggleContent();\n      this._additionHeadClickHandler();\n    });\n  }\n\n  _setCursorPointer() {\n    this.el.classList.add(Class.CONSOLE_ITEM_POINTER);\n  }\n\n  static createEntryEl(index, valueEl, withoutKey) {\n    const entryEl = getElement(`\\\n<span class=\"entry-container__entry\">\\\n  ${withoutKey ? `` : `<span class=\"entry-container__key\">${index}</span>`}<span class=\"entry-container__value-container\"></span>\\\n</span>`);\n    const valueContEl = entryEl.querySelector(`.entry-container__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","/* eslint guard-for-in: \"off\"*/\nimport TypeView from '../type-view';\nimport {createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nexport default class ObjectView extends TypeView {\n  constructor(value, mode) {\n    super(value, `object`, false);\n    this._mode = mode;\n    this._entries = new Map();\n    this._isOpened = false;\n  }\n\n  get template() {\n    return `\\\n<div class=\"console__item console__item_object ${this._mode === Mode.ERROR ? `${this._mode}` : ``}\">\\\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\">\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">${this.value.constructor.name}</span>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS} entry-container entry-container_head\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>\n</div>`;\n  }\n\n  bind() {\n    const headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    const headElementsEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    const headInfoEl = headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_INFO}`);\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n\n    const {elOrStr, isShowConstructor, isShowElements, isBraced, isOpeningDisabled} = this._getHeadContent();\n    if (isBraced) {\n      headEl.classList.add(Class.CONSOLE_ITEM_HEAD_BRACED);\n    }\n    if (isShowConstructor) {\n      headInfoEl.classList.add(Class.CONSOLE_ITEM_HEAD_SHOW);\n    }\n    if (isShowElements) {\n      if (elOrStr instanceof HTMLElement || elOrStr instanceof DocumentFragment) {\n        headElementsEl.appendChild(elOrStr);\n      } else {\n        headElementsEl.innerHTML = elOrStr;\n      }\n      headElementsEl.classList.add(Class.CONSOLE_ITEM_HEAD_ELEMENTS_SHOW);\n    }\n    if (this._mode === Mode.PREVIEW || this._mode === Mode.ERROR) {\n      return;\n    }\n    if (!isOpeningDisabled) {\n      this._setHeadClickHandler(headEl);\n    }\n  }\n\n  _getHeadContent() {\n    if (this._mode === Mode.DIR) {\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.LOG || this._mode === Mode.PROP) {\n      return this._getHeadLogContent();\n    } else if (this._mode === Mode.PREVIEW) {\n      return this._getHeadPreviewContent();\n    } else if (this._mode === Mode.ERROR) {\n      return this._getHeadErrorContent();\n    }\n    return ``;\n  }\n\n  _getHeadPreviewContent() {\n    if (Object.prototype.toString.call(this.value) === `[object Object]`) {\n      return {\n        elOrStr: `...`,\n        isShowConstructor: false,\n        isShowElements: true,\n        isBraced: true\n      };\n    }\n    return this._getHeadDirContent();\n  }\n  _getHeadLogContent() {\n    let val;\n    let isShowConstructor = false;\n    let isBraced = true;\n    let isOpeningDisabled = false;\n\n    if (this.value instanceof HTMLElement) {\n      return this._getHeadDirContent();\n    } else if (this.value instanceof Error) {\n      isBraced = false;\n      val = this.value.stack;\n    } else if (this.value instanceof Number) {\n      const view = createTypedView(Number.parseInt(this.value, 10), Mode.PREVIEW);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof String) {\n      const view = createTypedView(this.value.toString(), Mode.PREVIEW);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n      isBraced = false;\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n      isOpeningDisabled = true;\n      isBraced = false;\n    } else {\n      val = this.createContent(this.value, true);\n      if (this.value.constructor !== Object) {\n        isShowConstructor = true;\n      }\n    }\n    // else if (this.value.constructor === GeneratorFunction) {\n    //   return this\n    // }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements: true,\n      isBraced,\n      isOpeningDisabled\n    };\n  }\n\n  _getHeadDirContent() {\n    let val;\n    let isShowConstructor = false;\n    let isShowElements = true;\n    let isBraced = false;\n    if (this.value instanceof HTMLElement) {\n      let str = this.value.tagName.toLowerCase();\n      str += this.value.id;\n      if (this.value.classList.length) {\n        str += `.` + Array.prototype.join.call(this.value.classList, `.`);\n      }\n      val = str;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n    } else if (this.value instanceof Error) {\n      val = this.value.stack;\n    } else {\n      val = this.value;\n      isShowConstructor = true;\n      isShowElements = false;\n    }\n    // else if (this.value.constructor === GeneratorFunction) {\n    //   return this\n    // }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isShowElements,\n      isBraced\n    };\n  }\n\n  createContent(obj, isPreview) {\n    const fragment = document.createDocumentFragment();\n    const keys = new Set();\n    // TODO: Добавить счётчик, чтобы больше 5 значений не добавлялось\n    for (let key in obj) {\n      keys.add(key);\n      const value = obj[key];\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    for (let key of Object.getOwnPropertyNames(obj)) {\n      if (keys.has(key)) {\n        continue;\n      }\n      const value = obj[key];\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return fragment;\n  }\n}\n","import TypeView from '../type-view';\nimport {createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nexport default class ArrayView extends TypeView {\n  constructor(arr, mode) {\n    super(arr, `array`, false);\n    this._mode = mode;\n    this._elements = new Map();\n    this._isOpened = false;\n  }\n\n  get template() {\n    return `\\\n<div class=\"console__item console__item_array\">\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\">\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_INFO}\">${this.value.constructor.name}</span>\n    <span class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH}\">${this.value.length}</span>\n    <div class=\"${Class.CONSOLE_ITEM_HEAD_ELEMENTS} entry-container entry-container_head\"></div>\n  </div>\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>\n</div>`;\n  }\n\n  bind() {\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    this.headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    this.headInfoEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_INFO}`);\n    this.headElementsEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS}`);\n    this.headElementsLengthEl = this.headEl.querySelector(`.${Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH}`);\n    const {isShowConstructor, isShowElements, isShowLength} = this._getHeadContent();\n    if (isShowConstructor) {\n      this._toggleConstructor(this.headInfoEl, true);\n    }\n    if (isShowElements) {\n      this.headElementsEl.appendChild(this.createContent(this.value, true));\n      this._toggleHeadElements(this.headElementsEl, true);\n    }\n    if (isShowLength) {\n      this._toggleLength(this.headElementsLengthEl, true);\n    }\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    this._setHeadClickHandler(this.headEl);\n  }\n\n  _additionHeadClickHandler() {\n    if (this._mode === Mode.PROP) {\n      this._toggleConstructor();\n      this._toggleHeadElements();\n    }\n  }\n\n  _toggleConstructor() {\n    this.headInfoEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_SHOW);\n  }\n\n  _toggleLength() {\n    this.headElementsLengthEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW);\n  }\n\n  _toggleHeadElements() {\n    this.headElementsEl.classList.toggle(Class.CONSOLE_ITEM_HEAD_ELEMENTS_SHOW);\n  }\n\n  _getHeadContent() {\n    let isShowConstructor = false;\n    let isShowElements = true;\n    let isShowLength = this.value.length > 1;\n    if (this._mode === Mode.DIR) {\n      isShowConstructor = true;\n      isShowElements = false;\n    // } else if (this._mode === Mode.PROP) {\n    } else if (this._mode === Mode.PREVIEW) {\n      isShowConstructor = true;\n      isShowElements = false;\n      isShowLength = true;\n    } else if (this._mode === Mode.ERROR) {\n      return this._getHeadErrorContent();\n    }\n    return {\n      isShowConstructor,\n      isShowElements,\n      isShowLength\n    };\n  }\n\n  createContent(arr, isPreview) {\n    const ownPropertyNames = Object.getOwnPropertyNames(arr);\n    const keys = Object.keys(arr);\n    const fragment = document.createDocumentFragment();\n    for (let key of ownPropertyNames) {\n      const value = arr[key];\n      const indexInKeys = keys.indexOf(key);\n      const isKeyNaN = Number.isNaN(Number.parseInt(key, 10));\n      if (isPreview && indexInKeys === -1) {\n        continue;\n      }\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.PROP);\n      const entryEl = ArrayView.createEntryEl(key, view.el, isPreview ? !isKeyNaN : isPreview);\n      // if (!isPreview) {\n      //   this._elements.set(entryEl, view);\n      // }\n      fragment.appendChild(entryEl);\n    }\n    return fragment;\n  }\n}\n","import TypeView from '../type-view';\nimport {createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nconst MAX_PREVIEW_FN_BODY_LENGTH = 43;\n\nconst FnType = {\n  PLAIN: `plain`,\n  ARROW: `arrow`,\n  CLASS: `class`\n};\n\n// arguments, caller, length, name, prototype, __proto__, [[FunctionLocation]], [[Scopes]]\n\n// if .caller not accessed — не выводим\n// if prototype undefined — не выводим\n// name — если неименованная — получает имя переменной, в которую записана\n// если именнованная — то имя ф-ии\n\nexport default class FunctionView extends TypeView {\n  constructor(fn, mode) {\n    super(fn, `function`, false);\n    this._mode = mode;\n    this._isOpened = false;\n    this._fnType = FunctionView.checkFnType(fn);\n  }\n\n  get template() {\n    let tpl = `<div class=\"console__item console__item_function\">`;\n    switch (this._mode) {\n      case Mode.PREVIEW:\n        tpl += `f`;\n        break;\n      case Mode.PROP:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadPropMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>`;\n        break;\n      case Mode.DIR:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadDirMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER} entry-container\"></div>`;\n        break;\n      case Mode.LOG:\n        tpl += this._getLogMarkup();\n        break;\n    }\n    tpl += `</div>`;\n    return tpl;\n  }\n\n  bind() {\n    if (this._mode !== Mode.DIR && this._mode !== Mode.PROP) {\n      return;\n    }\n\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    const headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    // previewEl.appendChild(this.createPreview(this.value, true));\n    this._setHeadClickHandler(headEl);\n  }\n\n  _getHeadPropMarkup() {\n    const {name, params, lines} = this.parseFunction(this.value);\n    const joinedLines = lines.join(`\\n`);\n\n    let markup = `\\\n<span>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}`;\n    if (this._fnType !== FnType.CLASS) {\n      markup += `{${joinedLines.length <= MAX_PREVIEW_FN_BODY_LENGTH ? joinedLines : `...`}}`;\n    }\n    markup += `</span>`;\n    return markup;\n  }\n\n  _getHeadDirMarkup() {\n    const {name, params} = this.parseFunction(this.value);\n\n    let markup = `\\\n  <span>\\\n  ${this._fnType === FnType.CLASS ? `class ` : ``}\\\n  ${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n  ${name ? name : ``}\\\n  ${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}</span>`;\n    return markup;\n  }\n\n  _getLogMarkup() {\n    return `<pre>${this.value.toString()}</pre>`;\n    // const {name, params, lines} = this.parseFunction(this.value);\n    /* return `\\\n<pre>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `function ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}{\n${lines.join(`\\n`)}\n}\n</pre>`;*/\n  }\n\n  static checkFnType(fn) {\n    let str = fn.toString();\n    const firstParenthesisIndex = str.indexOf(`(`);\n\n    const classIndex = str.indexOf(`class`);\n    const arrowIndex = str.indexOf(`=>`);\n    if (classIndex !== -1 && classIndex < firstParenthesisIndex) {\n      return FnType.CLASS;\n    } else if (arrowIndex !== -1 && arrowIndex > firstParenthesisIndex) {\n      return FnType.ARROW;\n    }\n    return FnType.PLAIN;\n  }\n\n  parseParams(funString) {\n    const paramsStart = funString.indexOf(`(`);\n    const paramsEnd = funString.indexOf(`)`);\n\n    const paramsContent = funString.substring(paramsStart + 1, paramsEnd).trim();\n\n    return paramsContent ? paramsContent.split(`,`).map((it) => it.trim()) : [];\n  }\n\n  parseName(funString) {\n    let endingChar;\n    if (this._fnType === FnType.CLASS) {\n      endingChar = `{`;\n    } else if (this._fnType === FnType.PLAIN) {\n      endingChar = `(`;\n    }\n    let name;\n    const re = new RegExp(`(?:class|function)\\\\s+(\\\\w+)\\\\s*(?:\\\\${endingChar})`);\n    const ex = re.exec(funString);\n    if (ex !== null) {\n      name = ex[1];\n    }\n    return name;\n  }\n\n  parseBody(funString) {\n    const bodyStart = funString.indexOf(`{`);\n    const bodyEnd = funString.lastIndexOf(`}`);\n\n    const bodyContent = funString.substring(bodyStart + 1, bodyEnd).trim();\n\n    if (!bodyContent) {\n      return [];\n    }\n\n    return bodyContent.split(`\\n`).map(function (it) {\n      return it.trim();\n    });\n  }\n\n  parseFunction(fnOrString) {\n    let str;\n    if (typeof fnOrString !== `string`) {\n      str = fnOrString.toString();\n    }\n    return {\n      name: fnOrString.name, // this.parseName(str),\n      params: this.parseParams(str),\n      lines: this.parseBody(str)\n    };\n  }\n\n  createContent(fn) {\n    const fragment = document.createDocumentFragment();\n    const keys = [`name`, `prototype`, `caller`, `arguments`, `length`, `__proto__`];\n    for (let key of keys) {\n      let value;\n      try {\n        value = fn[key];\n      } catch (err) {\n        continue;\n      }\n      const view = createTypedView(value, Mode.DIR);\n      const entryEl = FunctionView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return fragment;\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode} from '../enums';\n\nconst STRING_COLLAPSED = `string_collapsed`;\n\nexport default class PrimitiveView extends TypeView {\n  constructor(value, mode, type) {\n    super(value, type, true);\n    this._mode = mode;\n  }\n\n  get template() {\n    const type = this.type;\n    let value = this.value;\n    let html = ``;\n    if (type === `string` || type === `symbol`) {\n      if (type === `symbol`) {\n        value = value.toString();\n      }\n      value = this.escapeHtml(value);\n    }\n    switch (type) {\n      case `undefined`:\n      case `null`:\n      case `boolean`:\n        html = `<div class=\"console__item console__item_primitive ${type}\">${value}</div>`;\n        break;\n\n      case `number`:\n        if (Number.isNaN(value)) {\n          html = `<div class=\"console__item console__item_primitive NaN\">NaN</div>`;\n        } else if ((value === Infinity || value === -Infinity)) {\n          html = `<div class=\"console__item console__item_primitive number\">${(value === -Infinity ? `-` : ``)}Infinity</div>`;\n        } else {\n          html = `<div class=\"console__item console__item_primitive ${type}\">${value}</div>`;\n        }\n        break;\n\n      case `string`:\n        html = `<pre class=\"console__item console__item_primitive string ${this._mode === Mode.PROP ? STRING_COLLAPSED : ``}\">${value}</pre>`;\n        break;\n      case `symbol`:\n        html = `<div class=\"console__item console__item_primitive symbol\">${value}</div>`;\n        break;\n\n      case `object`:\n        if (value === null) {\n          html = `<div class=\"console__item console__item_primitive null\">${value}</div>`;\n          break;\n        }\n    }\n    return html;\n  }\n\n  bind() {\n    if (this._mode === Mode.PROP && this.type === `string`) {\n      this._setCursorPointer();\n      this.el.addEventListener(`click`, (evt) => {\n        evt.preventDefault();\n        this.el.classList.toggle(STRING_COLLAPSED);\n      });\n    }\n  }\n\n  escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, `&amp;`)\n        .replace(/</g, `&lt;`)\n        .replace(/>/g, `&gt;`)\n        .replace(/\"/g, `&quot;`)\n        .replace(/'/g, `&#039;`);\n  }\n}\n","import ObjectView from './object/object-view';\nimport ArrayView from './array/array-view';\nimport FunctionView from './function/function-view';\nimport PrimitiveView from './primitive/primitive-view';\n\nexport const getElement = (htmlMarkup) => {\n  const div = document.createElement(`div`);\n  div.innerHTML = htmlMarkup;\n  return div.firstElementChild;\n};\n\nconst primitiveTypeofs = [\n  `undefined`,\n  `number`,\n  `string`,\n  `boolean`,\n  `symbol`,\n  `object`\n];\n\nexport const getPrimitiveType = (val) => {\n  const type = typeof val;\n\n  if (!primitiveTypeofs.includes(type)) {\n    throw new Error(`Unknown primitive type: ` + type);\n  }\n\n  return type;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\nexport const createTypedView = (val, mode) => {\n  let view;\n  const type = typeof val;\n  switch (type) {\n    case `function`:\n      view = new FunctionView(val, mode);\n      break;\n    case `object`:\n      // TODO: check instanceof Date, String, Boolean, Number\n      if (val !== null) {\n        if (Array.isArray(val)) { // TODO: typedarrays, arraybuffer, etc\n          view = new ArrayView(val, mode);\n        } else {\n          view = new ObjectView(val, mode);\n        }\n      } else {\n        view = new PrimitiveView(val, mode, type);\n      }\n      break;\n    default:\n      view = new PrimitiveView(val, mode, type);\n      break;\n  }\n  return view;\n};\n","// import babelPolyfill from 'babel-polyfill';\n// import whatwgFetch from 'whatwg-fetch';\nimport {getElement, createTypedView} from './utils';\n\nconst Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  ERROR: `error`\n};\n\nconst getRowEl = (entries, mode) => {\n  const el = getElement(`<div class=\"console__row\"></div>`);\n  entries.forEach(function (code) {\n    el.appendChild(createTypedView(code, mode).el);\n  });\n  return el;\n};\n\n/**\n * Init Console\n *\n * @param {HTMLElement} cont — console container\n * @return {{log: log}}\n */\nconst jsConsoleInit = (cont) => {\n  if (!cont) {\n    throw Error(`Console is not inited!`);\n  }\n\n  // Public interface\n  const logger = {};\n\n  /**\n   * Show formatted & highlighted code into `cont`\n   */\n  logger.log = function (...rest) {\n    cont.appendChild(getRowEl(rest, Mode.LOG));\n\n    if (typeof logger.onlog === `function`) {\n      logger.onlog(rest);\n    }\n  };\n\n  logger.error = function (errOrSmth) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    if (errOrSmth instanceof Error) {\n      el.appendChild(createTypedView(errOrSmth, Mode.ERROR).el);\n    } else {\n      el.appendChild(createTypedView(new Error(errOrSmth), Mode.ERROR).el);\n    }\n    cont.appendChild(el);\n  };\n\n  logger.clean = function () {\n    cont.innerHTML = ``;\n  };\n\n  logger.getLogSource = function () {\n    return cont.innerHTML;\n  };\n\n  logger.dir = function (val, ...rest) {\n    // cont.appendChild(getRowEl(val, Mode.DIR));\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    el.appendChild(createTypedView(val, Mode.DIR).el);\n    cont.appendChild(el);\n    if (typeof logger.onlog === `function`) {\n      logger.onlog(rest);\n    }\n  };\n\n  logger.extend = function (consoleObject) {\n    consoleObject.log = logger.log;\n    consoleObject.info = logger.log;\n\n    consoleObject.error = logger.error;\n    consoleObject.warn = logger.error;\n\n    consoleObject.dir = logger.dir;\n\n    return consoleObject;\n  };\n\n  return logger;\n};\n\n// window.jsConsoleInit = jsConsoleInit;\nexport default jsConsoleInit;\n","import jsConsoleInit from './main';\n\nconst CSS_URL = `//htmlacademy.github.io/console.js/css/style.css`;\n\nconst errors = [];\nconst collectErr = function (...rest) {\n  errors.push(rest);\n};\nwindow.onerror = collectErr;\nwindow.console.warn = collectErr;\nwindow.console.error = collectErr;\n\nconst messages = [];\nconst collectMsg = function (...rest) {\n  messages.push(...rest);\n};\nwindow.console.info = collectMsg;\nwindow.console.log = collectMsg;\nwindow.console.debug = collectMsg;\n\nconst init = function () {\n  const div = window.document.createElement(`div`);\n  div.classList.add(`console`);\n  const jsConsole = jsConsoleInit(div);\n  window.document.body.appendChild(div);\n\n  jsConsole.extend(window.console);\n\n  errors.forEach(function (args) {\n    jsConsole.error(jsConsole, ...args);\n  });\n  messages.forEach(function (args) {\n    jsConsole.log(jsConsole, ...args);\n  });\n  window.addEventListener(`error`, (evt) => {\n    jsConsole.error(evt.error);\n  });\n};\n\nconst loadStyles = function () {\n  const link = window.document.createElement(`link`);\n  link.rel = `stylesheet`;\n  link.href = CSS_URL;\n  window.document.head.appendChild(link);\n};\n\nwindow.addEventListener(`DOMContentLoaded`, function () {\n  init();\n  loadStyles();\n});\n"]}