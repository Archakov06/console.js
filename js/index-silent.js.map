{"version":3,"sources":["js/utils.js","js/abstract-view.js","js/enums.js","js/type-view.js","js/object/object-view.js","js/array/array-view.js","js/function/function-view.js","js/primitive/primitive-view.js","js/main.js","js/index-silent.js"],"names":["getElement","htmlMarkup","div","document","createElement","innerHTML","firstElementChild","AbstractView","this","template","_el","render","bind","Mode","ViewType","TypeView","params","cons","parentView","_parentView","_rootViewType","_viewType","_console","_value","val","_mode","mode","_type","type","_isOpened","_currentDepth","depth","_templateParams","onlyWrapper","_headEl","el","querySelector","_headContentEl","_headInfoEl","withHeadContentlength","_headContentLengthEl","_contentEl","afterRender","classList","toggle","add","toggleContentShowed","childElementCount","appendChild","createContent","value","fragment","_proxiedContentEl","style","display","_setCursorPointer","addEventListener","evt","preventDefault","_toggleContent","_additionHeadClickHandler","length","_isAutoExpandNeededProxied","rootFieldsMoreThanNeed","_isAutoExpandNeeded","Object","keys","minFieldsToExpand","expandDepth","exclude","includes","index","valueEl","withoutKey","entryEl","ObjectView","OBJECT","_this","stringTag","prototype","toString","call","_stringTagName","substring","_constructorName","constructor","name","_getHeadContent","elOrStr","_getHeadContent2","isShowConstructor","isHeadContentShowed","isBraced","isOpeningDisabled","isOversized","isStringified","headContentClassName","toggleHeadContentBraced","toggleHeadContentOversized","textContent","toggleInfoShowed","HTMLElement","DocumentFragment","toggleHeadContentShowed","toggleError","_setHeadClickHandler","_getHeadDirContent","_getHeadLogContent","_getHeadPreviewContent","getPrototypeOf","Error","Number","createTypedView","parseInt","nextNestingLevel","String","Date","RegExp","source","flags","obj","str","tagName","toLowerCase","id","Array","join","isPreview","createDocumentFragment","addedKeys","Set","key","hasOwnProperty","size","maxFieldsInHead","_createObjectEntryEl","err","ownPropertyNamesAndSymbols","getOwnPropertyNames","concat","getOwnPropertySymbols","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","has","view","createEntryEl","ArrayView","ARRAY","isShowLength","toggleContentLengthShowed","arr","_createArrayEntryEl","_step2","_iteratorNormalCompletion2","_iterator2","indexOf","isKeyNaN","isNaN","FnType","FunctionView","FUNCTION","_fnType","checkFnType","isShowInfo","_getHeadPropMarkup","_getHeadDirMarkup","_getHeadLogMarkup","parseFunction","_parseFunction","joinedLines","lines","markup","_parseFunction2","_parseFunction3","funString","paramsStart","paramsEnd","paramsContent","trim","split","map","it","endingChar","ex","exec","bodyStart","bodyEnd","lastIndexOf","bodyContent","fnOrString","parseParams","parseBody","fn","tempValue","firstParenthesisIndex","classIndex","arrowIndex","PrimitiveView","PRIMITIVE","unsafe","replace","html","escapeHtml","Infinity","substr","Console","container","arguments","undefined","_container","_parseParams","object","array","function","paramsObject","paramName","isArray","availableTypes","push","every","rest","_len","_key","_getRowEl","onlog","onerror","ondir","_typeof","entries","forEach","consoleObject","log","info","error","warn","dir","window","collectErr","console","messages","collectLogs","apply","dirs","jsConsole","body","extend","rel","href","CSS_URL","head"],"mappings":"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","file":"index-silent.js","sourcesContent":["export const getElement = (htmlMarkup) => {\n  const div = document.createElement(`div`);\n  div.innerHTML = htmlMarkup;\n  return div.firstElementChild;\n};\n","import {getElement} from './utils';\n\nexport default class AbstractView {\n  constructor() {}\n\n  /**\n   * @abstract\n   * @return {string}\n   */\n  get template() {}\n\n  get el() {\n    if (!this._el) {\n      this._el = this.render();\n      this.bind(this._el);\n    }\n    return this._el;\n  }\n\n  render() {\n    return getElement(this.template);\n  }\n\n  bind() {}\n}\n","export const Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  PROP: `prop`,\n  ERROR: `error`\n};\n\nexport const ViewType = {\n  FUNCTION: `function`,\n  OBJECT: `object`,\n  ARRAY: `array`,\n  PRIMITIVE: `primitive`\n};\n\nexport const Class = {\n  CONSOLE_ITEM_HEAD: `item__head`,\n  CONSOLE_ITEM_POINTER: `item_pointer`,\n  CONSOLE_ITEM_HEAD_SHOW: `item__head_show`,\n  ENTRY_CONTAINER_BRACED: `entry-container_braced`,\n  ENTRY_CONTAINER_OVERSIZE: `entry-container_oversize`,\n  CONSOLE_ITEM_HEAD_PARENTHESED: `item__head_parenthesed`,\n  CONSOLE_ITEM_HEAD_INFO: `item__head-info`,\n  CONSOLE_ITEM_HEAD_ELEMENTS: `item__head-elements`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_SHOW: `item__head-elements_show`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER: `item-content-container`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER_SHOW: `item-content-container_show`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH: `item__head-elements-length`,\n  CONSOLE_ITEM_HEAD_ELEMENTS_LENGTH_SHOW: `item__head-elements-length_show`\n};\n","import AbstractView from './abstract-view';\nimport {getElement} from './utils';\nimport {Mode} from './enums';\n\nexport default class TypeView extends AbstractView {\n  constructor(params, cons) {\n    super();\n    if (params.parentView) {\n      this._parentView = params.parentView;\n      this._rootViewType = params.parentView._rootViewType;\n    }\n    this._viewType = null;\n    this._console = cons;\n    this._value = params.val;\n    this._mode = params.mode;\n    this._type = params.type;\n    this._isOpened = false;\n    this._currentDepth = typeof params.depth === `number` ? params.depth : 1;\n    this._templateParams = {};\n  }\n\n  get template() {\n    return `\\\n<div class=\"console__item item item--${this._viewType}\">\\\n  <div class=\"item__head\">\\\n    <span class=\"item__head-info\"></span>\\\n    ${this._templateParams.withHeadContentlength ? `<span class=\"item__head-content-length\">${this.value.length}</span>` : ``}\\\n    <div class=\"item__head-content entry-container entry-container--head entry-container--${this._viewType}\"></div>\\\n  </div>\\\n  <div class=\"item__content entry-container entry-container--${this._viewType}\"></div>\\\n</div>`;\n  }\n\n  afterRender() {}\n\n  bind() {\n    if (!this._templateParams.onlyWrapper) {\n      this._headEl = this.el.querySelector(`.item__head`);\n      this._headContentEl = this._headEl.querySelector(`.item__head-content`);\n      this._headInfoEl = this._headEl.querySelector(`.item__head-info`);\n      if (this._templateParams.withHeadContentlength) {\n        this._headContentLengthEl = this._headEl.querySelector(`.item__head-content-length`);\n      }\n\n      this._contentEl = this.el.querySelector(`.item__content`);\n    }\n    this.afterRender();\n  }\n\n  toggleHeadContentBraced() {\n    this._headContentEl.classList.toggle(`entry-container--braced`);\n  }\n\n  toggleHeadContentOversized() {\n    this._headContentEl.classList.toggle(`entry-container--oversize`);\n  }\n\n  toggleInfoShowed() {\n    this._headInfoEl.classList.toggle(`item__head-info--show`);\n  }\n\n  toggleContentLengthShowed() {\n    this._headContentLengthEl.classList.toggle(`item__head-content-length--show`);\n  }\n\n  toggleHeadContentShowed() {\n    this._headContentEl.classList.toggle(`item__head-content--show`);\n  }\n\n  toggleContentShowed() {\n    this.el.classList.toggle(`item--show-content`);\n  }\n\n  toggleError() {\n    this.el.classList.toggle(Mode.ERROR);\n  }\n\n  _setCursorPointer() {\n    this._headEl.classList.add(`item__head--pointer`);\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get mode() {\n    return this._mode;\n  }\n\n  get nextNestingLevel() {\n    return this._currentDepth + 1;\n  }\n\n  get _isAutoExpandNeeded() {\n    if (!this._isAutoExpandNeededProxied) {\n      let rootFieldsMoreThanNeed = false;\n      if (this._parentView && this._parentView._isAutoExpandNeeded) {\n        rootFieldsMoreThanNeed = true;\n      } else if (Object.keys(this.value).length >= // Object.getOwnPropertyNames\n      this._console.params[this._rootViewType].minFieldsToExpand) {\n        rootFieldsMoreThanNeed = true;\n      }\n      if (this._viewType !== null &&\n      this._currentDepth <= this._console.params[this._rootViewType].expandDepth &&\n      rootFieldsMoreThanNeed &&\n      !this._console.params[this._rootViewType].exclude.includes(this._viewType)) {\n        this._isAutoExpandNeededProxied = true;\n      }\n    }\n    return this._isAutoExpandNeededProxied;\n  }\n\n  _toggleContent() {\n    this.toggleContentShowed();\n    if (this._contentEl.childElementCount === 0) {\n      this._contentEl.appendChild(this.createContent(this.value, false).fragment);\n    }\n  }\n\n  _hideContent() {\n    this._proxiedContentEl.style.display = `none`;\n  }\n\n  _additionHeadClickHandler() {}\n\n  _setHeadClickHandler() {\n    this._setCursorPointer();\n    this._headEl.addEventListener(`click`, (evt) => {\n      evt.preventDefault();\n      this._toggleContent();\n      this._additionHeadClickHandler();\n    });\n  }\n\n  static createEntryEl(index, valueEl, withoutKey) {\n    const entryEl = getElement(`\\\n<span class=\"entry-container__entry\">\\\n  ${withoutKey ? `` : `<span class=\"entry-container__key\">${index}</span>`}<span class=\"entry-container__value-container\"></span>\\\n</span>`);\n    const valueContEl = entryEl.querySelector(`.entry-container__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","/* eslint guard-for-in: \"off\"*/\n/* eslint no-empty: \"off\"*/\nimport TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nexport default class ObjectView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this._viewType = ViewType.OBJECT;\n    if (!params.parentView) {\n      this._rootViewType = this._viewType;\n    }\n    const stringTag = Object.prototype.toString.call(this.value);\n    this._stringTagName = stringTag.substring(8, stringTag.length - 1);\n    this._constructorName = this.value.constructor.name;\n  }\n\n  afterRender() {\n    const {\n      elOrStr,\n      isShowConstructor,\n      isHeadContentShowed,\n      isBraced,\n      isOpeningDisabled,\n      isOversized,\n      isStringified,\n      headContentClassName\n    } = this._getHeadContent();\n\n    if (headContentClassName) {\n      this._headContentEl.classList.add(headContentClassName);\n    }\n    if (isBraced) {\n      this.toggleHeadContentBraced();\n    }\n    if (isOversized) {\n      this.toggleHeadContentOversized();\n    }\n\n    if (this._constructorName === `Object` && this._stringTagName !== `Object`) {\n      this._headInfoEl.textContent = this._stringTagName;\n    } else {\n      this._headInfoEl.textContent = this._constructorName;\n    }\n    if (isShowConstructor) {\n      this.toggleInfoShowed();\n    }\n\n    if (isHeadContentShowed) {\n      if (elOrStr instanceof HTMLElement || elOrStr instanceof DocumentFragment) {\n        this._headContentEl.appendChild(elOrStr);\n      } else {\n        this._headContentEl.innerHTML = elOrStr;\n      }\n      this.toggleHeadContentShowed();\n    }\n\n    if (this._mode === Mode.LOG || this._mode === Mode.ERROR && !this._parentView && !isStringified) {\n      this._headEl.classList.add(`item__head--italic`);\n    }\n\n    if (this._mode === Mode.ERROR && isStringified) {\n      this.toggleError();\n    }\n\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    if (!isOpeningDisabled) {\n      if (this._isAutoExpandNeeded) {\n        this._toggleContent();\n      }\n      this._setHeadClickHandler();\n    }\n  }\n\n  _getHeadContent() {\n    if (this._mode === Mode.DIR) {\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.LOG || this._mode === Mode.PROP || this._mode === Mode.ERROR) {\n      return this._getHeadLogContent();\n    } else if (this._mode === Mode.PREVIEW) {\n      return this._getHeadPreviewContent();\n    }\n    return ``;\n  }\n\n  _getHeadPreviewContent() {\n    if (this._stringTagName === `Object`) {\n      return {\n        elOrStr: `...`,\n        isShowConstructor: false,\n        isHeadContentShowed: true,\n        isBraced: true\n      };\n    }\n    return this._getHeadDirContent();\n  }\n\n  _getHeadLogContent() {\n    let val;\n    let isShowConstructor = false;\n    let isBraced = true;\n    let isOpeningDisabled = false;\n    let isOversized = false;\n    let isStringified = false;\n    let headContentClassName;\n\n    if (this.value instanceof HTMLElement && Object.getPrototypeOf(this.value).constructor !== HTMLElement) {\n      return this._getHeadDirContent();\n    } else if (this.value instanceof Error) {\n      isBraced = false;\n      val = this.value.toString();\n      isStringified = true;\n    } else if (this.value instanceof Number) {\n      const view = this._console.createTypedView(Number.parseInt(this.value, 10), Mode.PREVIEW, this.nextNestingLevel, this);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof String) {\n      const view = this._console.createTypedView(this.value.toString(), Mode.PREVIEW, this.nextNestingLevel, this);\n      val = view.el;\n      isShowConstructor = true;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n      isStringified = true;\n      isBraced = false;\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n      headContentClassName = `regexp`;\n      isOpeningDisabled = true;\n      isBraced = false;\n    } else {\n      const obj = this.createContent(this.value, true);\n      val = obj.fragment;\n      isOversized = obj.isOversized;\n      if (this._stringTagName !== `Object` || this._constructorName !== `Object`) {\n        isShowConstructor = true;\n      }\n    }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isHeadContentShowed: true,\n      isBraced,\n      isOpeningDisabled,\n      isOversized,\n      isStringified,\n      headContentClassName\n    };\n  }\n\n  _getHeadDirContent() {\n    let val;\n    let isShowConstructor = false;\n    let isHeadContentShowed = true;\n    let isBraced = false;\n    if (this.value instanceof HTMLElement) {\n      let str = this.value.tagName.toLowerCase();\n      str += this.value.id;\n      if (this.value.classList.length) {\n        str += `.` + Array.prototype.join.call(this.value.classList, `.`);\n      }\n      val = str;\n    } else if (this.value instanceof Date) {\n      val = this.value.toString();\n    } else if (this.value instanceof RegExp) {\n      val = `/${this.value.source}/${this.value.flags}`;\n    } else if (this.value instanceof Error) {\n      val = this.value.toString();\n    } else {\n      val = this.value;\n      isShowConstructor = true;\n      isHeadContentShowed = false;\n    }\n    return {\n      elOrStr: val,\n      isShowConstructor,\n      isHeadContentShowed,\n      isBraced\n    };\n  }\n\n  createContent(obj, isPreview) {\n    const fragment = document.createDocumentFragment();\n    const addedKeys = new Set();\n    // TODO: Добавить счётчик, чтобы больше 5 значений не добавлялось\n    for (let key in obj) {\n      if (isPreview && !obj.hasOwnProperty(key)) { // Перечисляемые свои\n        continue;\n      }\n      if (isPreview && addedKeys.size === this._console.params[this._viewType].maxFieldsInHead) {\n        return {\n          fragment,\n          isOversized: true\n        };\n      }\n      try {\n        const val = obj[key];\n        fragment.appendChild(this._createObjectEntryEl(key, val, isPreview));\n        addedKeys.add(key);\n      } catch (err) {}\n    }\n    const ownPropertyNamesAndSymbols = Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n    for (let key of ownPropertyNamesAndSymbols) { // Неперечисляемые свои\n      if (addedKeys.has(key)) {\n        continue;\n      }\n      if (isPreview && addedKeys.size === this._console.params[this._viewType].maxFieldsInHead) {\n        return {\n          fragment,\n          isOversized: true\n        };\n      }\n      try {\n        const val = obj[key];\n        fragment.appendChild(this._createObjectEntryEl(key, val, isPreview));\n        addedKeys.add(key);\n      } catch (err) {}\n    }\n    return {\n      fragment,\n      isOversized: false\n    };\n  }\n\n  _createObjectEntryEl(key, val, isPreview) {\n    const view = this._console.createTypedView(val, isPreview ? Mode.PREVIEW : Mode.PROP, this.nextNestingLevel, this);\n    return ObjectView.createEntryEl(key.toString(), view.el);\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nexport default class ArrayView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this._viewType = ViewType.ARRAY;\n    if (!params.parentView) {\n      this._rootViewType = this._viewType;\n    }\n\n    this._templateParams.withHeadContentlength = true;\n  }\n\n  afterRender() {\n    const {isShowConstructor, isHeadContentShowed, isShowLength} = this._getHeadContent();\n    this.toggleHeadContentBraced();\n    this._headInfoEl.textContent = this.value.constructor.name;\n    if (isShowConstructor) {\n      this.toggleInfoShowed();\n    }\n    if (isHeadContentShowed) {\n      this.toggleHeadContentShowed();\n      this._headContentEl.appendChild(this.createContent(this.value, true).fragment);\n    }\n    if (isShowLength) {\n      this.toggleContentLengthShowed();\n    }\n    if (this._mode === Mode.LOG || this._mode === Mode.ERROR && !this._parentView) {\n      this._headEl.classList.add(`item__head--italic`);\n    }\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    if (this._isAutoExpandNeeded) {\n      this._toggleContent();\n    }\n    this._setHeadClickHandler();\n  }\n\n  _additionHeadClickHandler() {\n    if (this._mode === Mode.PROP) {\n      this.toggleInfoShowed();\n      this.toggleContentLengthShowed();\n      this.toggleHeadContentShowed();\n    }\n  }\n\n  _getHeadContent() {\n    let isShowConstructor = false;\n    let isHeadContentShowed = true;\n    let isShowLength = this.value.length > 1;\n    if (this._mode === Mode.DIR) {\n      isShowConstructor = true;\n      isHeadContentShowed = false;\n      isShowLength = true;\n    } else if (this._mode === Mode.PREVIEW) {\n      isShowConstructor = true;\n      isHeadContentShowed = false;\n      isShowLength = true;\n    }\n    return {\n      isShowConstructor,\n      isHeadContentShowed,\n      isShowLength\n    };\n  }\n\n  createContent(arr, isPreview) {\n    const keys = Object.keys(arr);\n    const addedKeys = new Set();\n    const fragment = document.createDocumentFragment();\n    for (let key of keys) {\n      addedKeys.add(key);\n      const val = arr[key];\n      fragment.appendChild(this._createArrayEntryEl(key, val, isPreview));\n    }\n    for (let key of Object.getOwnPropertyNames(arr)) {\n      if (addedKeys.has(key)) {\n        continue;\n      }\n      if (isPreview && keys.indexOf(key) === -1) {\n        continue;\n      }\n      const val = arr[key];\n      fragment.appendChild(this._createArrayEntryEl(key, val, isPreview));\n    }\n    return {fragment};\n  }\n\n  _createArrayEntryEl(key, val, isPreview) {\n    const isKeyNaN = Number.isNaN(Number.parseInt(key, 10));\n    const view = this._console.createTypedView(val, isPreview ? Mode.PREVIEW : Mode.PROP, this.nextNestingLevel, this);\n    return ArrayView.createEntryEl(key.toString(), view.el, isPreview ? !isKeyNaN : isPreview);\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nconst MAX_PREVIEW_FN_BODY_LENGTH = 43;\n\nconst FnType = {\n  PLAIN: `plain`,\n  ARROW: `arrow`,\n  CLASS: `class`\n};\n\n// arguments, caller, length, name, prototype, __proto__, [[FunctionLocation]], [[Scopes]]\n\n// if .caller not accessed — не выводим\n// if prototype undefined — не выводим\n// name — если неименованная — получает имя переменной, в которую записана\n// если именнованная — то имя ф-ии\n\nexport default class FunctionView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this._viewType = ViewType.FUNCTION;\n    if (!params.parentView) {\n      this._rootViewType = this._viewType;\n    }\n    this._fnType = FunctionView.checkFnType(this.value);\n  }\n\n  afterRender() {\n    this._headEl.classList.add(`item__head--italic`);\n    this._headInfoEl.classList.add(`item__head-info--function`);\n    switch (this._fnType) {\n      case FnType.CLASS:\n        this._headInfoEl.textContent = `class`;\n        break;\n      case FnType.PLAIN:\n      case FnType.ARROW:\n        this._headInfoEl.textContent = `f`;\n        break;\n    }\n    let isShowInfo = false;\n    if (this._fnType !== FnType.ARROW) {\n      isShowInfo = true;\n    }\n    switch (this._mode) {\n      case Mode.PROP:\n        this._headContentEl.innerHTML = this._getHeadPropMarkup();\n        break;\n      case Mode.DIR:\n        this._headContentEl.innerHTML = this._getHeadDirMarkup();\n        break;\n      case Mode.LOG:\n      case Mode.ERROR:\n        this._headContentEl.innerHTML = this._getHeadLogMarkup();\n        break;\n      case Mode.PREVIEW:\n        isShowInfo = true;\n        break;\n    }\n    if (isShowInfo) {\n      this.toggleInfoShowed();\n    }\n\n    if (this._mode !== Mode.PREVIEW) {\n      this.toggleHeadContentShowed();\n    }\n\n    if (this._mode !== Mode.DIR && this._mode !== Mode.PROP) {\n      return;\n    }\n\n    if (this._isAutoExpandNeeded) {\n      this._toggleContent();\n    }\n    this._setHeadClickHandler();\n  }\n\n  _getHeadPropMarkup() {\n    const {name, params, lines} = this.parseFunction(this.value);\n    const joinedLines = lines.join(`\\n`);\n\n    let markup = `\\\n<span>\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}`;\n    if (this._fnType !== FnType.CLASS) {\n      markup += `${joinedLines.length <= MAX_PREVIEW_FN_BODY_LENGTH ? joinedLines : `{...}`}`;\n    }\n    markup += `</span>`;\n    return markup;\n  }\n\n  _getHeadDirMarkup() {\n    const {name, params} = this.parseFunction(this.value);\n\n    let markup = `\\\n${name ? name : ``}\\\n${this._fnType === FnType.PLAIN ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? `()` : ``}`;\n    return markup;\n  }\n\n  _getHeadLogMarkup() {\n    const {name, params, lines} = this.parseFunction(this.value);\n    return `\\\n<pre>\\\n${name && this._fnType !== FnType.ARROW ? `${name} ` : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}${lines.join(`\\n`)}\\\n</pre>`;\n  }\n\n  parseParams(funString) {\n    const paramsStart = funString.indexOf(`(`);\n    const paramsEnd = funString.indexOf(`)`);\n\n    const paramsContent = funString.substring(paramsStart + 1, paramsEnd).trim();\n\n    return paramsContent ? paramsContent.split(`,`).map((it) => it.trim()) : [];\n  }\n\n  parseName(funString) {\n    let endingChar;\n    if (this._fnType === FnType.CLASS) {\n      endingChar = `{`;\n    } else if (this._fnType === FnType.PLAIN) {\n      endingChar = `(`;\n    }\n    let name;\n    const re = new RegExp(`(?:class|function)\\\\s+(\\\\w+)\\\\s*(?:\\\\${endingChar})`);\n    const ex = re.exec(funString);\n    if (ex !== null) {\n      name = ex[1];\n    }\n    return name;\n  }\n\n  parseBody(funString) {\n    const bodyStart = funString.indexOf(`{`);\n    const bodyEnd = funString.lastIndexOf(`}`);\n\n    const bodyContent = funString.substring(bodyStart, bodyEnd + 1).trim();\n\n    if (!bodyContent) {\n      return [];\n    }\n\n    return bodyContent.split(`\\n`);\n  }\n\n  parseFunction(fnOrString) {\n    let str;\n    if (typeof fnOrString !== `string`) {\n      str = fnOrString.toString();\n    }\n    return {\n      name: fnOrString.name, // this.parseName(str),\n      params: this.parseParams(str),\n      lines: this.parseBody(str)\n    };\n  }\n\n  createContent(fn) {\n    const fragment = document.createDocumentFragment();\n    const fnKeys = [`name`, `prototype`, `length`, `__proto__`];\n    const keys = Object.keys(fn).concat(fnKeys);\n    for (let key of keys) {\n      let value;\n      try {\n        const tempValue = fn[key];\n        if (typeof tempValue !== `undefined`) {\n          value = tempValue;\n        } else {\n          continue;\n        }\n      } catch (err) {\n        continue;\n      }\n      const view = this._console.createTypedView(value, Mode.PROP, this.nextNestingLevel, this);\n      const entryEl = FunctionView.createEntryEl(key.toString(), view.el);\n      fragment.appendChild(entryEl);\n    }\n    return {fragment};\n  }\n\n  static checkFnType(fn) {\n    let str = fn.toString();\n    const firstParenthesisIndex = str.indexOf(`(`);\n\n    const classIndex = str.indexOf(`class`);\n    const arrowIndex = str.indexOf(`=>`);\n    if (classIndex !== -1 && classIndex < firstParenthesisIndex) {\n      return FnType.CLASS;\n    } else if (arrowIndex !== -1 && arrowIndex > firstParenthesisIndex) {\n      return FnType.ARROW;\n    }\n    return FnType.PLAIN;\n  }\n}\n","import TypeView from '../type-view';\nimport {Mode, ViewType} from '../enums';\n\nexport default class PrimitiveView extends TypeView {\n  constructor(params, cons) {\n    super(params, cons);\n    this._viewType = ViewType.PRIMITIVE;\n  }\n\n  get template() {\n    const type = this._type;\n    let value = this.value;\n    let html = ``;\n    if (type === `string` || type === `symbol`) {\n      if (type === `symbol`) {\n        value = value.toString();\n      }\n      value = this.escapeHtml(value);\n    }\n    switch (type) {\n      case `undefined`:\n      case `null`:\n      case `boolean`:\n        html = `<div class=\"console__item item item--primitive ${type}\">${value}</div>`;\n        break;\n\n      case `number`:\n        if (Number.isNaN(value)) {\n          html = `<div class=\"console__item item item--primitive NaN\">NaN</div>`;\n        } else if ((value === Infinity || value === -Infinity)) {\n          html = `<div class=\"console__item item item--primitive number\">${(value === -Infinity ? `-` : ``)}Infinity</div>`;\n        } else {\n          html = `<div class=\"console__item item item--primitive ${type}\">${value}</div>`;\n        }\n        break;\n\n      case `string`:\n        let str;\n        if (this._mode === Mode.PREVIEW && value.length > 100) {\n          str = `${value.substr(0, 50)}...${value.substr(-50)}`;\n        } else {\n          str = value;\n        }\n        html = `<pre class=\"console__item item item--primitive string ${this._mode === Mode.PROP || this._mode === Mode.PREVIEW ? `string--nowrap` : ``} ${this._mode === Mode.PROP ? `pointer` : ``} ${this._mode === Mode.ERROR ? `${this._mode}` : ``}\">${str}</pre>`;\n        break;\n      case `symbol`:\n        html = `<div class=\"console__item item item--primitive symbol\">${value}</div>`;\n        break;\n\n      case `object`:\n        if (value === null) {\n          html = `<div class=\"console__item item item--primitive null\">${value}</div>`;\n          break;\n        }\n    }\n    return html;\n  }\n\n  bind() {\n    if (this._mode === Mode.PROP && this._type === `string`) {\n      this.el.addEventListener(`click`, (evt) => {\n        evt.preventDefault();\n        this.el.classList.toggle(`string--nowrap`);\n      });\n    }\n  }\n\n  escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, `&amp;`)\n        .replace(/</g, `&lt;`)\n        .replace(/>/g, `&gt;`)\n        .replace(/\"/g, `&quot;`)\n        .replace(/'/g, `&#039;`);\n  }\n}\n","import ObjectView from './object/object-view';\nimport ArrayView from './array/array-view';\nimport FunctionView from './function/function-view';\nimport PrimitiveView from './primitive/primitive-view';\nimport {getElement} from './utils';\nimport {Mode, ViewType} from './enums';\n\nconst MAX_HEAD_ELEMENTS_LENGTH = 5;\n\n/**\n * Console\n * @class\n */\nexport default class Console {\n  /**\n   * Initialize console into container\n   * @param {HTMLElement} container — console container\n   * @param {{}} params — parameters\n   * @property {number} params.minFieldsToExpand — min number of fields in obj to expand\n   * @property {number} params.maxFieldsInHead — max number of preview fields inside head\n   * @property {number} params.expandDepth — level of depth to expand\n   **/\n  constructor(container, params = {}) {\n    if (!container) {\n      throw new Error(`Console is not inited!`);\n    }\n    this._container = container;\n    this.params = {\n      object: this._parseParams(params.object, `object`),\n      array: this._parseParams(params.array, `array`),\n      function: this._parseParams(params.function, `function`)\n    };\n  }\n\n  _parseParams(paramsObject, paramName) {\n    if (paramsObject) {\n      // Set this._expandDepth and this._minFieldsToExpand only if expandDepth provided and > 0\n      if (typeof paramsObject.expandDepth === `number` &&\n      paramsObject.expandDepth > 0) {\n\n        paramsObject.minFieldsToExpand = (\n          typeof paramsObject.minFieldsToExpand === `number` &&\n          paramsObject.minFieldsToExpand > 0\n        ) ? paramsObject.minFieldsToExpand : 0;\n      }\n\n      paramsObject.maxFieldsInHead = (\n        typeof paramsObject.maxFieldsInHead === `number` &&\n        paramsObject.maxFieldsInHead > 0\n      ) ? paramsObject.maxFieldsInHead : MAX_HEAD_ELEMENTS_LENGTH;\n    } else {\n      paramsObject = {};\n      if (paramName === `object`) {\n        paramsObject.maxFieldsInHead = MAX_HEAD_ELEMENTS_LENGTH;\n      }\n    }\n    if (!Array.isArray(paramsObject.exclude)) {\n      paramsObject.exclude = [];\n    } else {\n      const availableTypes = [];\n      for (let key in ViewType) {\n        if (ViewType.hasOwnProperty(key)) {\n          const type = ViewType[key];\n          availableTypes.push(type);\n        }\n      }\n      if (!paramsObject.exclude.every((type) => availableTypes.includes(type))) {\n        throw new Error(`Provided type to exclude is not in available types`);\n      }\n    }\n    return paramsObject;\n  }\n\n  /**\n   * Subscribe on log event fired\n   * @abstract\n   **/\n  onlog() {}\n\n  /**\n   * Subscribe on dir event fired\n   * @abstract\n   **/\n  ondir() {}\n\n  /**\n   * Subscribe on error event fired\n   * @abstract\n   **/\n  onerror() {}\n\n  /**\n   * Equivalent to console.log\n   * Push rest of arguments into container\n   */\n  log(...rest) {\n    this._container.appendChild(this._getRowEl(rest, Mode.LOG));\n    this.onlog();\n  }\n\n  /**\n   * Equivalent to console.error\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  error(val) {\n    const el = getElement(`<div class=\"console__row console__row--error\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.ERROR).el);\n    this._container.appendChild(el);\n    this.onerror();\n  }\n\n  /**\n   * Equivalent to console.dir\n   * Push single value into conainer\n   * @param {*} val — value\n   */\n  dir(val) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    el.appendChild(this.createTypedView(val, Mode.DIR).el);\n    this._container.appendChild(el);\n    this.ondir();\n  }\n\n  /**\n   * Clean container\n   */\n  clean() {\n    this._container.innerHTML = ``;\n  }\n\n  createTypedView(val, mode, depth, parentView) {\n    const params = {val, mode, depth, parentView, type: typeof val};\n    let view;\n    switch (params.type) {\n      case `function`:\n        view = new FunctionView(params, this);\n        break;\n      case `object`:\n        if (val !== null) {\n          if (Array.isArray(val)) {\n            view = new ArrayView(params, this);\n          } else {\n            view = new ObjectView(params, this);\n          }\n        } else {\n          view = new PrimitiveView(params, this);\n        }\n        break;\n      default:\n        view = new PrimitiveView(params, this);\n        break;\n    }\n    return view;\n  }\n\n  _getRowEl(entries, mode) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    entries.forEach((val) => {\n      el.appendChild(this.createTypedView(val, mode).el);\n    });\n    return el;\n  }\n\n  /**\n   * get innerHTML of container\n   */\n  get sourceLog() {\n    return this._container.innerHTML;\n  }\n\n  /**\n   * Extend console\n   * @param {{}} consoleObject\n   * @return {{}} extended console\n   */\n  extend(consoleObject) {\n    consoleObject.log = this.log.bind(this);\n    consoleObject.info = this.log.bind(this);\n\n    consoleObject.error = this.error.bind(this);\n    consoleObject.warn = this.error.bind(this);\n\n    consoleObject.dir = this.dir.bind(this);\n    return consoleObject;\n  }\n}\n","import Console from './main';\n\nconst CSS_URL = `//htmlacademy.github.io/console.js/css/style.min.css`;\n\nconst errors = [];\nconst collectErr = function (evt) {\n  errors.push(evt.error);\n};\nwindow.addEventListener(`error`, collectErr);\nwindow.console.warn = collectErr;\nwindow.console.error = collectErr;\n\nconst messages = [];\nconst collectLogs = function (...rest) {\n  messages.push(...rest);\n};\n\nconst dirs = [];\nconst collectDirs = (val) => {\n  dirs.push(val);\n};\n\nwindow.console.info = collectLogs;\nwindow.console.log = collectLogs;\nwindow.console.dir = collectDirs;\n// window.console.debug = collectMsg;\n\nconst init = function () {\n  const div = window.document.createElement(`div`);\n  div.classList.add(`console`);\n  const jsConsole = new Console(div);\n  window.document.body.appendChild(div);\n\n  jsConsole.extend(window.console);\n\n  errors.forEach(function (err) {\n    jsConsole.error(err);\n  });\n  messages.forEach(function (val) {\n    jsConsole.log(val);\n  });\n  dirs.forEach((val) => {\n    jsConsole.dir(val);\n  });\n  window.addEventListener(`error`, (evt) => {\n    jsConsole.error(evt.error);\n  });\n};\n\nconst loadStyles = function () {\n  const style = window.document.createElement(`link`);\n  style.rel = `stylesheet`;\n  style.href = CSS_URL;\n  window.document.head.appendChild(style);\n};\n\nwindow.addEventListener(`DOMContentLoaded`, function () {\n  init();\n  loadStyles();\n});\n"]}