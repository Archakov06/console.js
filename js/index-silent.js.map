{"version":3,"sources":["js/abstract-view.js","js/type-view.js","js/enums.js","js/object/object-view.js","js/array/array-view.js","js/function/function-view.js","js/primitive/primitive-view.js","js/utils.js","js/main.js","js/index-silent.js"],"names":["AbstractView","getElement","this","template","_el","render","bind","TypeView","value","type","isPrimitive","_value","_type","_isPrimitive","Mode","Class","ObjectView","mode","_mode","_entries","Map","_instanceOfOther","toString","_isOpened","headEl","el","querySelector","_contentContainerEl","elOrStr","_getHeadContent","HTMLElement","DocumentFragment","appendChild","innerHTML","addEventListener","_this2","_hideContent","_showContent","_proxiedContentEl","createContent","_getHeadDirContent","str","tagName","toLowerCase","classList","length","Array","prototype","join","call","Error","stack","constructor","name","obj","isPreview","fragment","document","createDocumentFragment","keys","Set","key","add","view","createTypedView","entryEl","createEntryEl","_step","Object","getOwnPropertyNames","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","has","valueEl","ArrayView","arr","_arr","_elements","previewEl","ownPropertyNames","indexInKeys","indexOf","isKeyNaN","Number","isNaN","parseInt","index","withKey","FnType","FunctionView","fn","_fnType","checkFnType","_parseFunction","_parseFunction2","params","joinedLines","lines","markup","funString","paramsStart","paramsEnd","paramsContent","substring","trim","split","map","it","endingChar","ex","RegExp","exec","bodyStart","bodyEnd","lastIndexOf","bodyContent","fnOrString","_parseName","_parseParams","_parseBody","err","tpl","_getHeadMarkup","_getLogMarkup","firstParenthesisIndex","classIndex","arrowIndex","PrimitiveView","html","Infinity","htmlMarkup","div","createElement","firstElementChild","val","_typeof","isArray","getRowEl","entries","forEach","code","errors","collectErr","rest","_len","_key","arguments","push","window","onerror","console","warn","error","messages","collectMsg","apply","info","log","debug","init","jsConsole","cont","logger","onlog","errOrMessage","clean","getLogSource","dir","_len2","_key2","extend","consoleObject","jsConsoleInit","body","args","concat","toConsumableArray","evt","link","rel","href","CSS_URL","head"],"mappings":"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","file":"index-silent.js","sourcesContent":["import {getElement} from './utils';\n\nexport default class AbstractView {\n  constructor() {}\n\n  /**\n   * @abstract\n   * @return {string}\n   */\n  get template() {}\n\n  get el() {\n    if (!this._el) {\n      this._el = this.render();\n      this.bind(this._el);\n    }\n    return this._el;\n  }\n\n  render() {\n    return getElement(this.template);\n  }\n\n  bind() {}\n}\n","import AbstractView from './abstract-view';\n\nexport default class TypeView extends AbstractView {\n  constructor(value, type, isPrimitive) {\n    super();\n    this._value = value;\n    this._type = type;\n    this._isPrimitive = isPrimitive;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get isPrimitive() {\n    return this._isPrimitive;\n  }\n}\n","export const Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  ERROR: `error`\n};\n\nexport const Class = {\n  CONSOLE_ITEM_HEAD: `console__item-head`,\n  CONSOLE_ITEM_HEAD_SIZE: `console__item-head_size`,\n  CONSOLE_ITEM_HEAD_ELEMENTS: `console__item-head_elements`,\n  CONSOLE_ITEM_CONTENT_CONTAINTER: `console__item-content-container`\n};\n","/* eslint guard-for-in: \"off\"*/\nimport TypeView from '../type-view';\nimport {getElement, createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nexport default class ObjectView extends TypeView {\n  constructor(value, mode) {\n    super(value, `object`, false);\n    this._mode = mode;\n    this._entries = new Map();\n    this._instanceOfOther = value.toString() !== `[object Object]`;\n    this._isOpened = false;\n  }\n\n  get template() {\n    return `\n<div class=\"object ${!this._instanceOfOther ? `object_Object` : ``} ${this._mode === Mode.ERROR ? `${this._mode}` : ``} console__item\">\\\n  <div class=\"${Class.CONSOLE_ITEM_HEAD}\"></div>\\\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}\"></div>\\\n</div>`;\n  }\n\n  bind() {\n    const headEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    // headEl.appendChild(this.createContent(this.value, true));\n\n    const elOrStr = this._getHeadContent();\n    if (elOrStr instanceof HTMLElement || elOrStr instanceof DocumentFragment) {\n      headEl.appendChild(elOrStr);\n    } else {\n      headEl.innerHTML = elOrStr;\n    }\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n\n    headEl.addEventListener(`click`, () => {\n      if (this._isOpened) {\n        this._hideContent();\n      } else {\n        this._showContent();\n      }\n      this._isOpened = !this._isOpened;\n    });\n  }\n\n  _showContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item-content\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value, false));\n    }\n\n    this._contentContainerEl.appendChild(this._proxiedContentEl);\n  }\n\n  _hideContent() {\n    this._contentContainerEl.innerHTML = ``;\n  }\n\n  _getHeadContent() {\n    if (!this._instanceOfOther) {\n      if (this._mode !== Mode.PREVIEW) {\n        return this.createContent(this.value, true);\n      }\n      return `...`;\n    }\n    if (this._mode === Mode.DIR) {\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.LOG) { // Временно выводим для .log .error и preview то же, что и для .dir\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.PREVIEW) {\n      return this._getHeadDirContent();\n    } else if (this._mode === Mode.ERROR) {\n      return this._getHeadDirContent();\n    }\n    return ``;\n  }\n\n  _getHeadPreviewContent() {}\n  _getHeadLogContent() {}\n  _getHeadErrorContent() {}\n  _getHeadDirContent() {\n    if (this.value instanceof HTMLElement) {\n      let str = this.value.tagName.toLowerCase();\n      if (this.value.classList.length) {\n        str += `.` + Array.prototype.join.call(this.value.classList, `.`);\n      }\n      return str;\n    } else if (this.value instanceof Error) {\n      return `<pre>${this.value.stack}</pre>`;\n    }\n    return this.value.constructor.name;\n  }\n\n  createContent(obj, isPreview) {\n    const fragment = document.createDocumentFragment();\n    const keys = new Set();\n    for (let key in obj) {\n      keys.add(key);\n      const value = obj[key];\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.DIR);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    for (let key of Object.getOwnPropertyNames(obj)) {\n      if (keys.has(key)) {\n        continue;\n      }\n      const value = obj[key];\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.DIR);\n      const entryEl = ObjectView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return fragment;\n  }\n\n  static createEntryEl(key, valueEl) {\n    const entryEl = getElement(`\\\n<span class=\"object__entry object-entry\">\n  <span class=\"object-entry__key\">${key}</span><span class=\"object-entry__value-container\"></span>\n</span>`);\n    const valueContEl = entryEl.querySelector(`.object-entry__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","import TypeView from '../type-view';\nimport {getElement, createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nexport default class ArrayView extends TypeView {\n  constructor(arr, mode) {\n    super(arr, `array`, false);\n    this._arr = arr;\n    this._mode = mode;\n    this._elements = new Map();\n    this._isOpened = false;\n  }\n\n  get template() {\n    return `\\\n<div class=\"array console__item\">\n  <div class=\"${Class.CONSOLE_ITEM_HEAD} \\\n${this._mode === Mode.PREVIEW ? Class.CONSOLE_ITEM_HEAD_SIZE : Class.CONSOLE_ITEM_HEAD_ELEMENTS}\">\\\n${this._mode === Mode.PREVIEW ? `Array(${this._arr.length})` : ``}</div>\\\n  <div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}\"></div>\n</div>`;\n  }\n\n  bind() {\n    if (this._mode === Mode.PREVIEW) {\n      return;\n    }\n    this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n    const previewEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n    previewEl.appendChild(this.createContent(this.value, true));\n\n    previewEl.addEventListener(`click`, () => {\n      if (this._isOpened) {\n        this._hideContent();\n      } else {\n        this._showContent();\n      }\n      this._isOpened = !this._isOpened;\n    });\n  }\n\n  _showContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item-content\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value, false));\n    }\n\n    this._contentContainerEl.appendChild(this._proxiedContentEl);\n  }\n\n  _hideContent() {\n    this._contentContainerEl.innerHTML = ``;\n  }\n\n  createContent(arr, isPreview) {\n    const ownPropertyNames = Object.getOwnPropertyNames(arr);\n    const keys = Object.keys(arr);\n    const fragment = document.createDocumentFragment();\n    for (let key of ownPropertyNames) {\n      const value = arr[key];\n      const indexInKeys = keys.indexOf(key);\n      const isKeyNaN = Number.isNaN(Number.parseInt(key, 10));\n      if (isPreview && indexInKeys === -1) {\n        continue;\n      }\n      const view = createTypedView(value, isPreview ? Mode.PREVIEW : Mode.DIR);\n      const entryEl = ArrayView.createEntryEl(key, view.el, isPreview ? !isKeyNaN : isPreview);\n      // if (!isPreview) {\n      //   this._elements.set(entryEl, view);\n      // }\n      fragment.appendChild(entryEl);\n    }\n    return fragment;\n  }\n\n  static createEntryEl(index, valueEl, withKey) {\n    const entryEl = getElement(`\\\n<span class=\"array__entry array-entry\">\\\n  ${withKey ? `` : `<span class=\"array-entry__key\">${index}</span>`}<span class=\"array-entry__value-container\"></span>\\\n</span>`);\n    const valueContEl = entryEl.querySelector(`.array-entry__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","import TypeView from '../type-view';\nimport {getElement, createTypedView} from '../utils';\nimport {Mode, Class} from '../enums';\n\nconst MAX_PREVIEW_FN_BODY_LENGTH = 43;\n\nconst FnType = {\n  PLAIN: `plain`,\n  ARROW: `arrow`,\n  CLASS: `class`\n};\n\n// arguments, caller, length, name, prototype, __proto__, [[FunctionLocation]], [[Scopes]]\n\n// if .caller not accessed — не выводим\n// if prototype undefined — не выводим\n// name — если неименованная — получает имя переменной, в которую записана\n// если именнованная — то имя ф-ии\n\nexport default class FunctionView extends TypeView {\n  constructor(fn, mode) {\n    super(fn, `function`, false);\n    this._mode = mode;\n    this._isOpened = false;\n    this._fnType = FunctionView.checkFnType(fn);\n  }\n\n  get template() {\n    let tpl = `<div class=\"function console__item\">`;\n    switch (this._mode) {\n      case Mode.PREVIEW:\n        tpl += `f`;\n        break;\n      case Mode.DIR:\n        tpl += `\\\n<div class=\"${Class.CONSOLE_ITEM_HEAD}\">${this._getHeadMarkup()}</div>\\\n<div class=\"${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}\"></div>`;\n        break;\n      case Mode.LOG:\n        tpl += this._getLogMarkup();\n        break;\n    }\n    tpl += `</div>`;\n    return tpl;\n  }\n\n  bind() {\n    if (this._mode === Mode.DIR) {\n      this._contentContainerEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_CONTENT_CONTAINTER}`);\n      const previewEl = this.el.querySelector(`.${Class.CONSOLE_ITEM_HEAD}`);\n      // previewEl.appendChild(this.createPreview(this.value, true));\n\n      previewEl.addEventListener(`click`, () => {\n        if (this._isOpened) {\n          this._hideContent();\n        } else {\n          this._showContent();\n        }\n        this._isOpened = !this._isOpened;\n      });\n    }\n  }\n\n  _showContent() {\n    if (!this._proxiedContentEl) {\n      this._proxiedContentEl = getElement(`<div class=\"console__item-content\"></div>`);\n      this._proxiedContentEl.appendChild(this.createContent(this.value));\n    }\n\n    this._contentContainerEl.appendChild(this._proxiedContentEl);\n  }\n\n  _hideContent() {\n    this._contentContainerEl.innerHTML = ``;\n  }\n\n  _getHeadMarkup() {\n    const {name, params, lines} = this._parseFunction(this.value);\n    const joinedLines = lines.join(`\\n`);\n\n    let markup = `\\\n<span>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `f ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}`;\n    if (this._fnType !== FnType.CLASS) {\n      markup += `{\\\n  ${joinedLines.length <= MAX_PREVIEW_FN_BODY_LENGTH ? joinedLines : `...`}\\\n}`;\n    }\n    markup += `</span>`;\n    return markup;\n  }\n\n  _getLogMarkup() {\n    return `<pre>${this.value.toString()}</pre>`;\n    // const {name, params, lines} = this._parseFunction(this.value);\n    /* return `\\\n<pre>\\\n${this._fnType === FnType.CLASS ? `class ` : ``}\\\n${this._fnType === FnType.PLAIN ? `function ` : ``}\\\n${name ? name : ``}\\\n${this._fnType !== FnType.CLASS ? `(${params.join(`, `)})` : ``}\\\n${this._fnType === FnType.ARROW ? ` => ` : ` `}{\n${lines.join(`\\n`)}\n}\n</pre>`;*/\n  }\n\n  static checkFnType(fn) {\n    let str = fn.toString();\n    const firstParenthesisIndex = str.indexOf(`(`);\n\n    const classIndex = str.indexOf(`class`);\n    const arrowIndex = str.indexOf(`=>`);\n    if (classIndex !== -1 && classIndex < firstParenthesisIndex) {\n      return FnType.CLASS;\n    } else if (arrowIndex !== -1 && arrowIndex > firstParenthesisIndex) {\n      return FnType.ARROW;\n    }\n    return FnType.PLAIN;\n  }\n\n  _parseParams(funString) {\n    const paramsStart = funString.indexOf(`(`);\n    const paramsEnd = funString.indexOf(`)`);\n\n    const paramsContent = funString.substring(paramsStart + 1, paramsEnd).trim();\n\n    return paramsContent ? paramsContent.split(`,`).map((it) => it.trim()) : [];\n  }\n\n  _parseName(funString) {\n    let endingChar;\n    if (this._fnType === FnType.CLASS) {\n      endingChar = `{`;\n    } else if (this._fnType === FnType.PLAIN) {\n      endingChar = `(`;\n    }\n    let name;\n    const re = new RegExp(`(?:class|function)\\\\s+(\\\\w+)\\\\s*(?:\\\\${endingChar})`);\n    const ex = re.exec(funString);\n    if (ex !== null) {\n      name = ex[1];\n    }\n    return name;\n  }\n\n  _parseBody(funString) {\n    const bodyStart = funString.indexOf(`{`);\n    const bodyEnd = funString.lastIndexOf(`}`);\n\n    const bodyContent = funString.substring(bodyStart + 1, bodyEnd).trim();\n\n    if (!bodyContent) {\n      return [];\n    }\n\n    return bodyContent.split(`\\n`).map(function (it) {\n      return it.trim();\n    });\n  }\n\n  _parseFunction(fnOrString) {\n    let str;\n    if (typeof fnOrString !== `string`) {\n      str = fnOrString.toString();\n    }\n    return {\n      name: this._parseName(str),\n      params: this._parseParams(str),\n      lines: this._parseBody(str)\n    };\n  }\n\n  createContent(fn) {\n    const fragment = document.createDocumentFragment();\n    const keys = [`name`, `prototype`, `caller`, `arguments`, `length`, `__proto__`];\n    for (let key of keys) {\n      let value;\n      try {\n        value = fn[key];\n      } catch (err) {\n        continue;\n      }\n      const view = createTypedView(value, Mode.DIR);\n      const entryEl = FunctionView.createEntryEl(key, view.el);\n      fragment.appendChild(entryEl);\n    }\n    return fragment;\n  }\n\n  static createEntryEl(key, valueEl) {\n    const entryEl = getElement(`\\\n<span class=\"object__entry object-entry\">\n  <span class=\"object-entry__key\">${key}</span><span class=\"object-entry__value-container\"></span>\n</span>`);\n    const valueContEl = entryEl.querySelector(`.object-entry__value-container`);\n    valueContEl.appendChild(valueEl);\n\n    return entryEl;\n  }\n}\n","import TypeView from '../type-view';\n\nexport default class PrimitiveView extends TypeView {\n  constructor(value, type) {\n    super(value, type, true);\n  }\n\n  get template() {\n    const type = this.type;\n    const value = this.value;\n    let html = ``;\n    switch (type) {\n      case `undefined`:\n        html = `<div class=\"console__item ` + type + `\">` + type + `</div>`;\n        break;\n\n      case `number`:\n        if (isNaN(value)) {\n          html = `<div class=\"console__item NaN\">NaN</div>`;\n        } else if ((value === Infinity || value === -Infinity)) {\n          html = `<div class=\"console__item number\">` + (value === -Infinity ? `-` : ``) + `Infinity</div>`;\n        } else {\n          html = `<div class=\"console__item ` + type + `\">` + value + `</div>`;\n        }\n        break;\n\n      case `string`:\n        html = `<div class=\"console__item ` + type + `\">\"` + value + `\"</div>`;\n        break;\n\n      case `null`:\n      case `boolean`:\n        html = `<div class=\"console__item ` + type + `\">` + value + `</div>`;\n        break;\n      case `symbol`:\n        html = `<div class=\"console__item ` + type + `\">` + value.toString() + `</div>`;\n        break;\n\n      case `object`:\n        if (value === null) {\n          html = `<div class=\"console__item null\">` + value + `</div>`;\n          break;\n        }\n    }\n    return html;\n  }\n}\n","import ObjectView from './object/object-view';\nimport ArrayView from './array/array-view';\nimport FunctionView from './function/function-view';\nimport PrimitiveView from './primitive/primitive-view';\n\nexport const getElement = (htmlMarkup) => {\n  const div = document.createElement(`div`);\n  div.innerHTML = htmlMarkup;\n  return div.firstElementChild;\n};\n\nconst primitiveTypeofs = [\n  `undefined`,\n  `number`,\n  `string`,\n  `boolean`,\n  `symbol`,\n  `object`\n];\n\nexport const getPrimitiveType = (val) => {\n  const type = typeof val;\n\n  if (!primitiveTypeofs.includes(type)) {\n    throw new Error(`Unknown primitive type: ` + type);\n  }\n\n  return type;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\nexport const createTypedView = (val, mode) => {\n  let view;\n  const type = typeof val;\n  switch (type) {\n    case `function`:\n      view = new FunctionView(val, mode);\n      break;\n    case `object`:\n      // TODO: check instanceof Date, String, Boolean, Number\n      if (val !== null) {\n        if (Array.isArray(val)) {\n          view = new ArrayView(val, mode);\n        } else {\n          view = new ObjectView(val, mode);\n        }\n      } else {\n        view = new PrimitiveView(val, type);\n      }\n      break;\n    default:\n      view = new PrimitiveView(val, type);\n      break;\n  }\n  return view;\n};\n","// import babelPolyfill from 'babel-polyfill';\n// import whatwgFetch from 'whatwg-fetch';\nimport {getElement, createTypedView} from './utils';\n\nconst Mode = {\n  LOG: `log`,\n  DIR: `dir`,\n  PREVIEW: `preview`,\n  ERROR: `error`\n};\n\nconst getRowEl = (entries, mode) => {\n  const el = getElement(`<div class=\"console__row\"></div>`);\n  entries.forEach(function (code) {\n    el.appendChild(createTypedView(code, mode).el);\n  });\n  return el;\n};\n\n/**\n * Init Console\n *\n * @param {HTMLElement} cont — console container\n * @return {{log: log}}\n */\nconst jsConsoleInit = (cont) => {\n  if (!cont) {\n    throw Error(`Console is not inited!`);\n  }\n\n  // Public interface\n  const logger = {};\n\n  /**\n   * Show formatted & highlighted code into `cont`\n   */\n  logger.log = function (...rest) {\n    cont.appendChild(getRowEl(rest, Mode.LOG));\n\n    if (typeof logger.onlog === `function`) {\n      logger.onlog(rest);\n    }\n  };\n\n  logger.error = function (errOrMessage) {\n    const el = getElement(`<div class=\"console__row\"></div>`);\n    if (errOrMessage instanceof Error) {\n      el.appendChild(createTypedView(errOrMessage, Mode.ERROR).el);\n    } else if (typeof errOrMessage === `string`) {\n      el.appendChild(createTypedView(new Error(errOrMessage), Mode.ERROR).el);\n    }\n    cont.appendChild(el);\n  };\n\n  logger.clean = function () {\n    cont.innerHTML = ``;\n  };\n\n  logger.getLogSource = function () {\n    return cont.innerHTML;\n  };\n\n  logger.dir = function (...rest) {\n    cont.appendChild(getRowEl(rest, Mode.DIR));\n\n    if (typeof logger.onlog === `function`) {\n      logger.onlog(rest);\n    }\n  };\n\n  logger.extend = function (consoleObject) {\n    consoleObject.log = logger.log;\n    consoleObject.info = logger.log;\n\n    consoleObject.error = logger.error;\n    consoleObject.warn = logger.error;\n\n    consoleObject.dir = logger.dir;\n\n    return consoleObject;\n  };\n\n  return logger;\n};\n\n// window.jsConsoleInit = jsConsoleInit;\nexport default jsConsoleInit;\n","import jsConsoleInit from './main';\n\nconst CSS_URL = `//htmlacademy.github.io/console.js/css/style.css`;\n\nconst errors = [];\nconst collectErr = function (...rest) {\n  errors.push(rest);\n};\nwindow.onerror = collectErr;\nwindow.console.warn = collectErr;\nwindow.console.error = collectErr;\n\nconst messages = [];\nconst collectMsg = function (...rest) {\n  messages.push(...rest);\n};\nwindow.console.info = collectMsg;\nwindow.console.log = collectMsg;\nwindow.console.debug = collectMsg;\n\nconst init = function () {\n  const div = window.document.createElement(`div`);\n  const jsConsole = jsConsoleInit(div);\n  window.document.body.appendChild(div);\n\n  jsConsole.extend(window.console);\n\n  errors.forEach(function (args) {\n    jsConsole.error(jsConsole, ...args);\n  });\n  messages.forEach(function (args) {\n    jsConsole.log(jsConsole, ...args);\n  });\n  window.addEventListener(`error`, (evt) => {\n    jsConsole.error(evt.error);\n  });\n};\n\nconst loadStyles = function () {\n  const link = window.document.createElement(`link`);\n  link.rel = `stylesheet`;\n  link.href = CSS_URL;\n  window.document.head.appendChild(link);\n};\n\nwindow.addEventListener(`DOMContentLoaded`, function () {\n  init();\n  loadStyles();\n});\n"]}